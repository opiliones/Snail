
==================== FINAL INTERFACE ====================
2019-08-04 15:04:55.45967668 UTC

interface main:Main 8044
  interface hash: 0a8b8504e8c8e937094324d0cf0d453d
  ABI hash: 8b23dcdeccd8a03c239b2c98a5222082
  export-list hash: 333167ec6f94436e2b816c4ef9571638
  orphan hash: 9c78bbddd5907a691b1c6941824acd20
  flag hash: 70084cd601792f6f81f861369f7746b0
  opt_hash: 2c98c95d41c045ae9c2fb565ec8aabc6
  hpc_hash: 93b885adfe0da089cdf634904fd59f71
  sig of: Nothing
  used TH splices: False
  where
exports:
  Main.allocThreadInfo
  Main.and'
  Main.andBrank
  Main.andSpace
  Main.bool
  Main.boolDispatch
  Main.brank
  Main.brankAnd
  Main.break'
  Main.breakF
  Main.breakT
  Main.cd
  Main.check
  Main.chkParseErr
  Main.chkPureFn
  Main.chkVar
  Main.cmdExec
  Main.colon
  Main.comma'
  Main.completeFn
  Main.def
  Main.def'
  Main.defaultEnv
  Main.defaultFuncs
  Main.defaultParseEnv
  Main.defaultVars
  Main.div'
  Main.echo
  Main.eq'
  Main.errHandlerIO
  Main.errHandlerIO'
  Main.eval
  Main.eval'
  Main.evalElse
  Main.evalFn
  Main.evalIf
  Main.evalPure
  Main.evalScript
  Main.exit'
  Main.exitEval
  Main.expand
  Main.expandL
  Main.false
  Main.fold'
  Main.fold''
  Main.fork
  Main.formatUsage
  Main.fromEno
  Main.ge'
  Main.genCmd
  Main.genCmd'
  Main.genEval
  Main.genExpr
  Main.genExpr'
  Main.genFuncEnv
  Main.genFuncSpace
  Main.genLambda
  Main.genNL
  Main.genRd
  Main.get'
  Main.getBool
  Main.getFloat
  Main.getInt
  Main.getIntForIdx
  Main.getStr
  Main.getSubOpt
  Main.getVar
  Main.getVarMaybe
  Main.getenv
  Main.glob
  Main.greater
  Main.gt'
  Main.idx
  Main.idx'
  Main.ignoreError
  Main.incAllocCount
  Main.incFunID
  Main.int
  Main.invalidFormat
  Main.isArg
  Main.isList
  Main.keep'
  Main.killThreadHandler
  Main.le'
  Main.len'
  Main.lenc
  Main.less
  Main.list
  Main.load
  Main.loop
  Main.loop'
  Main.lt'
  Main.main
  Main.map'
  Main.map''
  Main.match'
  Main.minus'
  Main.mkPath
  Main.mod'
  Main.mul'
  Main.multiDefine
  Main.neg
  Main.normalDispatch
  Main.not'
  Main.not''
  Main.not'''
  Main.notDefined
  Main.notLiteral
  Main.notPureFunc
  Main.optHead
  Main.options
  Main.or'
  Main.para
  Main.parens
  Main.parseClsr
  Main.parseDoller
  Main.parseList
  Main.parseRedirect
  Main.parseStr
  Main.parseSym
  Main.parseTilde
  Main.parseVar
  Main.parseWord
  Main.pipe'
  Main.plus'
  Main.plus''
  Main.pow'
  Main.print
  Main.pureDispatch
  Main.read'
  Main.read''
  Main.readInt
  Main.repl
  Main.return'
  Main.runEval
  Main.runEvalFunc
  Main.runEvalKeep
  Main.runEvalMain
  Main.same'
  Main.searchfn
  Main.set
  Main.setBin
  Main.setBinBB
  Main.setBinNB
  Main.setBinVB
  Main.setDefVar
  Main.setFn
  Main.setPureFn
  Main.setRetEnv
  Main.setUni
  Main.setUniBool
  Main.setVar
  Main.setenv
  Main.sethandles
  Main.shift
  Main.show'
  Main.signalHandleClear
  Main.signalHandleRestore
  Main.spaceAnd
  Main.spaces
  Main.spawn
  Main.split
  Main.sub
  Main.switch
  Main.throwShError
  Main.throwSyntax
  Main.timeo
  Main.tmpdir
  Main.tmpdir'
  Main.tmpfile
  Main.tmpfile'
  Main.toFloat
  Main.toInt
  Main.toStr
  Main.trap
  Main.trapExit
  Main.true
  Main.ubool
  Main.ulist
  Main.unavail
  Main.unquotedCompleteFn
  Main.usage
  Main.usagePrint
  Main.usageShow
  Main.valExpand
  Main.valExpandInc
  Main.valExpandMaybe
  Main.wordlist
  Main.zipMaybe
  Main.Cache{Main.Cache Main.NoCache Main.NoFunc cache clsrId}
  Main.Custom{Main.InvalidFormat Main.MultiDefine Main.NotDefined Main.NotLiteral Main.NotPureFunc}
  Main.Env{Main.Env args dir err flags funID funcs idSrc inn out parenv ret status thread vars}
  Main.Eval{Main.Eval}
  Main.Flags{Main.Flags ignoreInterpreterError interactiveMode}
  Main.JobInfo{Main.Forked Main.Threaded}
  Main.LambdaType{Main.Expand Main.NoArgs Main.Normal Main.Purely}
  Main.ParseEnv{Main.ParseEnv addArg allocCount defFn defPureFn defVar isErr parseFlags unDefPureFn}
  Main.Parser
  Main.ShError{Main.Broken Main.Exited Main.Internal Main.NumArgs Main.Returned Main.SomeError Main.TypeMismatch Main.UnboundVar}
  Main.ThreadInfo{Main.ThreadInfo cmdMvar exitMvar exitTrap tid}
  Main.Val{Main.Bool Main.FD Main.Float Main.Lambda Main.LinkedStr Main.List Main.Prim Main.PrimFS Main.Rd Main.Str Main.Var Main.VarM}
  Main.VarT{Main.VarA Main.VarN Main.VarR}
module dependencies:
package dependencies: Glob-0.9.3 array-0.5.2.0 base-4.11.1.0
                      base-compat-0.10.5 base-compat-batteries-0.10.1 bifunctors-5.5.3
                      binary-0.8.5.1 bytestring-0.10.8.2 case-insensitive-1.2.0.11
                      containers-0.5.11.0 deepseq-1.4.3.0 directory-1.3.1.5 dlist-0.8.0.5
                      exceptions-0.10.0 filepath-1.4.2 generic-deriving-1.12.2
                      ghc-boot-th-8.4.4 ghc-prim-0.5.2.0 hashable-1.2.7.0
                      haskeline-0.7.4.3 integer-gmp-1.0.2.0 integer-logarithms-1.0.2.2
                      megaparsec-6.5.0 mtl-2.2.2 parser-combinators-1.0.0 pretty-1.1.3.6
                      primitive-0.6.3.0 process-1.6.3.0 random-1.1 regex-base-0.93.2
                      regex-posix-0.95.2 scientific-0.3.6.2 snale-0.1.0.0 split-0.2.3.3
                      stm-2.4.5.1 template-haskell-2.13.0.0 temporary-1.3
                      terminfo-0.4.1.1 text-1.2.3.1 text-show-3.7.4
                      th-abstraction-0.2.8.0 th-lift-0.7.11 time-1.8.0.2
                      transformers-0.5.5.0 unix-2.7.2.2 unordered-containers-0.2.9.0
                      utf8-string-1.0.1.1
orphans: stm-2.4.5.1:Control.Monad.STM
         time-1.8.0.2:Data.Time.Format.Parse
         time-1.8.0.2:Data.Time.LocalTime.Internal.ZonedTime
         time-1.8.0.2:Data.Time.LocalTime.Internal.LocalTime
         time-1.8.0.2:Data.Time.Calendar.Gregorian
         transformers-0.5.5.0:Control.Monad.Trans.Error
         hashable-1.2.7.0:Data.Hashable.Generic
         regex-posix-0.95.2:Text.Regex.Posix.String
         regex-posix-0.95.2:Text.Regex.Posix.Sequence
         regex-posix-0.95.2:Text.Regex.Posix.ByteString.Lazy
         regex-posix-0.95.2:Text.Regex.Posix.ByteString
         regex-base-0.93.2:Text.Regex.Base.Context
         text-show-3.7.4:TextShow.Control.Applicative
         text-show-3.7.4:TextShow.Control.Concurrent
         text-show-3.7.4:TextShow.Control.Exception
         text-show-3.7.4:TextShow.Control.Monad.ST
         text-show-3.7.4:TextShow.Data.Array
         text-show-3.7.4:TextShow.Data.Complex
         text-show-3.7.4:TextShow.Data.Data
         text-show-3.7.4:TextShow.Data.Dynamic
         text-show-3.7.4:TextShow.Data.Either
         text-show-3.7.4:TextShow.Data.Fixed
         text-show-3.7.4:TextShow.Data.Functor.Compose
         text-show-3.7.4:TextShow.Data.Functor.Identity
         text-show-3.7.4:TextShow.Data.Functor.Product
         text-show-3.7.4:TextShow.Data.Functor.Sum
         text-show-3.7.4:TextShow.Data.List.NonEmpty
         text-show-3.7.4:TextShow.Data.Monoid
         text-show-3.7.4:TextShow.Data.Ord
         text-show-3.7.4:TextShow.Data.Proxy
         text-show-3.7.4:TextShow.Data.Semigroup
         text-show-3.7.4:TextShow.Data.Text
         text-show-3.7.4:TextShow.Data.ByteString
         text-show-3.7.4:TextShow.Data.Type.Coercion
         text-show-3.7.4:TextShow.Data.Type.Equality
         text-show-3.7.4:TextShow.Data.Typeable
         text-show-3.7.4:TextShow.Data.Version
         text-show-3.7.4:TextShow.Data.Void
         text-show-3.7.4:TextShow.GHC.Event
         text-show-3.7.4:TextShow.GHC.Fingerprint
         text-show-3.7.4:TextShow.GHC.Generics
         generic-deriving-1.12.2:Generics.Deriving.Instances
         text-show-3.7.4:TextShow.GHC.RTS.Flags
         text-show-3.7.4:TextShow.Data.Bool
         text-show-3.7.4:TextShow.GHC.Stack
         text-show-3.7.4:TextShow.GHC.StaticPtr
         text-show-3.7.4:TextShow.Data.Tuple
         text-show-3.7.4:TextShow.GHC.TypeLits
         text-show-3.7.4:TextShow.Numeric.Natural
         text-show-3.7.4:TextShow.System.Exit
         text-show-3.7.4:TextShow.System.IO
         text-show-3.7.4:TextShow.System.Posix.Types
         text-show-3.7.4:TextShow.Foreign.C.Types
         text-show-3.7.4:TextShow.Data.Floating
         text-show-3.7.4:TextShow.Foreign.Ptr
         text-show-3.7.4:TextShow.Text.Read
         text-show-3.7.4:TextShow.Data.List
         text-show-3.7.4:TextShow.Data.Char
         text-show-3.7.4:TextShow.Data.Maybe
         text-show-3.7.4:TextShow.Data.Ratio
         text-show-3.7.4:TextShow.Data.Integral
         th-lift-0.7.11:Language.Haskell.TH.Lift text-1.2.3.1:Data.Text.Lazy
         text-1.2.3.1:Data.Text binary-0.8.5.1:Data.Binary.Generic
         bytestring-0.10.8.2:Data.ByteString.Builder
         text-1.2.3.1:Data.Text.Show base-4.11.1.0:GHC.Float
         base-4.11.1.0:GHC.Base
family instance modules: base-4.11.1.0:Control.Applicative
                         base-4.11.1.0:Data.Complex base-4.11.1.0:Data.Functor.Compose
                         base-4.11.1.0:Data.Functor.Const
                         base-4.11.1.0:Data.Functor.Identity
                         base-4.11.1.0:Data.Functor.Product base-4.11.1.0:Data.Functor.Sum
                         base-4.11.1.0:Data.Monoid base-4.11.1.0:Data.Semigroup
                         base-4.11.1.0:Data.Semigroup.Internal base-4.11.1.0:Data.Version
                         base-4.11.1.0:Data.Void base-4.11.1.0:GHC.Exts
                         base-4.11.1.0:GHC.Generics base-4.11.1.0:GHC.IO.Exception
                         containers-0.5.11.0:Data.IntMap.Internal
                         containers-0.5.11.0:Data.IntSet.Internal
                         containers-0.5.11.0:Data.Map.Internal
                         containers-0.5.11.0:Data.Sequence.Internal
                         containers-0.5.11.0:Data.Set.Internal containers-0.5.11.0:Data.Tree
                         dlist-0.8.0.5:Data.DList
                         generic-deriving-1.12.2:Generics.Deriving.Instances
                         ghc-boot-th-8.4.4:GHC.ForeignSrcLang.Type
                         ghc-boot-th-8.4.4:GHC.LanguageExtensions.Type
                         megaparsec-6.5.0:Text.Megaparsec.Error
                         megaparsec-6.5.0:Text.Megaparsec.Pos
                         megaparsec-6.5.0:Text.Megaparsec.State
                         megaparsec-6.5.0:Text.Megaparsec.Stream
                         pretty-1.1.3.6:Text.PrettyPrint.Annotated.HughesPJ
                         pretty-1.1.3.6:Text.PrettyPrint.HughesPJ
                         primitive-0.6.3.0:Control.Monad.Primitive
                         primitive-0.6.3.0:Data.Primitive.Array
                         template-haskell-2.13.0.0:Language.Haskell.TH.Syntax
                         text-1.2.3.1:Data.Text text-1.2.3.1:Data.Text.Lazy
                         text-show-3.7.4:TextShow.FromStringTextShow
                         text-show-3.7.4:TextShow.Options
                         th-abstraction-0.2.8.0:Language.Haskell.TH.Datatype
                         unordered-containers-0.2.9.0:Data.HashMap.Base
                         unordered-containers-0.2.9.0:Data.HashSet
import  -/  Glob-0.9.3:System.FilePath.Glob a6e35a0fd31473e1a0e58e0416044b89
import  -/  Glob-0.9.3:System.FilePath.Glob.Base 89106a9b6bdc22bcede2c205ee2b45bf
import  -/  Glob-0.9.3:System.FilePath.Glob.Directory d71598d83d5b06ba41bd1600dbacc1f9
import  -/  base-4.11.1.0:Control.Applicative 55d9b3a7491623b0362290e162d67308
import  -/  base-4.11.1.0:Control.Concurrent ef40f102578b6e7296c2a2358b631ee7
import  -/  base-4.11.1.0:Control.Exception.Base 6b3335161fe9c47efeac02d92d6dc212
import  -/  base-4.11.1.0:Control.Monad c5f960c67d822497578bffbd3e4c01cf
import  -/  base-4.11.1.0:Control.Monad.IO.Class 96109c36cb3c919872278540487fa39e
import  -/  base-4.11.1.0:Data.Either 39d922b371c4c52d426e9ee66de8371a
import  -/  base-4.11.1.0:Data.Foldable 8ed35c38958063956af33c935ea03444
import  -/  base-4.11.1.0:Data.Functor f522c3501272159820fd6f242510732f
import  -/  base-4.11.1.0:Data.IORef 7625124710852387e94dfb3e4df7515e
import  -/  base-4.11.1.0:Data.List 83dc843e47bfc0c5af51e19c6f3476d5
import  -/  base-4.11.1.0:Data.Maybe 409c3da2b142470b68be39ce1d97a9f7
import  -/  base-4.11.1.0:Data.Monoid c40cd435d79b84293ce5503253ee6d44
import  -/  base-4.11.1.0:Data.OldList 1b35aa3c6805ff7c8887a35a866fe006
import  -/  base-4.11.1.0:Data.Traversable 7ad4edb9184ea1ae8e73f6b94f115c8c
import  -/  base-4.11.1.0:Data.Tuple 3af66f3ac61ed95ba8a3a3f68ebc5003
import  -/  base-4.11.1.0:Data.Void 4c9c07b3e8b1059587733a690d1fbc93
import  -/  base-4.11.1.0:Debug.Trace ec3b3fe30e7dee9ae775eb1dae78f9d5
import  -/  base-4.11.1.0:Foreign.C.Error 88c30c8aafc428b0be8574f4ddaa4098
import  -/  base-4.11.1.0:GHC.Base 604111500e81281298777e721c75643b
import  -/  base-4.11.1.0:GHC.Conc.Sync 0f06fc4d7792ea35160385e7175366ba
import  -/  base-4.11.1.0:GHC.Exception e1b7fe1dbd1d0e3fb049e1163c71a5e8
import  -/  base-4.11.1.0:GHC.Float 99c69d365bb2607725a22530ce1ca4b4
import  -/  base-4.11.1.0:GHC.IO 1d5542cc02075c5e948018bfacea89c1
import  -/  base-4.11.1.0:GHC.IO.Exception acc060dca2e46d8b8275d06ee7d5d60d
import  -/  base-4.11.1.0:GHC.IO.Handle fb550f271baae6fe7b19205b8166986b
import  -/  base-4.11.1.0:GHC.IO.Handle.FD b40dc29f72086f950a3c8043c5f34542
import  -/  base-4.11.1.0:GHC.IO.Handle.Text e23ef47ca91991c54e165e15e91a1ab0
import  -/  base-4.11.1.0:GHC.IO.Handle.Types d85072f60d88fceac27e39e3cbd01092
import  -/  base-4.11.1.0:GHC.IO.IOMode 925d7d58f693b23bffdd8cdbdf9d203b
import  -/  base-4.11.1.0:GHC.IORef e92b95f2e36bdb5fe155921cbe861044
import  -/  base-4.11.1.0:GHC.List 1e4357702d8d00cded0703bd293e50e8
import  -/  base-4.11.1.0:GHC.MVar 5887537e57bb20af86721190334ddceb
import  -/  base-4.11.1.0:GHC.Num 8e54b26dce4495382dc4b50cf36ab754
import  -/  base-4.11.1.0:GHC.Real b4beb0389ba1ad5d9640aae67848c5d3
import  -/  base-4.11.1.0:GHC.Show 73be67392447c974f19c3befd83c46c0
import  -/  base-4.11.1.0:Prelude 0750c25585e2b797cd78291d423d39dd
import  -/  base-4.11.1.0:System.Console.GetOpt b4fec83ae6b15b10b7f5d44dcda3994e
import  -/  base-4.11.1.0:System.Environment 06420d98d10ee04b8dda9c0d88032c55
import  -/  base-4.11.1.0:System.Exit a7af6f90beaa15182d3a20667d878df0
import  -/  base-4.11.1.0:System.IO 40b9aff18a55c99eb253f9a43ff9b627
import  -/  base-4.11.1.0:System.Posix.Types be5085ae10d4dd6a6ca0d0a8a9b18743
import  -/  base-4.11.1.0:System.Timeout f155285dedda0b3cd27ffde15dac6e4b
import  -/  base-4.11.1.0:Text.Printf 115e6d1593f02cf01fd99a33fbd64b81
import  -/  directory-1.3.1.5:System.Directory b37e104cebfec7be1bd75a914f4adf6d
import  -/  directory-1.3.1.5:System.Directory.Internal.Common e2b5747e6a2d2047cd82cdb5d288c96a
import  -/  filepath-1.4.2:System.FilePath.Posix b68bd59480eb19c1c35857258bda78b4
import  -/  ghc-prim-0.5.2.0:GHC.Classes 122abfcd7450c6c11602933c9ca5f80d
import  -/  ghc-prim-0.5.2.0:GHC.Types d9b3023de7feae4a5308d643da5543f7
import  -/  haskeline-0.7.4.3:System.Console.Haskeline ae44e0457cc086b907b7898c8e111e75
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.Completion e946f56f58fe0049e470a58a1923c0cf
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.InputT 9a7d0ab932797276e7c37e0ce6df1bb5
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.MonadException 9d71ea42207babb969bbd511ce9ce70a
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.Prefs 5ad10166c6b3f23efae9a861b21689ac
import  -/  haskeline-0.7.4.3:System.Console.Haskeline.Term f1278ae94d39cf4c07ab62062fff6d30
import  -/  megaparsec-6.5.0:Text.Megaparsec 787fb6ebcdb225a99997fc30576d23a6
import  -/  megaparsec-6.5.0:Text.Megaparsec.Char ecd8da704098d6cc416195c492e8edc6
import  -/  megaparsec-6.5.0:Text.Megaparsec.Char.Lexer cac96568cdef3b3c58c5484f64dd4d54
import  -/  megaparsec-6.5.0:Text.Megaparsec.Class 314573f4008ee711c4a0d60ed6b628b0
import  -/  megaparsec-6.5.0:Text.Megaparsec.Error 8d04b502f1996d97359e0f3510f167cf
import  -/  megaparsec-6.5.0:Text.Megaparsec.Expr 8e39f2b43bcbc4b9298d6472f1a92e9a
import  -/  megaparsec-6.5.0:Text.Megaparsec.Internal 1d2f6e8ed0fa6ce4ed1a49df2fead5d0
import  -/  mtl-2.2.2:Control.Monad.Error.Class df146c18e27154b8df4c8637c59fd61b
import  -/  mtl-2.2.2:Control.Monad.Except a6fe75d3c5548ea9e926864b8cbfe1ee
import  -/  mtl-2.2.2:Control.Monad.State 1f28325cb5ef11b6b40ffadfe4bc2ca3
import  -/  mtl-2.2.2:Control.Monad.State.Class acc76e93f44ac4486524db1a327e0a0a
import  -/  parser-combinators-1.0.0:Control.Applicative.Combinators ac617ce95d7f22da1975b0cb171c6660
import  -/  parser-combinators-1.0.0:Control.Monad.Combinators fddfdf717d76f788520dac71131cb54e
import  -/  process-1.6.3.0:System.Process 9c46b1d4a600c4f7ade422dbe94d755f
import  -/  process-1.6.3.0:System.Process.Common 115d0bf2c145433a015467b093eb38ea
import  -/  process-1.6.3.0:System.Process.Internals 9315ea81448874afb27a9420aa03dfd4
import  -/  regex-posix-0.95.2:Text.Regex.Posix f57cdddd94d7001fdcbdd139454ef471
import  -/  regex-posix-0.95.2:Text.Regex.Posix.Wrap df1c44acbb76df7a2165c5cad95bfcb8
import  -/  scientific-0.3.6.2:Data.Scientific 7b530d2d0da19bdcd5f1ca9aa5dbe1ba
import  -/  snale-0.1.0.0:LinuxSignal ca7647db53f3f5c7aece2513897b52dc
import  -/  split-0.2.3.3:Data.List.Split 5324097c17aea95e263e86195d8f4cf4
import  -/  split-0.2.3.3:Data.List.Split.Internals 5b68cd2231dc71aa99e1db1b43dd9a13
import  -/  temporary-1.3:System.IO.Temp cff96040390717ca4a9d2c1d2e47fbf8
import  -/  text-1.2.3.1:Data.Text cb97f965b33763b648b5393c0517cf50
import  -/  text-1.2.3.1:Data.Text.IO aae64baefaf27783f18ad94ee43bc187
import  -/  text-1.2.3.1:Data.Text.Internal 4893d0339f20e05978e1af2720305fa2
import  -/  text-1.2.3.1:Data.Text.Read 0b4ab62ce28f69694bd97108921c6aca
import  -/  text-1.2.3.1:Data.Text.Show cf0c5ecc7621e9d17b233013843ebbaa
import  -/  text-show-3.7.4:TextShow 7ed4c8e8389cc87a0c1f796e29be5ed6
import  -/  text-show-3.7.4:TextShow.Classes 95bfce71ed45c31a1eb22bf4cb8135ae
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Except 1cac4acbba7f36bd732fcc993d3cc20d
import  -/  transformers-0.5.5.0:Control.Monad.Trans.Maybe d8c1b6e39f3b898d0e318440d310cfa9
import  -/  transformers-0.5.5.0:Control.Monad.Trans.State.Lazy bb07ba19cd14893d125b163b03c16c98
import  -/  unix-2.7.2.2:System.Posix.Files ef0155fc9151406883143771504516ba
import  -/  unix-2.7.2.2:System.Posix.Files.Common ff7cf852d6790b733025d14863e2abc4
import  -/  unix-2.7.2.2:System.Posix.IO 11600c0c229634f2fc2b7db9b1a12759
import  -/  unix-2.7.2.2:System.Posix.Process 70aa73af42d0cfec92dac2a25cce628c
import  -/  unix-2.7.2.2:System.Posix.Process.Common fd3264763c761572e943f6d7b8e971b5
import  -/  unix-2.7.2.2:System.Posix.Signals 1eb5e3575ae40fb0badd354898c64a2c
import  -/  unix-2.7.2.2:System.Posix.User 44182e6ee3f1f3b6d57bfbec2efec435
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Base ade330e44ac167d7aba8ff66787f81cd
import  -/  unordered-containers-0.2.9.0:Data.HashMap.Strict c7af08f5ba8117e970a40e6df7dbf243
import  -/  unordered-containers-0.2.9.0:Data.HashSet c7c724e1d3556a784ebd86a7581342b7
import  -/  utf8-string-1.0.1.1:Codec.Binary.UTF8.String d8a8bcecc841d8d4e2e55543b213855e
61d9aba738a7367b1479d90fc7413189
  $fApplicativeEval :: GHC.Base.Applicative Main.Eval
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eval
                  Main.$fFunctorEval
                  (Main.$fApplicativeEval_$s$fApplicativeExceptT_$cpure
                     @ ([Main.Val], Main.ShError))
                    `cast`
                  (forall (a :: <*>_N). <a>_R ->_R Sym (Main.N:Eval[0]) <a>_N)
                  (Main.$fApplicativeEval_$s$w$c<*> @ ([Main.Val], Main.ShError))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Main.N:Eval[0]) <a -> b>_N
                   ->_R Sym (Main.N:Eval[0]) <a>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N)
                  (\ @ a @ b @ c -> Main.$fApplicativeEval2 @ c @ b @ a)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R Sym (Main.N:Eval[0]) <a>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    ([Main.Val], Main.ShError)
                                    c>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <([Main.Val], Main.ShError)>_N
                                                      <GHC.Types.IO>_R
                                                      <c>_N) ; Sym (Main.N:Eval[0]) <c>_N))
                  (Main.$fApplicativeEval_$s$fApplicativeExceptT_$c*>
                     @ ([Main.Val], Main.ShError))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Main.N:Eval[0]) <a>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N)
                  Main.$fApplicativeEval1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Main.N:Eval[0]) <a>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    ([Main.Val], Main.ShError)
                                    a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <([Main.Val], Main.ShError)>_N
                                                      <GHC.Types.IO>_R
                                                      <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
61d9aba738a7367b1479d90fc7413189
  $fApplicativeEval1 ::
    Control.Monad.Trans.Except.ExceptT
      ([Main.Val], Main.ShError) GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT
         ([Main.Val], Main.ShError) GHC.Types.IO b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(LS)),1*C1(U(U,U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ a
                   @ b
                   (x3 :: Control.Monad.Trans.Except.ExceptT
                            ([Main.Val], Main.ShError) GHC.Types.IO a)
                   (eta :: Control.Monad.Trans.Except.ExceptT
                             ([Main.Val], Main.ShError) GHC.Types.IO b)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x3
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <([Main.Val], Main.ShError)>_N
                           <GHC.Types.IO>_R
                           <a>_N ; GHC.Types.N:IO[0]
                                       <Data.Either.Either ([Main.Val], Main.ShError) a>_R)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x4 -> ds
                   Data.Either.Right y
                   -> case eta
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <([Main.Val], Main.ShError)>_N
                                <GHC.Types.IO>_R
                                <b>_N ; GHC.Types.N:IO[0]
                                            <Data.Either.Either ([Main.Val], Main.ShError) b>_R)
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv2, Data.Either.Left @ ([Main.Val], Main.ShError) @ a e1 #)
                        Data.Either.Right x4 -> (# ipv2, wild #) } } } }) -}
61d9aba738a7367b1479d90fc7413189
  $fApplicativeEval2 ::
    (a -> b -> c)
    -> Control.Monad.Trans.Except.ExceptT
         ([Main.Val], Main.ShError) GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT
         ([Main.Val], Main.ShError) GHC.Types.IO b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) c #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <L,1*C1(C1(U))><C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ c
                   @ b
                   @ a
                   (f4 :: a -> b -> c)
                   (x3 :: Control.Monad.Trans.Except.ExceptT
                            ([Main.Val], Main.ShError) GHC.Types.IO a)
                   (eta :: Control.Monad.Trans.Except.ExceptT
                             ([Main.Val], Main.ShError) GHC.Types.IO b)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x3
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <([Main.Val], Main.ShError)>_N
                           <GHC.Types.IO>_R
                           <a>_N ; GHC.Types.N:IO[0]
                                       <Data.Either.Either ([Main.Val], Main.ShError) a>_R)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left x4
                   -> (# ipv, Data.Either.Left @ ([Main.Val], Main.ShError) @ c x4 #)
                   Data.Either.Right y
                   -> case eta
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <([Main.Val], Main.ShError)>_N
                                <GHC.Types.IO>_R
                                <b>_N ; GHC.Types.N:IO[0]
                                            <Data.Either.Either ([Main.Val], Main.ShError) b>_R)
                             ipv of ds1 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv2, Data.Either.Left @ ([Main.Val], Main.ShError) @ c e1 #)
                        Data.Either.Right x4
                        -> (# ipv2,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ c
                                (f4 y x4) #) } } } }) -}
2e2c0f34b235589ff3e635a68956f43d
  $fApplicativeEval3 ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Data.Either.Either e b #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ @ e
                   @ a
                   @ b
                   (w1 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b))
                   (w2 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w1
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a -> b>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either
                                                                      e (a -> b)>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right k6
                   -> case w2
                             `cast`
                           (Control.Monad.Trans.Except.N:ExceptT[0]
                                <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                                   <Data.Either.Either e a>_R)
                             ipv of ds2 { (#,#) ipv2 ipv3 ->
                      case ipv3 of wild1 {
                        Data.Either.Left e1 -> (# ipv2, Data.Either.Left @ e @ b e1 #)
                        Data.Either.Right x3
                        -> (# ipv2, Data.Either.Right @ e @ b (k6 x3) #) } } } }) -}
86c9632dd8f177e11befeb95de0a1b15
  $fApplicativeEval_$s$fApplicativeExceptT_$c*> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m7 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k6 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m7
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x3
                   -> k6
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
3b0f3533e2ff0fe6b7279d0ba562956d
  $fApplicativeEval_$s$fApplicativeExceptT_$cpure ::
    a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e @ a (a1 :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Data.Either.Right @ e @ a a1 #))
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <a>_N)) -}
27ea7f0cfd11422a606ba3a62c9ebce9
  $fApplicativeEval_$s$w$c<*> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,1*U))><S,U>,
     Inline: [0],
     Unfolding: InlineRule (0, True, True)
                Main.$fApplicativeEval3
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO (a -> b)>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
94db68e1495b515fa2f4d2f653a3d700
  $fEqCustom :: GHC.Classes.Eq Main.Custom
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Custom Main.$fEqCustom_$c== Main.$fEqCustom_$c/= -}
94db68e1495b515fa2f4d2f653a3d700
  $fEqCustom_$c/= :: Main.Custom -> Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x3 :: Main.Custom) (y :: Main.Custom) ->
                 case Main.$fEqCustom_$c== x3 y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fEqCustom_$c== :: Main.Custom -> Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.Custom) (ds1 :: Main.Custom) ->
                 case ds of wild {
                   Main.NotPureFunc a1
                   -> case a1 of wild1 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.False
                        Main.NotPureFunc b1
                        -> case b1 of wild3 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }
                   Main.MultiDefine a1
                   -> case a1 of wild1 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.False
                        Main.MultiDefine b1
                        -> case b1 of wild3 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }
                   Main.NotDefined a1
                   -> case a1 of wild1 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.False
                        Main.NotDefined b1
                        -> case b1 of wild3 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }
                   Main.NotLiteral a1
                   -> case a1 of wild1 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.False
                        Main.NotLiteral b1
                        -> case b1 of wild3 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                                case GHC.Prim.narrow32Int# ds3 of wild4 {
                                  DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }
                   Main.InvalidFormat a1
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.InvalidFormat b1 -> GHC.Base.eqString a1 b1 } }) -}
8212f2bcb50e27a64552e8b3559c70e8
  $fEqLambdaType :: GHC.Classes.Eq Main.LambdaType
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.LambdaType
                  Main.$fEqLambdaType_$c==
                  Main.$fEqLambdaType_$c/= -}
8212f2bcb50e27a64552e8b3559c70e8
  $fEqLambdaType_$c/= ::
    Main.LambdaType -> Main.LambdaType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x3 :: Main.LambdaType) (y :: Main.LambdaType) ->
                 case x3 of wild {
                   Main.Normal
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Normal -> GHC.Types.False }
                   Main.NoArgs
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.NoArgs -> GHC.Types.False }
                   Main.Expand
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Expand -> GHC.Types.False }
                   Main.Purely
                   -> case y of wild1 {
                        DEFAULT -> GHC.Types.True Main.Purely -> GHC.Types.False } }) -}
8212f2bcb50e27a64552e8b3559c70e8
  $fEqLambdaType_$c== ::
    Main.LambdaType -> Main.LambdaType -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.LambdaType) (ds1 :: Main.LambdaType) ->
                 case ds of wild {
                   Main.Normal
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Normal -> GHC.Types.True }
                   Main.NoArgs
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.NoArgs -> GHC.Types.True }
                   Main.Expand
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Expand -> GHC.Types.True }
                   Main.Purely
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False Main.Purely -> GHC.Types.True } }) -}
61d9aba738a7367b1479d90fc7413189
  $fEqVal :: GHC.Classes.Eq Main.Val
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:. @ Main.Val Main.$fEqVal_$c== Main.$fEqVal_$c/= -}
61d9aba738a7367b1479d90fc7413189
  $fEqVal_$c/= :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x3 :: Main.Val) (y :: Main.Val) ->
                 case Main.$fEqVal_$c== x3 y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
61d9aba738a7367b1479d90fc7413189
  $fEqVal_$c== :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.Val) (ds1 :: Main.Val) ->
                 case ds of wild {
                   DEFAULT -> case ds1 of ds2 { DEFAULT -> GHC.Types.False }
                   Main.Float dt61
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.Float dt62
                        -> GHC.Prim.tagToEnum# @ GHC.Types.Bool (GHC.Prim.==## dt61 dt62) }
                   Main.Str ds2 x3
                   -> case x3 of wild1 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                      case ds1 of wild2 {
                        DEFAULT -> GHC.Types.False
                        Main.Str ds3 y
                        -> case y of wild3 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> GHC.Types.False
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds4 ds5 ->
                                case GHC.Prim.narrow32Int# ds5 of wild4 {
                                  DEFAULT -> GHC.Types.False 0# -> GHC.Types.True } } } } } }
                   Main.Bool x3
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.Bool y
                        -> case x3 of wild2 {
                             GHC.Types.False
                             -> case y of wild3 {
                                  GHC.Types.False -> GHC.Types.True
                                  GHC.Types.True -> GHC.Types.False }
                             GHC.Types.True -> y } }
                   Main.FD dt61
                   -> case ds1 of wild1 {
                        DEFAULT -> GHC.Types.False
                        Main.FD dt62
                        -> GHC.Prim.tagToEnum#
                             @ GHC.Types.Bool
                             (GHC.Prim.eqWord# dt61 dt62) } }) -}
61d9aba738a7367b1479d90fc7413189
  $fFunctorEval :: GHC.Base.Functor Main.Eval
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eval
                  (Main.$fFunctorEval_$s$fFunctorExceptT_$cfmap
                     @ ([Main.Val], Main.ShError))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a -> b>_R
                   ->_R Sym (Main.N:Eval[0]) <a>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N)
                  Main.$fFunctorEval1
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R Sym (Main.N:Eval[0]) <b>_N
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    ([Main.Val], Main.ShError)
                                    a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <([Main.Val], Main.ShError)>_N
                                                      <GHC.Types.IO>_R
                                                      <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
61d9aba738a7367b1479d90fc7413189
  $fFunctorEval1 ::
    a
    -> Control.Monad.Trans.Except.ExceptT
         ([Main.Val], Main.ShError) GHC.Types.IO b
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,U><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   @ b
                   (x3 :: a)
                   (eta :: Control.Monad.Trans.Except.ExceptT
                             ([Main.Val], Main.ShError) GHC.Types.IO b)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <([Main.Val], Main.ShError)>_N
                           <GHC.Types.IO>_R
                           <b>_N ; GHC.Types.N:IO[0]
                                       <Data.Either.Either ([Main.Val], Main.ShError) b>_R)
                        eta1 of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    case ipv1 of wild {
                      Data.Either.Left x4
                      -> Data.Either.Left @ ([Main.Val], Main.ShError) @ a x4
                      Data.Either.Right y
                      -> Data.Either.Right @ ([Main.Val], Main.ShError) @ a x3 } #) }) -}
d362ee1cd591c92fe35e93513b9aa63a
  $fFunctorEval_$s$fFunctorExceptT_$cfmap ::
    (a -> b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <L,1*C1(U)><C(S(SL)),1*C1(U(U,1*U))><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e
                   @ a
                   @ b
                   (f4 :: a -> b)
                   (x3 :: GHC.Types.IO (Data.Either.Either e a))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x3 `cast` (GHC.Types.N:IO[0] <Data.Either.Either e a>_R)
                        s of ds { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.$fApplicativeEither_$cfmap @ e @ a @ b f4 ipv1 #) })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <a -> b>_R
                 ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                               <e>_N <GHC.Types.IO>_R <a>_N)
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
61d9aba738a7367b1479d90fc7413189
  $fMonadErrorEval ::
    Control.Monad.Error.Class.MonadError
      ([Main.Val], Main.ShError) Main.Eval
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ ([Main.Val], Main.ShError)
                  @ Main.Eval
                  Main.$fMonadEval
                  Main.$fMonadErrorEval1
                    `cast`
                  (forall (a :: <*>_N).
                   <([Main.Val], Main.ShError)>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    ([Main.Val], Main.ShError)
                                    a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <([Main.Val], Main.ShError)>_N
                                                      <GHC.Types.IO>_R
                                                      <a>_N) ; Sym (Main.N:Eval[0]) <a>_N))
                  (\ @ a ->
                   Main.$fMonadErrorEval_$scatchE
                     @ ([Main.Val], Main.ShError)
                     @ a
                     @ ([Main.Val], Main.ShError))
                    `cast`
                  (forall (a :: <*>_N).
                   Sym (Main.N:Eval[0]) <a>_N
                   ->_R (<([Main.Val], Main.ShError)>_R
                         ->_R Sym (Main.N:Eval[0]) <a>_N)
                   ->_R Sym (Main.N:Eval[0]) <a>_N) -}
61d9aba738a7367b1479d90fc7413189
  $fMonadErrorEval1 ::
    ([Main.Val], Main.ShError)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x3 :: ([Main.Val], Main.ShError))
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Data.Either.Left @ ([Main.Val], Main.ShError) @ a x3 #)) -}
7859de9ee07295520f03f10a68aae2c6
  $fMonadErrorEval_$scatchE ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
    -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ e'
                   (m7 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (h :: e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m7
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left l
                   -> (h l)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e'>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                               <Data.Either.Either e' a>_R)
                        ipv
                   Data.Either.Right r -> (# ipv, Data.Either.Right @ e' @ a r #) } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (e' :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <e -> Control.Monad.Trans.Except.ExceptT e' GHC.Types.IO a>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e' a>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <e'>_N <GHC.Types.IO>_R <a>_N)) -}
61d9aba738a7367b1479d90fc7413189
  $fMonadEval :: GHC.Base.Monad Main.Eval
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eval
                  Main.$fApplicativeEval
                  (Main.$fMonadEval_$s$fMonadExceptT_$c>>=
                     @ ([Main.Val], Main.ShError))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Main.N:Eval[0]) <a>_N
                   ->_R (<a>_R ->_R Sym (Main.N:Eval[0]) <b>_N)
                   ->_R Sym (Main.N:Eval[0]) <b>_N)
                  (Main.$fMonadEval_$s$fMonadExceptT_$c>>
                     @ ([Main.Val], Main.ShError))
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   Sym (Main.N:Eval[0]) <a>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N
                   ->_R Sym (Main.N:Eval[0]) <b>_N)
                  Main.$fMonadEval2
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    ([Main.Val], Main.ShError)
                                    a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <([Main.Val], Main.ShError)>_N
                                                      <GHC.Types.IO>_R
                                                      <a>_N) ; Sym (Main.N:Eval[0]) <a>_N))
                  Main.$fMonadEval1
                    `cast`
                  (forall (a :: <*>_N).
                   <[GHC.Types.Char]>_R
                   ->_R Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                 <([Main.Val], Main.ShError)>_N
                                 <GHC.Types.IO>_R
                                 <a>_N) ; Sym (Main.N:Eval[0]) <a>_N) -}
61d9aba738a7367b1479d90fc7413189
  $fMonadEval1 ::
    GHC.Base.String
    -> GHC.Types.IO (Data.Either.Either ([Main.Val], Main.ShError) a)
  {- Arity: 1, Strictness: <L,U>,
     Unfolding: InlineRule (1, True, False)
                (\ @ a (x3 :: GHC.Base.String) ->
                 GHC.Magic.noinline
                   @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a1 :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                   @ (Data.Either.Either ([Main.Val], Main.ShError) a)
                   x3) -}
61d9aba738a7367b1479d90fc7413189
  $fMonadEval2 ::
    a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (eta :: a) (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, Data.Either.Right @ ([Main.Val], Main.ShError) @ a eta #)) -}
98449f485236fe5592e514d5647363c8
  $fMonadEval_$s$fMonadExceptT_$c>> ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(U(U,U))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m7 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k6 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m7
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x3
                   -> k6
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
31ade0928f266481dac63f912bc05d1f
  $fMonadEval_$s$fMonadExceptT_$c>>= ::
    Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a
    -> (a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
    -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(S(SS)),1*C1(U(U,1*U))><L,1*C1(C1(U(U,U)))><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ a
                   @ b
                   (m7 :: Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a)
                   (k6 :: a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case m7
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <a>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> (# ipv, Data.Either.Left @ e @ b e1 #)
                   Data.Either.Right x3
                   -> (k6 x3)
                        `cast`
                      (Control.Monad.Trans.Except.N:ExceptT[0]
                           <e>_N <GHC.Types.IO>_R <b>_N ; GHC.Types.N:IO[0]
                                                              <Data.Either.Either e b>_R)
                        ipv } })
                  `cast`
                (forall (e :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.Except.ExceptT e GHC.Types.IO a>_R
                 ->_R <a -> Control.Monad.Trans.Except.ExceptT e GHC.Types.IO b>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  e b>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <e>_N <GHC.Types.IO>_R <b>_N)) -}
61d9aba738a7367b1479d90fc7413189
  $fMonadIOEval :: Control.Monad.IO.Class.MonadIO Main.Eval
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Eval
                  Main.$fMonadEval
                  Main.$fMonadIOEval1
                    `cast`
                  (forall (a :: <*>_N).
                   <GHC.Types.IO a>_R
                   ->_R Sym (GHC.Types.N:IO[0]
                                 <Data.Either.Either
                                    ([Main.Val], Main.ShError)
                                    a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                      <([Main.Val], Main.ShError)>_N
                                                      <GHC.Types.IO>_R
                                                      <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
61d9aba738a7367b1479d90fc7413189
  $fMonadIOEval1 ::
    GHC.Types.IO a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <C(S(SL)),1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (x3 :: GHC.Types.IO a)
                   (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case x3 `cast` (GHC.Types.N:IO[0] <a>_R)
                        s of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Right @ ([Main.Val], Main.ShError) @ a ipv1 #) }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom :: GHC.Classes.Ord Main.Custom
  DFunId
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Custom
                  Main.$fEqCustom
                  Main.$fOrdCustom_$ccompare
                  Main.$fOrdCustom_$c<
                  Main.$fOrdCustom_$c<=
                  Main.$fOrdCustom_$c>
                  Main.$fOrdCustom_$c>=
                  Main.$fOrdCustom_$cmax
                  Main.$fOrdCustom_$cmin -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom_$c< :: Main.Custom -> Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Custom) (y :: Main.Custom) ->
                 case Main.$fOrdCustom_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom_$c<= :: Main.Custom -> Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Custom) (y :: Main.Custom) ->
                 case Main.$fOrdCustom_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom_$c> :: Main.Custom -> Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Custom) (y :: Main.Custom) ->
                 case Main.$fOrdCustom_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom_$c>= :: Main.Custom -> Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Custom) (y :: Main.Custom) ->
                 case Main.$fOrdCustom_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom_$ccompare ::
    Main.Custom -> Main.Custom -> GHC.Types.Ordering
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (a :: Main.Custom) (b :: Main.Custom) ->
                 case a of wild {
                   Main.NotPureFunc a1
                   -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Main.NotPureFunc b1
                        -> case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } } }
                   Main.MultiDefine a1
                   -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case b of wild1 {
                        DEFAULT -> GHC.Types.LT
                        Main.NotPureFunc ds -> GHC.Types.GT
                        Main.MultiDefine b1
                        -> case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } } }
                   Main.NotDefined a1
                   -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Main.NotDefined ds
                        -> case ds of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 }
                        Main.NotLiteral ds -> GHC.Types.LT
                        Main.InvalidFormat ds -> GHC.Types.LT } }
                   Main.NotLiteral a1
                   -> case a1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Main.NotLiteral b1
                        -> case b1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 }
                        Main.InvalidFormat ds -> GHC.Types.LT } }
                   Main.InvalidFormat a1
                   -> case b of wild1 {
                        DEFAULT -> GHC.Types.GT
                        Main.InvalidFormat b1
                        -> GHC.Classes.$fOrd[]_$s$ccompare1 a1 b1 } }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom_$cmax :: Main.Custom -> Main.Custom -> Main.Custom
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Custom) (y :: Main.Custom) ->
                 case Main.$fOrdCustom_$ccompare x3 y of wild {
                   DEFAULT -> y GHC.Types.GT -> x3 }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fOrdCustom_$cmin :: Main.Custom -> Main.Custom -> Main.Custom
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Custom) (y :: Main.Custom) ->
                 case Main.$fOrdCustom_$ccompare x3 y of wild {
                   DEFAULT -> x3 GHC.Types.GT -> y }) -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal :: GHC.Classes.Ord Main.Val
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Val
                  Main.$fEqVal
                  Main.$fOrdVal_$ccompare
                  Main.$fOrdVal_$c<
                  Main.$fOrdVal_$c<=
                  Main.$fOrdVal_$c>
                  Main.$fOrdVal_$c>=
                  Main.$fOrdVal_$cmax
                  Main.$fOrdVal_$cmin -}
59124abd99c2ab144bf834f66df5b75c
  $fOrdVal1 :: GHC.Types.Ordering
  {- Strictness: x -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal_$c< :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Val) (y :: Main.Val) ->
                 case Main.$fOrdVal_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.LT -> GHC.Types.True }) -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal_$c<= :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Val) (y :: Main.Val) ->
                 case Main.$fOrdVal_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.GT -> GHC.Types.False }) -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal_$c> :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Val) (y :: Main.Val) ->
                 case Main.$fOrdVal_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.False GHC.Types.GT -> GHC.Types.True }) -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal_$c>= :: Main.Val -> Main.Val -> GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Val) (y :: Main.Val) ->
                 case Main.$fOrdVal_$ccompare x3 y of wild {
                   DEFAULT -> GHC.Types.True GHC.Types.LT -> GHC.Types.False }) -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal_$ccompare :: Main.Val -> Main.Val -> GHC.Types.Ordering
  {- Arity: 2, Strictness: <S,1*U><S,1*U>,
     Unfolding: (\ (ds :: Main.Val) (ds1 :: Main.Val) ->
                 case ds of wild {
                   DEFAULT -> Main.$fOrdVal1
                   Main.Float dt61
                   -> case ds1 of wild1 {
                        DEFAULT -> Main.$fOrdVal1
                        Main.Float dt62
                        -> case GHC.Prim.<## dt61 dt62 of lwild {
                             DEFAULT
                             -> case GHC.Prim.==## dt61 dt62 of lwild1 {
                                  DEFAULT -> GHC.Types.GT 1# -> GHC.Types.EQ }
                             1# -> GHC.Types.LT }
                        Main.Str ds2 y
                        -> case y of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           case GHC.Float.$w$sshowSignedFloat
                                  GHC.Float.$fShowDouble2
                                  GHC.Float.minExpt
                                  dt61
                                  (GHC.Types.[] @ GHC.Types.Char) of dt62 { DEFAULT ->
                           case GHC.Magic.runRW#
                                  @ ('GHC.Types.TupleRep
                                       '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                  @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Text.Internal.Text #)
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case GHC.Prim.newByteArray#
                                          @ GHC.Prim.RealWorld
                                          10#
                                          s1 of ds3 { (#,#) ipv ipv1 ->
                                   Main.$wouter1 ipv1 4# dt62 0# ipv }) of ds3 { (#,#) ipv ipv1 ->
                           case ipv1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                           Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } } } } }
                   Main.Str ds2 x3
                   -> case x3 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case ds1 of wild1 {
                        DEFAULT -> Main.$fOrdVal1
                        Main.Float dt61
                        -> case GHC.Float.$w$sshowSignedFloat
                                  GHC.Float.$fShowDouble2
                                  GHC.Float.minExpt
                                  dt61
                                  (GHC.Types.[] @ GHC.Types.Char) of dt62 { DEFAULT ->
                           case GHC.Magic.runRW#
                                  @ ('GHC.Types.TupleRep
                                       '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                  @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                       Data.Text.Internal.Text #)
                                  (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                   case GHC.Prim.newByteArray#
                                          @ GHC.Prim.RealWorld
                                          10#
                                          s1 of ds3 { (#,#) ipv ipv1 ->
                                   Main.$wouter ipv1 4# dt62 0# ipv }) of ds3 { (#,#) ipv ipv1 ->
                           case ipv1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } } }
                        Main.Str ds3 y
                        -> case y of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                           Data.Text.$w$ccompare ww1 ww2 ww3 ww5 ww6 ww7 } } } }) -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal_$cmax :: Main.Val -> Main.Val -> Main.Val
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Val) (y :: Main.Val) ->
                 case Main.$fOrdVal_$ccompare x3 y of wild {
                   DEFAULT -> y GHC.Types.GT -> x3 }) -}
61d9aba738a7367b1479d90fc7413189
  $fOrdVal_$cmin :: Main.Val -> Main.Val -> Main.Val
  {- Arity: 2, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Val) (y :: Main.Val) ->
                 case Main.$fOrdVal_$ccompare x3 y of wild {
                   DEFAULT -> x3 GHC.Types.GT -> y }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fShowCustom :: GHC.Show.Show Main.Custom
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Custom
                  Main.$fShowCustom_$cshowsPrec
                  Main.$fShowCustom_$cshow
                  Main.$fShowCustom_$cshowList -}
94db68e1495b515fa2f4d2f653a3d700
  $fShowCustom1 :: Main.Custom -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (w :: Main.Custom) (w1 :: GHC.Base.String) ->
                 Main.$w$cshowsPrec 0# w w1) -}
02ed5d9edf9975488e76d41a6b275e3d
  $fShowCustom2 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   GHC.Show.$fShow(,)3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
407f62738e257636bd129862e38c8164
  $fShowCustom3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("InvalidFormat "#) -}
b7a59990597893a15ac1a81605739bbb
  $fShowCustom4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NotLiteral "#) -}
e5fc3108cc7962cfd54bfc11183f9c16
  $fShowCustom5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NotDefined "#) -}
80babd017959dcd34a223cffa3a07a05
  $fShowCustom6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("MultiDefine "#) -}
72c38d6e08a1a989efce32e3907eec8f
  $fShowCustom7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NotPureFunc "#) -}
94db68e1495b515fa2f4d2f653a3d700
  $fShowCustom_$cshow :: Main.Custom -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x3 :: Main.Custom) ->
                 case x3 of wild {
                   Main.NotPureFunc b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowCustom7
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Main.MultiDefine b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowCustom6
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Main.NotDefined b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowCustom5
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Main.NotLiteral b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowCustom4
                        (case Data.Text.Show.$w$cshowsPrec
                                b1
                                (GHC.Types.[] @ GHC.Types.Char) of ww { (#,#) ww1 ww2 ->
                         GHC.Types.: @ GHC.Types.Char ww1 ww2 })
                   Main.InvalidFormat b1
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowCustom3
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString b1 Main.$fShowCustom2)) }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fShowCustom_$cshowList :: [Main.Custom] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Custom]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Custom Main.$fShowCustom1 ls s) -}
94db68e1495b515fa2f4d2f653a3d700
  $fShowCustom_$cshowsPrec ::
    GHC.Types.Int -> Main.Custom -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S,1*U><L,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Custom)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 Main.$w$cshowsPrec ww1 w1 w2 }) -}
94db68e1495b515fa2f4d2f653a3d700
  $fShowErrorComponentCustom ::
    Text.Megaparsec.Error.ShowErrorComponent Main.Custom
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Custom
                  Main.$fOrdCustom
                  Main.$fShowErrorComponentCustom_$cshowErrorComponent -}
94db68e1495b515fa2f4d2f653a3d700
  $fShowErrorComponentCustom_$cshowErrorComponent ::
    Main.Custom -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
6f7631d31603ae03d30f0b14d9f7c2d7
  $fShowFlags :: GHC.Show.Show Main.Flags
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Flags
                  Main.$fShowFlags_$cshowsPrec
                  Main.$fShowFlags_$cshow
                  Main.$fShowFlags_$cshowList -}
6f7631d31603ae03d30f0b14d9f7c2d7
  $fShowFlags1 :: Main.Flags -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S(SS),1*U(U,U)><L,U>,
     Unfolding: (\ (w :: Main.Flags) (w1 :: GHC.Base.String) ->
                 case w of ww { Main.Flags ww1 ww2 ->
                 Main.$w$cshowsPrec1 0# ww1 ww2 w1 }) -}
1956c3e477ac5fcd2c95e0f004669485
  $fShowFlags2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowFlags3) -}
88838af89a1346897dbe8b9afff09b04
  $fShowFlags3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("}"#) -}
740ac47eba8a00f0585057d84439db99
  $fShowFlags4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ignoreInterpreterError = "#) -}
6f7631d31603ae03d30f0b14d9f7c2d7
  $fShowFlags_$cshow :: Main.Flags -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SS),1*U(U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Flags) ->
                 case w of ww { Main.Flags ww1 ww2 ->
                 GHC.CString.unpackAppendCString#
                   "Flags {"#
                   (GHC.CString.unpackAppendCString#
                      "interactiveMode = "#
                      (case ww1 of wild {
                         GHC.Types.False
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              GHC.Show.$fShowBool4
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Main.$fShowFlags4
                                    (case ww2 of wild1 {
                                       GHC.Types.False
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowBool4
                                            Main.$fShowFlags2
                                       GHC.Types.True
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowBool2
                                            Main.$fShowFlags2 })))
                         GHC.Types.True
                         -> GHC.Base.++
                              @ GHC.Types.Char
                              GHC.Show.$fShowBool2
                              (GHC.Base.++
                                 @ GHC.Types.Char
                                 GHC.Show.showCommaSpace1
                                 (GHC.CString.unpackAppendCString#
                                    Main.$fShowFlags4
                                    (case ww2 of wild1 {
                                       GHC.Types.False
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowBool4
                                            Main.$fShowFlags2
                                       GHC.Types.True
                                       -> GHC.Base.++
                                            @ GHC.Types.Char
                                            GHC.Show.$fShowBool2
                                            Main.$fShowFlags2 }))) })) }) -}
6f7631d31603ae03d30f0b14d9f7c2d7
  $fShowFlags_$cshowList :: [Main.Flags] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Flags]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Flags Main.$fShowFlags1 ls s) -}
6f7631d31603ae03d30f0b14d9f7c2d7
  $fShowFlags_$cshowsPrec ::
    GHC.Types.Int -> Main.Flags -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <S(S),1*U(U)><S(SS),1*U(U,U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: GHC.Types.Int)
                   (w1 :: Main.Flags)
                   (w2 :: GHC.Base.String) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.Flags ww3 ww4 ->
                 Main.$w$cshowsPrec1 ww1 ww3 ww4 w2 } }) -}
078659143a16e18669f77fa566915579
  $fShowJobInfo :: GHC.Show.Show Main.JobInfo
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.JobInfo
                  Main.$fShowJobInfo_$cshowsPrec
                  Main.$fShowJobInfo_$cshow
                  Main.$fShowJobInfo_$cshowList -}
078659143a16e18669f77fa566915579
  $fShowJobInfo1 :: Main.JobInfo -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.JobInfo) (s :: GHC.Base.String) ->
                 case x3 of wild {
                   Main.Threaded dt61 dt62
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n13 :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n13 Main.$fShowJobInfo4)
                        s
                   Main.Forked dt61
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n13 :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n13 Main.$fShowJobInfo2)
                        s }) -}
cd679c82000ed685b159a6499445f204
  $fShowJobInfo2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowJobInfo3) -}
a19aa38a37b0ab4d58d11ea62dbbb0c1
  $fShowJobInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_PROCESS_"#) -}
0a4f9644d8e727f6ef9383d6b93c1461
  $fShowJobInfo4 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$fShowJobInfo5) -}
512d3de9745b351cb99ed3fbad079e89
  $fShowJobInfo5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("_THREAD_"#) -}
078659143a16e18669f77fa566915579
  $fShowJobInfo_$cshow :: Main.JobInfo -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.JobInfo) ->
                 case ds of wild {
                   Main.Threaded dt61 dt62 -> Main.$fShowJobInfo4
                   Main.Forked dt61 -> Main.$fShowJobInfo2 }) -}
078659143a16e18669f77fa566915579
  $fShowJobInfo_$cshowList :: [Main.JobInfo] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.JobInfo]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.JobInfo Main.$fShowJobInfo1 ls s) -}
078659143a16e18669f77fa566915579
  $fShowJobInfo_$cshowsPrec ::
    GHC.Types.Int -> Main.JobInfo -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x3 :: Main.JobInfo)
                   (s :: GHC.Base.String) ->
                 case x3 of wild {
                   Main.Threaded dt61 dt62
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n13 :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n13 Main.$fShowJobInfo4)
                        s
                   Main.Forked dt61
                   -> GHC.Base.augment
                        @ GHC.Types.Char
                        (\ @ b
                           (c :: GHC.Types.Char -> b -> b)[OneShot]
                           (n13 :: b)[OneShot] ->
                         GHC.Base.foldr @ GHC.Types.Char @ b c n13 Main.$fShowJobInfo2)
                        s }) -}
61d9aba738a7367b1479d90fc7413189
  $fShowParseEnv :: GHC.Show.Show Main.ParseEnv
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ParseEnv
                  Main.$fShowParseEnv_$cshowsPrec
                  Main.$fShowParseEnv_$cshow
                  Main.$fShowParseEnv_$cshowList -}
61d9aba738a7367b1479d90fc7413189
  $fShowParseEnv1 :: Main.ParseEnv -> GHC.Show.ShowS
  {- Arity: 1,
     Strictness: <S(SSSSSSSS(SS)),1*U(U,U,U,U,U,U,U,U(U,U))>,
     Unfolding: (\ (w :: Main.ParseEnv) ->
                 case w of ww { Main.ParseEnv ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ->
                 case ww8 of ww9 { Main.Flags ww10 ww11 ->
                 Main.$w$cshowsPrec2
                   0#
                   ww1
                   ww2
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww10
                   ww11 } }) -}
5fe377575871908b62633c75e20e3f96
  $fShowParseEnv2 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# 0#) -}
61d9aba738a7367b1479d90fc7413189
  $fShowParseEnv_$cshow :: Main.ParseEnv -> GHC.Base.String
  {- Arity: 1,
     Strictness: <S(SSSSSSSS(SS)),1*U(U,U,U,U,U,U,U,U(U,U))>,
     Unfolding: InlineRule (1, True, False)
                (\ (x3 :: Main.ParseEnv) ->
                 Main.$fShowParseEnv_$cshowsPrec
                   Main.$fShowParseEnv2
                   x3
                   (GHC.Types.[] @ GHC.Types.Char)) -}
61d9aba738a7367b1479d90fc7413189
  $fShowParseEnv_$cshowList :: [Main.ParseEnv] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ParseEnv]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.ParseEnv Main.$fShowParseEnv1 ls s) -}
61d9aba738a7367b1479d90fc7413189
  $fShowParseEnv_$cshowsPrec ::
    GHC.Types.Int -> Main.ParseEnv -> GHC.Show.ShowS
  {- Arity: 2,
     Strictness: <S(S),1*U(U)><S(SSSSSSSS(SS)),1*U(U,U,U,U,U,U,U,U(U,U))>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Int) (w1 :: Main.ParseEnv) ->
                 case w of ww { GHC.Types.I# ww1 ->
                 case w1 of ww2 { Main.ParseEnv ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ->
                 case ww10 of ww11 { Main.Flags ww12 ww13 ->
                 Main.$w$cshowsPrec2
                   ww1
                   ww3
                   ww4
                   ww5
                   ww6
                   ww7
                   ww8
                   ww9
                   ww12
                   ww13 } } }) -}
61d9aba738a7367b1479d90fc7413189
  $fShowShError :: GHC.Show.Show Main.ShError
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.ShError
                  Main.$fShowShError_$cshowsPrec
                  Main.$fShowShError_$cshow
                  Main.$fShowShError_$cshowList -}
61d9aba738a7367b1479d90fc7413189
  $fShowShError1 ::
    Main.ShError -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.ShError) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n13 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n13
                      (Main.$fShowShError_$cshow x3))
                   s) -}
1994281ed7e0f3adb09840395590fa33
  $fShowShError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Internal error: "#) -}
ed50e911349fa3995259bd4abc56e461
  $fShowShError3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Getting an unbound variable: "#) -}
52dbd4e809ef3171bdc66bb37fddba70
  $fShowShError4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (", found "#) -}
1131e215d169a1eb5bf95a11f47739da
  $fShowShError5 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Invalid type: expected "#) -}
44323f2780fca7895bcfd903ed34abf6
  $fShowShError6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" args, found values "#) -}
5e2d0e4c5d7e462ac3deaff3280b1ae5
  $fShowShError7 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Expected "#) -}
04ef04371cca8e3a78e06027ba558983
  $fShowShError8 :: GHC.Base.String
  {- Strictness: x -}
61d9aba738a7367b1479d90fc7413189
  $fShowShError_$cshow :: Main.ShError -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.ShError) ->
                 case ds of wild {
                   DEFAULT -> Main.$fShowShError8
                   Main.SomeError s -> s
                   Main.NumArgs s dt61
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowShError7
                        (GHC.Base.++
                           @ GHC.Types.Char
                           s
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowShError6
                              (case GHC.Show.$wshowSignedInt
                                      0#
                                      dt61
                                      (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                               GHC.Types.: @ GHC.Types.Char ww5 ww6 })))
                   Main.TypeMismatch s v
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowShError5
                        (GHC.Base.++
                           @ GHC.Types.Char
                           s
                           (GHC.CString.unpackAppendCString#
                              Main.$fShowShError4
                              (Main.$fShowShError_$cshow1 v)))
                   Main.UnboundVar t
                   -> GHC.CString.unpackAppendCString# Main.$fShowShError3 t
                   Main.Internal s
                   -> GHC.CString.unpackAppendCString# Main.$fShowShError2 s }) -}
61d9aba738a7367b1479d90fc7413189
  $fShowShError_$cshow1 :: Main.Val -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U> -}
61d9aba738a7367b1479d90fc7413189
  $fShowShError_$cshowList :: [Main.ShError] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.ShError]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.ShError Main.$fShowShError1 ls s) -}
61d9aba738a7367b1479d90fc7413189
  $fShowShError_$cshowsPrec ::
    GHC.Types.Int -> Main.ShError -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x3 :: Main.ShError)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n13 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n13
                      (Main.$fShowShError_$cshow x3))
                   s) -}
61d9aba738a7367b1479d90fc7413189
  $fShowVal :: GHC.Show.Show Main.Val
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.Val
                  Main.$fShowVal_$cshowsPrec
                  Main.$fShowShError_$cshow1
                  Main.$fShowVal_$cshowList -}
61d9aba738a7367b1479d90fc7413189
  $fShowVal1 :: Main.Val -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.Val) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n13 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n13
                      (Main.$fShowShError_$cshow1 x3))
                   s) -}
61d9aba738a7367b1479d90fc7413189
  $fShowVal_$cshowList :: [Main.Val] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.Val]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.Val Main.$fShowVal1 ls s) -}
61d9aba738a7367b1479d90fc7413189
  $fShowVal_$cshowsPrec ::
    GHC.Types.Int -> Main.Val -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int) (x3 :: Main.Val) (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n13 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n13
                      (Main.$fShowShError_$cshow1 x3))
                   s) -}
89a4ee7ab2c4883a89869b5c92e19b27
  $fShowVarT :: GHC.Show.Show Main.VarT
  DFunId
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ Main.VarT
                  Main.$fShowVarT_$cshowsPrec
                  Main.$fShowVarT_$cshow
                  Main.$fShowVarT_$cshowList -}
89a4ee7ab2c4883a89869b5c92e19b27
  $fShowVarT1 :: Main.VarT -> GHC.Base.String -> [GHC.Types.Char]
  {- Arity: 2, Strictness: <S,1*U><L,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Main.VarT) (s :: GHC.Base.String)[OneShot] ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n13 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n13
                      (Main.$fShowVarT_$cshow x3))
                   s) -}
f6e9ace3a4f60547c4e7b77ea1ed92e3
  $fShowVarT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("?"#) -}
89a4ee7ab2c4883a89869b5c92e19b27
  $fShowVarT_$cshow :: Main.VarT -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.VarT) ->
                 case ds of wild {
                   Main.VarN x3
                   -> case Data.Text.Show.$w$cshow x3 of ww { (#,#) ww1 ww2 ->
                      GHC.Types.: @ GHC.Types.Char ww1 ww2 }
                   Main.VarA dt61
                   -> case GHC.Show.$wshowSignedInt
                             0#
                             dt61
                             (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                      GHC.Types.: @ GHC.Types.Char ww5 ww6 }
                   Main.VarR dt61
                   -> GHC.CString.unpackAppendCString#
                        Main.$fShowVarT2
                        (case GHC.Show.$wshowSignedInt
                                0#
                                dt61
                                (GHC.Types.[] @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                         GHC.Types.: @ GHC.Types.Char ww5 ww6 }) }) -}
89a4ee7ab2c4883a89869b5c92e19b27
  $fShowVarT_$cshowList :: [Main.VarT] -> GHC.Show.ShowS
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ls :: [Main.VarT]) (s :: GHC.Base.String) ->
                 GHC.Show.showList__ @ Main.VarT Main.$fShowVarT1 ls s) -}
89a4ee7ab2c4883a89869b5c92e19b27
  $fShowVarT_$cshowsPrec ::
    GHC.Types.Int -> Main.VarT -> GHC.Show.ShowS
  {- Arity: 3, Strictness: <L,A><S,1*U><L,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ (ds :: GHC.Types.Int)
                   (x3 :: Main.VarT)
                   (s :: GHC.Base.String) ->
                 GHC.Base.augment
                   @ GHC.Types.Char
                   (\ @ b
                      (c :: GHC.Types.Char -> b -> b)[OneShot]
                      (n13 :: b)[OneShot] ->
                    GHC.Base.foldr
                      @ GHC.Types.Char
                      @ b
                      c
                      n13
                      (Main.$fShowVarT_$cshow x3))
                   s) -}
dfc85bf5e0a81e7c7a07f63150facc96
  $s$fAlternativeParsecT ::
    GHC.Base.Alternative
      (Text.Megaparsec.Internal.ParsecT
         Main.Custom Data.Text.Internal.Text m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ m :: * -> *.
                  @ (Text.Megaparsec.Internal.ParsecT
                       Main.Custom Data.Text.Internal.Text m)
                  (Main.$s$fAlternativeParsecT_$s$fApplicativeParsecT
                     @ Main.Custom
                     @ m)
                  (Text.Megaparsec.Internal.pZero
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m)
                  (Main.$s$fAlternativeParsecT_$spPlus @ m)
                  (Text.Megaparsec.Internal.$fAlternativeParsecT3
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m
                     Main.$fOrdCustom
                     Text.Megaparsec.Stream.$fStreamText0)
                    `cast`
                  (forall (a :: <*>_N).
                   <Text.Megaparsec.Internal.ParsecT
                      Main.Custom Data.Text.Internal.Text m a>_R
                   ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                 <Main.Custom>_N <Data.Text.Internal.Text>_N <m>_R <[a]>_R))
                  (Text.Megaparsec.Internal.$fAlternativeParsecT1
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m
                     Main.$fOrdCustom
                     Text.Megaparsec.Stream.$fStreamText0)
                    `cast`
                  (forall (a :: <*>_N).
                   <Text.Megaparsec.Internal.ParsecT
                      Main.Custom Data.Text.Internal.Text m a>_R
                   ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                 <Main.Custom>_N <Data.Text.Internal.Text>_N <m>_R <[a]>_R)) -}
4e42b6c9785713c07e024990c403ac30
  $s$fAlternativeParsecT1 ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom Data.Text.Internal.Text m a
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> ([a]
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> m b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
       -> ([a]
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> m b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
       -> m b
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),C(C1(C1(C1(C1(U)))))><L,U(U,U(U(U,U,U),U),U,U)><L,C(U)><L,U><L,C(U)><L,A>,
     Inline: [0],
     Unfolding: InlineRule (6, True, True)
                (\ @ m :: * -> *
                   @ a
                   (w2 :: Text.Megaparsec.Internal.ParsecT
                            Main.Custom Data.Text.Internal.Text m a)
                   @ b
                   (w3 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w4 :: [a]
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> m b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (w6 :: [a]
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> m b)
                   (w7 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 Text.Megaparsec.Internal.$w$cmany
                   @ Main.Custom
                   @ Data.Text.Internal.Text
                   @ m
                   Text.Megaparsec.Stream.$fStreamText0
                   @ a
                   w2
                   @ b
                   w3
                   w4
                   w5
                   w6) -}
f320b94cff27d8174720fe4a2e6fba9e
  $s$fAlternativeParsecT3 ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom Data.Text.Internal.Text m a
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> ([a]
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> m b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
       -> ([a]
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> m b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
       -> m b
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),C(C1(C1(C1(C1(U)))))><L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ @ m :: * -> *
                   @ a
                   (w2 :: Text.Megaparsec.Internal.ParsecT
                            Main.Custom Data.Text.Internal.Text m a)
                   @ b
                   (w3 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w4 :: [a]
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> m b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (w6 :: [a]
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> m b)
                   (w7 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 Text.Megaparsec.Internal.$w$csome
                   @ Main.Custom
                   @ Data.Text.Internal.Text
                   @ m
                   Text.Megaparsec.Stream.$fStreamText0
                   @ a
                   w2
                   @ b
                   w3
                   w4
                   w5
                   w6
                   w7) -}
26796524f9d1617d1c7bd46e36448a71
  $s$fAlternativeParsecT_$s$fApplicativeParsecT ::
    GHC.Base.Applicative
      (Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e @ m :: * -> *.
                  @ (Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m)
                  (Text.Megaparsec.Internal.$fFunctorParsecT
                     @ e
                     @ Data.Text.Internal.Text
                     @ m)
                  (\ @ a ->
                   Text.Megaparsec.Internal.pPure
                     @ a
                     @ e
                     @ Data.Text.Internal.Text
                     @ m)
                  (Main.$s$fAlternativeParsecT_$spAp @ e @ m)
                  (Text.Megaparsec.Internal.$fAlternativeParsecT2
                     @ Data.Text.Internal.Text
                     @ e
                     @ m
                     Text.Megaparsec.Stream.$fStreamText0)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Text.Megaparsec.Internal.ParsecT
                           e Data.Text.Internal.Text m a>_R
                   ->_R <Text.Megaparsec.Internal.ParsecT
                           e Data.Text.Internal.Text m b>_R
                   ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                 <e>_N <Data.Text.Internal.Text>_N <m>_R <c>_R))
                  (Text.Megaparsec.Internal.$fApplicativeParsecT2
                     @ Data.Text.Internal.Text
                     @ e
                     @ m
                     Text.Megaparsec.Stream.$fStreamText0)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a>_R
                   ->_R <Text.Megaparsec.Internal.ParsecT
                           e Data.Text.Internal.Text m b>_R
                   ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                 <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R))
                  (Text.Megaparsec.Internal.$fApplicativeParsecT1
                     @ Data.Text.Internal.Text
                     @ e
                     @ m
                     Text.Megaparsec.Stream.$fStreamText0)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a>_R
                   ->_R <Text.Megaparsec.Internal.ParsecT
                           e Data.Text.Internal.Text m b>_R
                   ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                 <e>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)) -}
54dcc5480b17099fc0c5e66538e8361c
  $s$fAlternativeParsecT_$sgo3 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
    -> [Data.Set.Internal.Set
          (Text.Megaparsec.Error.ErrorItem
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))]
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,1*U> -}
d4689d535232c88b1c3353115e6034cf
  $s$fAlternativeParsecT_$spAp ::
    Text.Megaparsec.Internal.ParsecT
      e Data.Text.Internal.Text m (a -> b)
    -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a
    -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m b
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(U)><L,U><L,C(U)><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   @ b
                   (m7 :: Text.Megaparsec.Internal.ParsecT
                            e Data.Text.Internal.Text m (a -> b))
                   (k6 :: Text.Megaparsec.Internal.ParsecT
                            e Data.Text.Internal.Text m a)
                   @ b1
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: b
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b1)
                   (eok :: b
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b1) ->
                 m7
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <e>_N <Data.Text.Internal.Text>_N <m>_R <a -> b>_R)
                   @ b1
                   s1
                   (\ (x3 :: a -> b)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    k6
                      `cast`
                    (Text.Megaparsec.Internal.N:ParsecT[0]
                         <e>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)
                      @ b1
                      s'
                      (GHC.Base..
                         @ b
                         @ (Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> m b1)
                         @ a
                         cok
                         x3)
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ a
                         @ Data.Text.Internal.Text
                         @ m
                         @ b1
                         hs5
                         (GHC.Base..
                            @ b
                            @ (Text.Megaparsec.State.State Data.Text.Internal.Text
                               -> Text.Megaparsec.Internal.Hints
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                               -> m b1)
                            @ a
                            cok
                            x3))
                      (Main.$s$fAlternativeParsecT_$swithHints @ e @ m @ b1 hs5 cerr))
                   cerr
                   (\ (x3 :: a -> b)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    k6
                      `cast`
                    (Text.Megaparsec.Internal.N:ParsecT[0]
                         <e>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)
                      @ b1
                      s'
                      (GHC.Base..
                         @ b
                         @ (Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> m b1)
                         @ a
                         cok
                         x3)
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ a
                         @ Data.Text.Internal.Text
                         @ m
                         @ b1
                         hs5
                         (GHC.Base..
                            @ b
                            @ (Text.Megaparsec.State.State Data.Text.Internal.Text
                               -> Text.Megaparsec.Internal.Hints
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                               -> m b1)
                            @ a
                            eok
                            x3))
                      (Main.$s$fAlternativeParsecT_$swithHints @ e @ m @ b1 hs5 eerr))
                   eerr)
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N) (b :: <*>_N).
                 <Text.Megaparsec.Internal.ParsecT
                    e Data.Text.Internal.Text m (a -> b)>_R
                 ->_R <Text.Megaparsec.Internal.ParsecT
                         e Data.Text.Internal.Text m a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R)) -}
5df5fcb2967bbcc53ae459900600ca5c
  $s$fAlternativeParsecT_$spPlus ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom Data.Text.Internal.Text m a
    -> Text.Megaparsec.Internal.ParsecT
         Main.Custom Data.Text.Internal.Text m a
    -> Text.Megaparsec.Internal.ParsecT
         Main.Custom Data.Text.Internal.Text m a
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,U><L,U><L,U><L,C(C1(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ m :: * -> *
                   @ a
                   (m7 :: Text.Megaparsec.Internal.ParsecT
                            Main.Custom Data.Text.Internal.Text m a)
                   (n13 :: Text.Megaparsec.Internal.ParsecT
                             Main.Custom Data.Text.Internal.Text m a)
                   @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: a
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (eok :: a
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 m7
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <Main.Custom>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)
                   @ b
                   s1
                   cok
                   cerr
                   eok
                   (\ (err1 :: Text.Megaparsec.Error.ParseError
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom)
                      (ms :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                    n13
                      `cast`
                    (Text.Megaparsec.Internal.N:ParsecT[0]
                         <Main.Custom>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)
                      @ b
                      s1
                      cok
                      (\ (err'1 :: Text.Megaparsec.Error.ParseError
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                     Main.Custom)
                         (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                       cerr
                         (let {
                            $j :: Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                    Main.Custom
                              <join 0>
                            = case err'1 of wild {
                                Text.Megaparsec.Error.TrivialError s2 u1 p6
                                -> case err1 of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds u2 p7
                                     -> Text.Megaparsec.Error.TrivialError
                                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                          @ Main.Custom
                                          s2
                                          (case u1 of wild2 {
                                             GHC.Base.Nothing -> u2
                                             GHC.Base.Just x3
                                             -> case u2 of wild3 {
                                                  GHC.Base.Nothing
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               Data.Text.Internal.Text))
                                                       x3
                                                  GHC.Base.Just y
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               Data.Text.Internal.Text))
                                                       (case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                                                               @ (Text.Megaparsec.Stream.Token
                                                                    Data.Text.Internal.Text)
                                                               GHC.Classes.$fOrdChar
                                                                 `cast`
                                                               (GHC.Classes.Ord
                                                                  (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                                                               y
                                                               x3 of wild4 {
                                                          GHC.Types.False -> y
                                                          GHC.Types.True -> x3 }) } })
                                          (Main.$s$fAlternativeParsecT_$sunion1 p6 p7)
                                     Text.Megaparsec.Error.FancyError ds ds1 -> wild1 }
                                Text.Megaparsec.Error.FancyError ds ds1
                                -> case err1 of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds2 ds3 ds4 -> wild
                                     Text.Megaparsec.Error.FancyError ds2 x3
                                     -> Text.Megaparsec.Error.FancyError
                                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                          @ Main.Custom
                                          ds
                                          (Main.$s$fAlternativeParsecT_$sunion ds1 x3) } }
                          } in
                          case err'1 of wild {
                            Text.Megaparsec.Error.TrivialError p6 ds ds1
                            -> case err1 of wild1 {
                                 Text.Megaparsec.Error.TrivialError p7 ds2 ds3
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p7 ds2
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } }
                            Text.Megaparsec.Error.FancyError p6 ds
                            -> case err1 of wild1 {
                                 Text.Megaparsec.Error.TrivialError p7 ds1 ds2
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p7 ds1
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } } })
                         (Text.Megaparsec.Internal.longestMatch
                            @ Data.Text.Internal.Text
                            ms
                            s'))
                      (\ (x3 :: a)
                         (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                         (hs5 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                       eok
                         x3
                         s'
                         (GHC.Base.augment
                            @ (Data.Set.Internal.Set
                                 (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                            (\ @ b1
                               (c :: Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                     -> b1 -> b1)[OneShot]
                               (n14 :: b1)[OneShot] ->
                             case err1 of wild {
                               Text.Megaparsec.Error.TrivialError errPos ds ps
                               -> case s' of wild1 { Text.Megaparsec.State.State ds1 ds2 dt61 ds3 ->
                                  case GHC.Base.$fEqNonEmpty_$c==
                                         @ Text.Megaparsec.Pos.SourcePos
                                         Text.Megaparsec.Pos.$fEqSourcePos
                                         ds2
                                         errPos of wild2 {
                                    GHC.Types.False -> n14
                                    GHC.Types.True
                                    -> case ps of wild3 {
                                         Data.Set.Internal.Bin dt62 ds4 ds5 ds6 -> c wild3 n14
                                         Data.Set.Internal.Tip -> n14 } } }
                               Text.Megaparsec.Error.FancyError ds ds1 -> n14 })
                            hs5
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                           `cast`
                         (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                      (\ (err'1 :: Text.Megaparsec.Error.ParseError
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                     Main.Custom)
                         (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                       eerr
                         (let {
                            $j :: Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                    Main.Custom
                              <join 0>
                            = case err'1 of wild {
                                Text.Megaparsec.Error.TrivialError s2 u1 p6
                                -> case err1 of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds u2 p7
                                     -> Text.Megaparsec.Error.TrivialError
                                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                          @ Main.Custom
                                          s2
                                          (case u1 of wild2 {
                                             GHC.Base.Nothing -> u2
                                             GHC.Base.Just x3
                                             -> case u2 of wild3 {
                                                  GHC.Base.Nothing
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               Data.Text.Internal.Text))
                                                       x3
                                                  GHC.Base.Just y
                                                  -> GHC.Base.Just
                                                       @ (Text.Megaparsec.Error.ErrorItem
                                                            (Text.Megaparsec.Stream.Token
                                                               Data.Text.Internal.Text))
                                                       (case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                                                               @ (Text.Megaparsec.Stream.Token
                                                                    Data.Text.Internal.Text)
                                                               GHC.Classes.$fOrdChar
                                                                 `cast`
                                                               (GHC.Classes.Ord
                                                                  (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                                                               y
                                                               x3 of wild4 {
                                                          GHC.Types.False -> y
                                                          GHC.Types.True -> x3 }) } })
                                          (Main.$s$fAlternativeParsecT_$sunion1 p6 p7)
                                     Text.Megaparsec.Error.FancyError ds ds1 -> wild1 }
                                Text.Megaparsec.Error.FancyError ds ds1
                                -> case err1 of wild1 {
                                     Text.Megaparsec.Error.TrivialError ds2 ds3 ds4 -> wild
                                     Text.Megaparsec.Error.FancyError ds2 x3
                                     -> Text.Megaparsec.Error.FancyError
                                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                          @ Main.Custom
                                          ds
                                          (Main.$s$fAlternativeParsecT_$sunion ds1 x3) } }
                          } in
                          case err'1 of wild {
                            Text.Megaparsec.Error.TrivialError p6 ds ds1
                            -> case err1 of wild1 {
                                 Text.Megaparsec.Error.TrivialError p7 ds2 ds3
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p7 ds2
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } }
                            Text.Megaparsec.Error.FancyError p6 ds
                            -> case err1 of wild1 {
                                 Text.Megaparsec.Error.TrivialError p7 ds1 ds2
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild }
                                 Text.Megaparsec.Error.FancyError p7 ds1
                                 -> case GHC.Base.$fOrdNonEmpty_$ccompare
                                           @ Text.Megaparsec.Pos.SourcePos
                                           Text.Megaparsec.Pos.$fOrdSourcePos
                                           p6
                                           p7 of wild2 {
                                      GHC.Types.LT -> wild1
                                      GHC.Types.EQ -> $j
                                      GHC.Types.GT -> wild } } })
                         (Text.Megaparsec.Internal.longestMatch
                            @ Data.Text.Internal.Text
                            ms
                            s'))))
                  `cast`
                (forall (m :: <* -> *>_N) (a :: <*>_N).
                 <Text.Megaparsec.Internal.ParsecT
                    Main.Custom Data.Text.Internal.Text m a>_R
                 ->_R <Text.Megaparsec.Internal.ParsecT
                         Main.Custom Data.Text.Internal.Text m a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)) -}
944dc9f00428c89415af5eb07cc5375f
  $s$fAlternativeParsecT_$sunion ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorFancy Main.Custom)
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Main.Custom)
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Main.Custom)
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
7d110b5965aa18a21225adfbd0c856d8
  $s$fAlternativeParsecT_$sunion1 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
  {- Arity: 2, Strictness: <S,1*U><S,1*U>, Inline: [~] -}
9bd7fded64fb2d42f4be7f34da204df9
  $s$fAlternativeParsecT_$swithHints ::
    Text.Megaparsec.Internal.Hints
      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
        -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
    -> Text.Megaparsec.Error.ParseError
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
    -> Text.Megaparsec.State.State Data.Text.Internal.Text
    -> m b
  {- Arity: 3, Strictness: <L,1*U><C(S),1*C1(U)><S,1*U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ b
                   (ds :: Text.Megaparsec.Internal.Hints
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                   (c :: Text.Megaparsec.Error.ParseError
                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                         -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (e1 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e) ->
                 case e1 of wild {
                   Text.Megaparsec.Error.TrivialError pos us ps
                   -> c (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           @ e
                           pos
                           us
                           (Main.$s$fAlternativeParsecT_$sgo3
                              ps
                              ds
                                `cast`
                              (Text.Megaparsec.Internal.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)
                              (Data.Set.Internal.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))))
                   Text.Megaparsec.Error.FancyError ipv ipv1 -> c wild }) -}
9abc630b95f5a631b8af2101c2206fc4
  $s$fApplicativeStateT ::
    GHC.Base.Applicative
      (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
                  (Main.$s$fApplicativeStateT_$s$fFunctorStateT @ s)
                  (Main.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure @ s)
                  (Main.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> @ s)
                  (Control.Monad.Trans.State.Lazy.$fAlternativeStateT2
                     @ GHC.Types.IO
                     @ s
                     GHC.Base.$fFunctorIO
                     GHC.Base.$fMonadIO)
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N) (c :: <*>_N).
                   <a -> b -> c>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                   ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <s>_N <GHC.Types.IO>_R <c>_N))
                  (Main.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*> @ s)
                  (\ @ a
                     @ b
                     (x3 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                     (eta :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                     (eta1 :: s)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (x3
                           `cast`
                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                              <s>_N <GHC.Types.IO>_R <a>_N)
                           eta1)
                          `cast`
                        (GHC.Types.N:IO[0] <(a, s)>_R)
                          s1 of ds { (#,#) ipv ipv1 ->
                   case (eta
                           `cast`
                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                              <s>_N <GHC.Types.IO>_R <b>_N)
                           (case ipv1 of wild { (,) a1 s' -> s' }))
                          `cast`
                        (GHC.Types.N:IO[0] <(b, s)>_R)
                          ipv of ds1 { (#,#) ipv2 ipv3 ->
                   (# ipv2,
                      (case ipv1 of wild { (,) a1 s' -> a1 },
                       case ipv3 of wild { (,) x4 s'' -> s'' }) #) } })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                   ->_R (<s>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <s>_N <GHC.Types.IO>_R <a>_N)) -}
c2f6e11fd73c288cc8359107a513d6a0
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c*> ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*U(A,1*U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m7 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (k6 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 (k6
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <s>_N <GHC.Types.IO>_R <b>_N)
                    (case ipv1 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, s)>_R)
                   ipv })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
6beebaeec1a83e932b2f31e7f9202c11
  $s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO (a -> b)
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U(1*C1(U),1*U))))><L,1*C1(C1(U(U,U(1*U,1*U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (ds :: Control.Monad.Trans.State.Lazy.StateT
                            s GHC.Types.IO (a -> b))
                   (ds1 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (ds
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a -> b>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a -> b, s)>_R)
                        s2 of ds2 { (#,#) ipv ipv1 ->
                 case (ds1
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         (case ipv1 of wild { (,) f4 s' -> s' }))
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        ipv of ds3 { (#,#) ipv2 ipv3 ->
                 (# ipv2,
                    (case ipv1 of wild { (,) f4 s' ->
                     f4 (case ipv3 of wild1 { (,) x3 s'' -> x3 }) },
                     case ipv3 of wild { (,) x3 s'' -> s'' }) #) } })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO (a -> b)>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
8dd135d0132a28126316b658dce11583
  $s$fApplicativeStateT_$s$fApplicativeStateT_$cpure ::
    a -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ a
                   (a1 :: a)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s2, (a1, s1) #))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <a>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(a, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <a>_N)) -}
d27a851c6cf3d36023ad8193dd2ada06
  $s$fApplicativeStateT_$s$fFunctorStateT ::
    GHC.Base.Functor
      (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
                  (Control.Monad.Trans.State.Lazy.$fFunctorStateT_$cfmap
                     @ GHC.Types.IO
                     @ s
                     GHC.Base.$fFunctorIO)
                  (\ @ a
                     @ b
                     (x3 :: a)
                     (eta :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                     (eta1 :: s)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   case (eta
                           `cast`
                         (Control.Monad.Trans.State.Lazy.N:StateT[0]
                              <s>_N <GHC.Types.IO>_R <b>_N)
                           eta1)
                          `cast`
                        (GHC.Types.N:IO[0] <(b, s)>_R)
                          s1 of ds { (#,#) ipv ipv1 ->
                   (# ipv, (x3, case ipv1 of wild { (,) a1 s' -> s' }) #) })
                    `cast`
                  (forall (a :: <*>_N) (b :: <*>_N).
                   <a>_R
                   ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                   ->_R (<s>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <s>_N <GHC.Types.IO>_R <a>_N)) -}
ac80c840aa0c85b493de14b03c455b52
  $s$fEqErrorFancy ::
    GHC.Classes.Eq (Text.Megaparsec.Error.ErrorFancy Main.Custom)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorFancy Main.Custom)
                  (Text.Megaparsec.Error.$fEqErrorFancy_$c==
                     @ Main.Custom
                     Main.$fEqCustom)
                  Main.$s$fEqErrorFancy_$s$fEqErrorFancy_$c/= -}
cf33ccf22d5b059d1b0ba48b1dea71a7
  $s$fEqErrorFancy_$s$fEqErrorFancy_$c/= ::
    Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x3 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                   (y :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                 case Text.Megaparsec.Error.$fEqErrorFancy_$c==
                        @ Main.Custom
                        Main.$fEqCustom
                        x3
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
dd7384abd40d55237b9602dc9049f145
  $s$fEqErrorItem ::
    GHC.Classes.Eq
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorItem
                       (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                  (Text.Megaparsec.Error.$fEqErrorItem_$c==
                     @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                     GHC.Classes.$fEqChar
                       `cast`
                     (GHC.Classes.Eq
                        (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R)
                  Main.$s$fEqErrorItem_$s$fEqErrorItem_$c/= -}
c7f1819187319c6ed5edd18bd7f448de
  $s$fEqErrorItem_$s$fEqErrorItem_$c/= ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
    -> Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
    -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ (x3 :: Text.Megaparsec.Error.ErrorItem
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                   (y :: Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                 case Text.Megaparsec.Error.$fEqErrorItem_$c==
                        @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                        GHC.Classes.$fEqChar
                          `cast`
                        (GHC.Classes.Eq (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                        x3
                        y of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
89a2f57b2355e3d36520caf000bfb592
  $s$fIsStringParsecT_$cfromString1 ::
    (Data.Text.Internal.Text :: *)
    GHC.Types.~~ (Data.Text.Internal.Text :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ Data.Text.Internal.Text
                   @ Data.Text.Internal.Text
                   @~ <Data.Text.Internal.Text>_N) -}
ffcf11e2b944a0aeb8a81e5c25a785db
  $s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT ::
    GHC.Base.Monad
      (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
                  (Main.$s$fApplicativeStateT @ s)
                  (Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$c>>= @ s)
                  (Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$c>> @ s)
                  (\ @ a
                     (eta :: a)
                     (eta1 :: s)
                     (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s1, (eta, eta1) #))
                    `cast`
                  (forall (a :: <*>_N).
                   <a>_R
                   ->_R (<s>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <(a,
                                         s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                            <s>_N <GHC.Types.IO>_R <a>_N))
                  (Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$cfail @ s) -}
4822895659fa0d92b7910e89da545f7f
  $s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$c>> ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,1*U(A,1*U))))><L,1*C1(C1(U(U,U)))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m7 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (k6 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 (k6
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <s>_N <GHC.Types.IO>_R <b>_N)
                    (case ipv1 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, s)>_R)
                   ipv })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
178e10a36a99c81e0fe2b30ef04a801a
  $s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$c>>= ::
    Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
    -> (a -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(SL))),1*C1(C1(U(U,U(1*U,1*U))))><L,1*C1(C1(C1(U(U,U))))><L,U><S,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ s
                   @ a
                   @ b
                   (m7 :: Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a)
                   (k6 :: a -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b)
                   (s1 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (m7
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <s>_N <GHC.Types.IO>_R <a>_N)
                         s1)
                        `cast`
                      (GHC.Types.N:IO[0] <(a, s)>_R)
                        s2 of ds1 { (#,#) ipv ipv1 ->
                 ((k6 (case ipv1 of wild { (,) a1 s' -> a1 }))
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <s>_N <GHC.Types.IO>_R <b>_N)
                    (case ipv1 of wild { (,) a1 s' -> s' }))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, s)>_R)
                   ipv })
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N) (b :: <*>_N).
                 <Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a>_R
                 ->_R <a
                       -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO b>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(b, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <b>_N)) -}
193987b5d46589a9ee9675e5756a3651
  $s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$cfail ::
    GHC.Base.String
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
  {- Arity: 1, Strictness: <L,U>, Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, True)
                (\ @ s @ a (str :: GHC.Base.String) (ds :: s) ->
                 GHC.Magic.noinline
                   @ (forall a1. [GHC.Types.Char] -> GHC.Types.IO a1)
                   GHC.IO.failIO1
                     `cast`
                   (forall (a1 :: <*>_N).
                    <GHC.Base.String>_R ->_R Sym (GHC.Types.N:IO[0] <a1>_R))
                   @ (a, s)
                   str)
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <GHC.Base.String>_R
                 ->_R Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                               <s>_N <GHC.Types.IO>_R <a>_N)) -}
a0ea2a502ed2edfcaccb67c79b252cd9
  $s$fMonadParsecT ::
    GHC.Base.Monad
      (Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ e @ m :: * -> *.
                  @ (Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m)
                  (Main.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ e @ m)
                  (Main.$s$fMonadParsecT_$spBind @ e @ m)
                  (Main.$s$fMonadParsecT_$s$fMonadParsecT_$c>> @ e @ m)
                  (\ @ a ->
                   Text.Megaparsec.Internal.pPure
                     @ a
                     @ e
                     @ Data.Text.Internal.Text
                     @ m)
                  (Text.Megaparsec.Internal.pFail
                     @ e
                     @ Data.Text.Internal.Text
                     @ m) -}
a025d480e0d36d4c6f881f88590900fb
  $s$fMonadParsecT_$s$fMonadParsecT_$c>> ::
    Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a
    -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m b
    -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m b
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   @ b
                   (m7 :: Text.Megaparsec.Internal.ParsecT
                            e Data.Text.Internal.Text m a)
                   (k6 :: Text.Megaparsec.Internal.ParsecT
                            e Data.Text.Internal.Text m b)
                   @ b1
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: b
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b1)
                   (eok :: b
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b1) ->
                 m7
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <e>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)
                   @ b1
                   s1
                   (\ (x3 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    k6
                      `cast`
                    (Text.Megaparsec.Internal.N:ParsecT[0]
                         <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ b
                         @ Data.Text.Internal.Text
                         @ m
                         @ b1
                         hs5
                         cok)
                      (Main.$s$fAlternativeParsecT_$swithHints @ e @ m @ b1 hs5 cerr))
                   cerr
                   (\ (x3 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    k6
                      `cast`
                    (Text.Megaparsec.Internal.N:ParsecT[0]
                         <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ b
                         @ Data.Text.Internal.Text
                         @ m
                         @ b1
                         hs5
                         eok)
                      (Main.$s$fAlternativeParsecT_$swithHints @ e @ m @ b1 hs5 eerr))
                   eerr)
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N) (b :: <*>_N).
                 <Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a>_R
                 ->_R <Text.Megaparsec.Internal.ParsecT
                         e Data.Text.Internal.Text m b>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R)) -}
013ee14ff064c731cfa5b1bb1ad29a38
  $s$fMonadParsecT_$spBind ::
    Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a
    -> (a
        -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m b)
    -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m b
  {- Arity: 7,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(C1(U))))))><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   @ b
                   (m7 :: Text.Megaparsec.Internal.ParsecT
                            e Data.Text.Internal.Text m a)
                   (k6 :: a
                          -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m b)
                   @ b1
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: b
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b1)
                   (eok :: b
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b1) ->
                 m7
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <e>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)
                   @ b1
                   s1
                   (\ (x3 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    (k6 x3)
                      `cast`
                    (Text.Megaparsec.Internal.N:ParsecT[0]
                         <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ b
                         @ Data.Text.Internal.Text
                         @ m
                         @ b1
                         hs5
                         cok)
                      (Main.$s$fAlternativeParsecT_$swithHints @ e @ m @ b1 hs5 cerr))
                   cerr
                   (\ (x3 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    (k6 x3)
                      `cast`
                    (Text.Megaparsec.Internal.N:ParsecT[0]
                         <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R)
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ b
                         @ Data.Text.Internal.Text
                         @ m
                         @ b1
                         hs5
                         eok)
                      (Main.$s$fAlternativeParsecT_$swithHints @ e @ m @ b1 hs5 eerr))
                   eerr)
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N) (b :: <*>_N).
                 <Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a>_R
                 ->_R <a
                       -> Text.Megaparsec.Internal.ParsecT
                            e Data.Text.Internal.Text m b>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N <Data.Text.Internal.Text>_N <m>_R <b>_R)) -}
c5e66aaf83515251b5e498aad86410b6
  $s$fMonadParsecesParsecT ::
    Text.Megaparsec.Class.MonadParsec
      Main.Custom
      Data.Text.Internal.Text
      (Text.Megaparsec.Internal.ParsecT
         Main.Custom Data.Text.Internal.Text m)
  {- Inline: CONLIKE,
     Unfolding: DFun: @ m :: * -> *.
                  @ Main.Custom
                  @ Data.Text.Internal.Text
                  @ (Text.Megaparsec.Internal.ParsecT
                       Main.Custom Data.Text.Internal.Text m)
                  Text.Megaparsec.Stream.$fStreamText0
                  (Main.$s$fAlternativeParsecT @ m)
                  (Main.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m)
                  (Text.Megaparsec.Internal.pFailure
                     @ Data.Text.Internal.Text
                     @ Main.Custom
                     @ m)
                  (Text.Megaparsec.Internal.pFancyFailure
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m)
                  (Text.Megaparsec.Internal.pLabel
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m)
                  (\ @ a ->
                   Text.Megaparsec.Internal.pLabel
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m
                     @ a
                     (GHC.Types.[] @ GHC.Types.Char))
                  (Text.Megaparsec.Internal.pTry
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m)
                  (Text.Megaparsec.Internal.pLookAhead
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m)
                  (Main.$s$fMonadParsecesParsecT_$spNotFollowedBy @ Main.Custom @ m)
                  (Text.Megaparsec.Internal.pWithRecovery
                     @ Data.Text.Internal.Text
                     @ Main.Custom
                     @ m)
                  (Text.Megaparsec.Internal.pObserving
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m)
                  (\ @ b
                     (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                     (ds :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> m b)
                     (ds1 :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                     (eok :: ()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> m b)
                     (eerr :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                              -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                   case s1 of wild { Text.Megaparsec.State.State input ds2 dt61 w ->
                   case ds2 of wild1 { GHC.Base.:| pos z ->
                   case (Data.Text.uncons input)
                          `cast`
                        (GHC.Base.Maybe
                           ((,)
                              (Sub (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))
                              <Data.Text.Internal.Text>_R)_R)_R of wild2 {
                     GHC.Base.Nothing
                     -> eok
                          GHC.Tuple.()
                          wild
                          (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                     GHC.Base.Just ds3
                     -> case ds3 of wild3 { (,) x3 ds4 ->
                        case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                        eerr
                          (Text.Megaparsec.Error.TrivialError
                             @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             @ Main.Custom
                             (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                             (GHC.Base.Just
                                @ (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                (Text.Megaparsec.Error.Tokens
                                   @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                   (Text.Megaparsec.Internal.nes
                                      @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                      x3)))
                             (Data.Set.Internal.$WBin
                                @ (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                (GHC.Types.I# 1#)
                                (Text.Megaparsec.Error.EndOfInput
                                   @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                (Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                                (Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))))
                          (Text.Megaparsec.State.$WState
                             @ Data.Text.Internal.Text
                             input
                             (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                             (GHC.Types.I# dt61)
                             w) } } } } })
                    `cast`
                  (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                            <Main.Custom>_N <Data.Text.Internal.Text>_N <m>_R <()>_R))
                  (Main.$s$fMonadParsecesParsecT_$spToken @ Main.Custom @ m)
                  (Main.$s$fMonadParsecesParsecT_$spTokens @ Main.Custom @ m)
                  (Main.$s$fMonadParsecesParsecT_$spTakeWhileP @ Main.Custom @ m)
                  (Main.$s$fMonadParsecesParsecT_$spTakeWhile1P @ Main.Custom @ m)
                  (Main.$s$fMonadParsecesParsecT_$spTakeP @ Main.Custom @ m)
                  (\ @ b
                     (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                     (ds :: Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> m b)
                     (ds1 :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                     (eok :: Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> m b)
                     (ds2 :: Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                   eok
                     s1
                     s1
                     (GHC.Types.[]
                        @ (Data.Set.Internal.Set
                             (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                       `cast`
                     (Sym (Text.Megaparsec.Internal.N:Hints[0]
                               <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                    `cast`
                  (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                            <Main.Custom>_N
                            <Data.Text.Internal.Text>_N
                            <m>_R
                            <Text.Megaparsec.State.State Data.Text.Internal.Text>_R))
                  (Text.Megaparsec.Internal.pUpdateParserState
                     @ Data.Text.Internal.Text
                     @ Main.Custom
                     @ m) -}
52d49bd80e9cc54b9bf7e492feb8a6d9
  $s$fMonadParsecesParsecT_$s$fMonadPlusParsecT ::
    GHC.Base.MonadPlus
      (Text.Megaparsec.Internal.ParsecT
         Main.Custom Data.Text.Internal.Text m)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ m :: * -> *.
                  @ (Text.Megaparsec.Internal.ParsecT
                       Main.Custom Data.Text.Internal.Text m)
                  (Main.$s$fAlternativeParsecT @ m)
                  (Main.$s$fMonadParsecT @ Main.Custom @ m)
                  (Text.Megaparsec.Internal.pZero
                     @ Main.Custom
                     @ Data.Text.Internal.Text
                     @ m)
                  (Main.$s$fAlternativeParsecT_$spPlus @ m) -}
4cf8848e900426ad4899986062c72848
  $s$fMonadParsecesParsecT_$spNotFollowedBy ::
    Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a
    -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m ()
  {- Arity: 6, HasNoCafRefs,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><S(LLSL),1*U(U(U,U,U),U,U,U)><L,A><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   (p6 :: Text.Megaparsec.Internal.ParsecT
                            e Data.Text.Internal.Text m a)
                   @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (ds :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> m b)
                   (ds1 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (eok :: ()
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 case s1 of wild { Text.Megaparsec.State.State input pos dt61 ds2 ->
                 let {
                   what :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                   = case (Data.Text.uncons input)
                            `cast`
                          (GHC.Base.Maybe
                             ((,)
                                (Sub (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))
                                <Data.Text.Internal.Text>_R)_R)_R of wild1 {
                       GHC.Base.Nothing
                       -> Text.Megaparsec.Error.EndOfInput
                            @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                       GHC.Base.Just x3
                       -> Text.Megaparsec.Error.Tokens
                            @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            (GHC.Base.:|
                               @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                               (Data.Tuple.fst
                                  @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                  @ Data.Text.Internal.Text
                                  x3)
                               (GHC.Types.[]
                                  @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))) }
                 } in
                 p6
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <e>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)
                   @ b
                   wild
                   (\ (ds3 :: a)
                      (ds4 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (ds5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    eerr
                      (Text.Megaparsec.Error.TrivialError
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ e
                         pos
                         (GHC.Base.Just
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                            what)
                         (Data.Set.Internal.Tip
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                      wild)
                   (\ (ds3 :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e)
                      (ds4 :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                    eok
                      GHC.Tuple.()
                      wild
                      (GHC.Types.[]
                         @ (Data.Set.Internal.Set
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                        `cast`
                      (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                   (\ (ds3 :: a)
                      (ds4 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (ds5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    eerr
                      (Text.Megaparsec.Error.TrivialError
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ e
                         pos
                         (GHC.Base.Just
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                            what)
                         (Data.Set.Internal.Tip
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                      wild)
                   (\ (ds3 :: Text.Megaparsec.Error.ParseError
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e)
                      (ds4 :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                    eok
                      GHC.Tuple.()
                      wild
                      (GHC.Types.[]
                         @ (Data.Set.Internal.Set
                              (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                        `cast`
                      (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))) })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N).
                 <Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N <Data.Text.Internal.Text>_N <m>_R <()>_R)) -}
5ab7f523a8d654ddeadacfb31bbdfcc1
  $s$fMonadParsecesParsecT_$spTakeP ::
    GHC.Base.Maybe GHC.Base.String
    -> GHC.Types.Int
    -> Text.Megaparsec.Internal.ParsecT
         e
         Data.Text.Internal.Text
         m
         (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
  {- Arity: 7,
     Strictness: <L,1*U><S(S),1*U(U)><S(LSSL),1*U(U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,A><L,C(C1(U))>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (ml :: GHC.Base.Maybe GHC.Base.String)
                   (n13 :: GHC.Types.Int)
                   @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (ds1 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 case s1 of wild { Text.Megaparsec.State.State input ds2 dt61 w ->
                 case ds2 of wild1 { GHC.Base.:| pos z ->
                 let {
                   ps :: Data.Set.Internal.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                   = case ml of wild2 {
                       GHC.Base.Nothing
                       -> Data.Set.Internal.Tip
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                       GHC.Base.Just x3
                       -> case x3 of wild3 {
                            []
                            -> Data.Set.Internal.Tip
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                            : a1 as5
                            -> Data.Set.Internal.$WBin
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                 (GHC.Types.I# 1#)
                                 (Text.Megaparsec.Error.Label
                                    @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                    (GHC.Base.:| @ GHC.Types.Char a1 as5))
                                 (Data.Set.Internal.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                                 (Data.Set.Internal.Tip
                                    @ (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token
                                            Data.Text.Internal.Text))) } }
                 } in
                 case Text.Megaparsec.Stream.$fStreamText0_$ctakeN_
                        n13
                        input of wild2 {
                   GHC.Base.Nothing
                   -> eerr
                        (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           @ e
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                           (GHC.Base.Just
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                              (Text.Megaparsec.Error.EndOfInput
                                 @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                           ps)
                        wild
                   GHC.Base.Just ds3
                   -> case ds3 of wild3 { (,) ts input' ->
                      case Text.Megaparsec.Stream.$fStreamText0_$cadvanceN
                             (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                             w
                             pos
                             ts of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                      case pos of apos { Text.Megaparsec.Pos.SourcePos ipv3 ipv4 ipv5 ->
                      let {
                        len41 :: GHC.Types.Int
                        = Data.Text.length
                            ts `cast` (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0]))
                      } in
                      case GHC.Classes.neInt len41 n13 of wild4 {
                        GHC.Types.False
                        -> cok
                             ts
                             (case len41 of wild5 { GHC.Types.I# y ->
                              Text.Megaparsec.State.$WState
                                @ Data.Text.Internal.Text
                                input'
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                (GHC.Types.I# (GHC.Prim.+# dt61 y))
                                w })
                             (GHC.Types.[]
                                @ (Data.Set.Internal.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                               `cast`
                             (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                       <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                        GHC.Types.True
                        -> eerr
                             (Text.Megaparsec.Error.TrivialError
                                @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                @ e
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                (GHC.Base.Just
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                   (Text.Megaparsec.Error.EndOfInput
                                      @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                                ps)
                             (Text.Megaparsec.State.$WState
                                @ Data.Text.Internal.Text
                                input
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (GHC.Types.I# dt61)
                                w) } } } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N
                               <Data.Text.Internal.Text>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R)) -}
1a69ce467d43cd360ceeca63cca6b2c7
  $s$fMonadParsecesParsecT_$spTakeWhile1P ::
    GHC.Base.Maybe GHC.Base.String
    -> (Text.Megaparsec.Stream.Token Data.Text.Internal.Text
        -> GHC.Types.Bool)
    -> Text.Megaparsec.Internal.ParsecT
         e
         Data.Text.Internal.Text
         m
         (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
  {- Arity: 2, Strictness: <L,1*U><L,C(U)>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (ml :: GHC.Base.Maybe GHC.Base.String)
                   (f4 :: Text.Megaparsec.Stream.Token Data.Text.Internal.Text
                          -> GHC.Types.Bool)
                   @ b
                   (ds :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (ds1 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (ds2 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 case ds of wild { Text.Megaparsec.State.State input ds3 dt61 w ->
                 case ds3 of wild1 { GHC.Base.:| pos z ->
                 let {
                   el :: GHC.Base.Maybe
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                   = case ml of wild2 {
                       GHC.Base.Nothing
                       -> GHC.Base.Nothing
                            @ (Text.Megaparsec.Error.ErrorItem
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                       GHC.Base.Just x3
                       -> case x3 of wild3 {
                            []
                            -> GHC.Base.Nothing
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                            : a1 as5
                            -> GHC.Base.Just
                                 @ (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                 (Text.Megaparsec.Error.Label
                                    @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                    (GHC.Base.:| @ GHC.Types.Char a1 as5)) } }
                 } in
                 let {
                   ds4 :: (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text,
                           Data.Text.Internal.Text)
                   = case input of wild2 { Data.Text.Internal.Text dt62 dt63 dt64 ->
                     let {
                       arr :: Data.Text.Array.Array = Data.Text.Array.Array dt62
                     } in
                     let {
                       len41 :: GHC.Types.Int = GHC.Types.I# dt64
                     } in
                     letrec {
                       loop1 :: GHC.Types.Int -> GHC.Types.Int {- Arity: 1 -}
                       = \ (i :: GHC.Types.Int) ->
                         case i of i1 { GHC.Types.I# ipv ->
                         let {
                           ds7 :: Data.Text.Unsafe.Iter
                           = let {
                               j :: GHC.Prim.Int# = GHC.Prim.+# dt63 ipv
                             } in
                             let {
                               m7 :: GHC.Word.Word16
                               = case GHC.Prim.indexWord16Array# dt62 j of r# { DEFAULT ->
                                 GHC.Word.W16# r# }
                             } in
                             case GHC.Word.ltWord16 m7 (GHC.Word.W16# 55296##) of wild3 {
                               GHC.Types.False
                               -> case GHC.Word.gtWord16 m7 (GHC.Word.W16# 56319##) of wild4 {
                                    GHC.Types.False
                                    -> case m7 of wild5 { GHC.Word.W16# a# ->
                                       case GHC.Prim.indexWord16Array#
                                              dt62
                                              (GHC.Prim.+# j 1#) of r# { DEFAULT ->
                                       Data.Text.Unsafe.$WIter
                                         (GHC.Types.C#
                                            (GHC.Prim.chr#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftL#
                                                        (GHC.Prim.-# (GHC.Prim.word2Int# a#) 55296#)
                                                        10#)
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 56320#))
                                                  65536#)))
                                         (GHC.Types.I# 2#) } }
                                    GHC.Types.True
                                    -> case m7 of wild5 { GHC.Word.W16# w# ->
                                       Data.Text.Unsafe.$WIter
                                         (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# w#)))
                                         (GHC.Types.I# 1#) } }
                               GHC.Types.True
                               -> case m7 of wild4 { GHC.Word.W16# w# ->
                                  Data.Text.Unsafe.$WIter
                                    (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# w#)))
                                    (GHC.Types.I# 1#) } }
                         } in
                         case GHC.Classes.ltInt i1 len41 of wild3 {
                           GHC.Types.False -> i1
                           GHC.Types.True
                           -> case f4
                                     (case ds7 of wild4 { Data.Text.Unsafe.Iter dt65 dt66 ->
                                      (GHC.Types.C# dt65)
                                        `cast`
                                      (Sub (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0]))) }) of wild4 {
                                GHC.Types.False -> i1
                                GHC.Types.True
                                -> loop1
                                     (case ds7 of wild5 { Data.Text.Unsafe.Iter dt65 dt66 ->
                                      GHC.Types.I# (GHC.Prim.+# ipv dt66) }) } } }
                     } in
                     case loop1 (GHC.Types.I# 0#) of k6 { GHC.Types.I# ipv ->
                     (case GHC.Classes.eqInt k6 (GHC.Types.I# 0#) of wild3 {
                        GHC.Types.False
                        -> Data.Text.Internal.$WText arr (GHC.Types.I# dt63) k6
                        GHC.Types.True -> Data.Text.Internal.empty },
                      let {
                        len42 :: GHC.Prim.Int# = GHC.Prim.-# dt64 ipv
                      } in
                      let {
                        len43 :: GHC.Types.Int = GHC.Types.I# len42
                      } in
                      case GHC.Classes.eqInt len43 (GHC.Types.I# 0#) of wild3 {
                        GHC.Types.False
                        -> Data.Text.Internal.$WText
                             arr
                             (GHC.Types.I# (GHC.Prim.+# dt63 ipv))
                             len43
                        GHC.Types.True -> Data.Text.Internal.empty })
                       `cast`
                     ((,)
                        (Sub (Sym (Text.Megaparsec.Stream.D:R:TokensText0[0])))
                        <Data.Text.Internal.Text>_R)_R } }
                 } in
                 let {
                   ts :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                   = case ds4 of wild2 { (,) ts1 input' -> ts1 }
                 } in
                 case Data.Text.Internal.Fusion.Common.null
                        (Data.Text.Internal.Fusion.stream
                           ts
                             `cast`
                           (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0]))) of wild2 {
                   GHC.Types.False
                   -> case Text.Megaparsec.Stream.$fStreamText0_$cadvanceN
                             (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                             w
                             pos
                             ts of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                      cok
                        ts
                        (case Data.Text.length
                                ts
                                  `cast`
                                (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0])) of wild3 { GHC.Types.I# y ->
                         Text.Megaparsec.State.$WState
                           @ Data.Text.Internal.Text
                           (case ds4 of wild4 { (,) ts1 input' -> input' })
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                           (GHC.Types.I# (GHC.Prim.+# dt61 y))
                           w })
                        (case el of wild3 {
                           GHC.Base.Nothing
                           -> (GHC.Types.[]
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                `cast`
                              (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                           GHC.Base.Just l
                           -> (GHC.Base.build
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                                 (\ @ a1
                                    (c :: Data.Set.Internal.Set
                                            (Text.Megaparsec.Error.ErrorItem
                                               (Text.Megaparsec.Stream.Token
                                                  Data.Text.Internal.Text))
                                          -> a1 -> a1)[OneShot]
                                    (n13 :: a1)[OneShot] ->
                                  c (Data.Set.Internal.singleton
                                       @ (Text.Megaparsec.Error.ErrorItem
                                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                       l)
                                    n13))
                                `cast`
                              (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token
                                           Data.Text.Internal.Text>_N)) }) }
                   GHC.Types.True
                   -> case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                      eerr
                        (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           @ e
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                           (GHC.Base.Just
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                              (case (Data.Text.uncons input)
                                      `cast`
                                    (GHC.Base.Maybe
                                       ((,)
                                          (Sub (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))
                                          <Data.Text.Internal.Text>_R)_R)_R of wild3 {
                                 GHC.Base.Nothing
                                 -> Text.Megaparsec.Error.EndOfInput
                                      @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                 GHC.Base.Just ds5
                                 -> case ds5 of wild4 { (,) t ds6 ->
                                    Text.Megaparsec.Error.Tokens
                                      @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                      (Text.Megaparsec.Internal.nes
                                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                         t) } }))
                           (case el of wild3 {
                              GHC.Base.Nothing
                              -> Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                              GHC.Base.Just x3
                              -> Data.Set.Internal.singleton
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                   x3 }))
                        (Text.Megaparsec.State.$WState
                           @ Data.Text.Internal.Text
                           input
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                           (GHC.Types.I# dt61)
                           w) } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <Text.Megaparsec.Stream.Token Data.Text.Internal.Text
                       -> GHC.Types.Bool>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N
                               <Data.Text.Internal.Text>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R)) -}
77095dac27558ded049a69743512b138
  $s$fMonadParsecesParsecT_$spTakeWhileP ::
    GHC.Base.Maybe GHC.Base.String
    -> (Text.Megaparsec.Stream.Token Data.Text.Internal.Text
        -> GHC.Types.Bool)
    -> Text.Megaparsec.Internal.ParsecT
         e
         Data.Text.Internal.Text
         m
         (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
  {- Arity: 7,
     Strictness: <L,U><L,C(U)><S(S(LLS)S(S(LSS)L)LL),1*U(1*U(U,U,U),1*U(1*U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,C(C1(C1(U)))><L,A>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (ml :: GHC.Base.Maybe GHC.Base.String)
                   (f4 :: Text.Megaparsec.Stream.Token Data.Text.Internal.Text
                          -> GHC.Types.Bool)
                   @ b
                   (ds :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (ds1 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (eok :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (ds2 :: Text.Megaparsec.Error.ParseError
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 case ds of wild { Text.Megaparsec.State.State input ds3 dt61 w ->
                 case ds3 of wild1 { GHC.Base.:| pos z ->
                 let {
                   hs5 :: Text.Megaparsec.Internal.Hints
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                   = case ml of wild2 {
                       GHC.Base.Nothing
                       -> (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                       GHC.Base.Just x3
                       -> case x3 of wild3 {
                            []
                            -> (GHC.Types.[]
                                  @ (Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                 `cast`
                               (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                         <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                            : a1 as5
                            -> (GHC.Base.build
                                  @ (Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                                  (\ @ a2
                                     (c :: Data.Set.Internal.Set
                                             (Text.Megaparsec.Error.ErrorItem
                                                (Text.Megaparsec.Stream.Token
                                                   Data.Text.Internal.Text))
                                           -> a2 -> a2)[OneShot]
                                     (n13 :: a2)[OneShot] ->
                                   c (Data.Set.Internal.$WBin
                                        @ (Text.Megaparsec.Error.ErrorItem
                                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                        (GHC.Types.I# 1#)
                                        (Text.Megaparsec.Error.Label
                                           @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                           (GHC.Base.:| @ GHC.Types.Char a1 as5))
                                        (Data.Set.Internal.Tip
                                           @ (Text.Megaparsec.Error.ErrorItem
                                                (Text.Megaparsec.Stream.Token
                                                   Data.Text.Internal.Text)))
                                        (Data.Set.Internal.Tip
                                           @ (Text.Megaparsec.Error.ErrorItem
                                                (Text.Megaparsec.Stream.Token
                                                   Data.Text.Internal.Text))))
                                     n13))
                                 `cast`
                               (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                         <Text.Megaparsec.Stream.Token
                                            Data.Text.Internal.Text>_N)) } }
                 } in
                 let {
                   ds4 :: (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text,
                           Data.Text.Internal.Text)
                   = case input of wild2 { Data.Text.Internal.Text dt62 dt63 dt64 ->
                     let {
                       arr :: Data.Text.Array.Array = Data.Text.Array.Array dt62
                     } in
                     let {
                       len41 :: GHC.Types.Int = GHC.Types.I# dt64
                     } in
                     letrec {
                       loop1 :: GHC.Types.Int -> GHC.Types.Int {- Arity: 1 -}
                       = \ (i :: GHC.Types.Int) ->
                         case i of i1 { GHC.Types.I# ipv ->
                         let {
                           ds7 :: Data.Text.Unsafe.Iter
                           = let {
                               j :: GHC.Prim.Int# = GHC.Prim.+# dt63 ipv
                             } in
                             let {
                               m7 :: GHC.Word.Word16
                               = case GHC.Prim.indexWord16Array# dt62 j of r# { DEFAULT ->
                                 GHC.Word.W16# r# }
                             } in
                             case GHC.Word.ltWord16 m7 (GHC.Word.W16# 55296##) of wild3 {
                               GHC.Types.False
                               -> case GHC.Word.gtWord16 m7 (GHC.Word.W16# 56319##) of wild4 {
                                    GHC.Types.False
                                    -> case m7 of wild5 { GHC.Word.W16# a# ->
                                       case GHC.Prim.indexWord16Array#
                                              dt62
                                              (GHC.Prim.+# j 1#) of r# { DEFAULT ->
                                       Data.Text.Unsafe.$WIter
                                         (GHC.Types.C#
                                            (GHC.Prim.chr#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.+#
                                                     (GHC.Prim.uncheckedIShiftL#
                                                        (GHC.Prim.-# (GHC.Prim.word2Int# a#) 55296#)
                                                        10#)
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 56320#))
                                                  65536#)))
                                         (GHC.Types.I# 2#) } }
                                    GHC.Types.True
                                    -> case m7 of wild5 { GHC.Word.W16# w# ->
                                       Data.Text.Unsafe.$WIter
                                         (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# w#)))
                                         (GHC.Types.I# 1#) } }
                               GHC.Types.True
                               -> case m7 of wild4 { GHC.Word.W16# w# ->
                                  Data.Text.Unsafe.$WIter
                                    (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# w#)))
                                    (GHC.Types.I# 1#) } }
                         } in
                         case GHC.Classes.ltInt i1 len41 of wild3 {
                           GHC.Types.False -> i1
                           GHC.Types.True
                           -> case f4
                                     (case ds7 of wild4 { Data.Text.Unsafe.Iter dt65 dt66 ->
                                      (GHC.Types.C# dt65)
                                        `cast`
                                      (Sub (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0]))) }) of wild4 {
                                GHC.Types.False -> i1
                                GHC.Types.True
                                -> loop1
                                     (case ds7 of wild5 { Data.Text.Unsafe.Iter dt65 dt66 ->
                                      GHC.Types.I# (GHC.Prim.+# ipv dt66) }) } } }
                     } in
                     case loop1 (GHC.Types.I# 0#) of k6 { GHC.Types.I# ipv ->
                     (case GHC.Classes.eqInt k6 (GHC.Types.I# 0#) of wild3 {
                        GHC.Types.False
                        -> Data.Text.Internal.$WText arr (GHC.Types.I# dt63) k6
                        GHC.Types.True -> Data.Text.Internal.empty },
                      let {
                        len42 :: GHC.Prim.Int# = GHC.Prim.-# dt64 ipv
                      } in
                      let {
                        len43 :: GHC.Types.Int = GHC.Types.I# len42
                      } in
                      case GHC.Classes.eqInt len43 (GHC.Types.I# 0#) of wild3 {
                        GHC.Types.False
                        -> Data.Text.Internal.$WText
                             arr
                             (GHC.Types.I# (GHC.Prim.+# dt63 ipv))
                             len43
                        GHC.Types.True -> Data.Text.Internal.empty })
                       `cast`
                     ((,)
                        (Sub (Sym (Text.Megaparsec.Stream.D:R:TokensText0[0])))
                        <Data.Text.Internal.Text>_R)_R } }
                 } in
                 let {
                   ts :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                   = case ds4 of wild2 { (,) ts1 input' -> ts1 }
                 } in
                 case Text.Megaparsec.Stream.$fStreamText0_$cadvanceN
                        (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                        w
                        pos
                        ts of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                 case Data.Text.Internal.Fusion.Common.null
                        (Data.Text.Internal.Fusion.stream
                           ts
                             `cast`
                           (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0]))) of wild2 {
                   GHC.Types.False
                   -> cok
                        ts
                        (case Data.Text.length
                                ts
                                  `cast`
                                (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0])) of wild3 { GHC.Types.I# y ->
                         Text.Megaparsec.State.$WState
                           @ Data.Text.Internal.Text
                           (case ds4 of wild4 { (,) ts1 input' -> input' })
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                           (GHC.Types.I# (GHC.Prim.+# dt61 y))
                           w })
                        hs5
                   GHC.Types.True
                   -> eok
                        ts
                        (case Data.Text.length
                                ts
                                  `cast`
                                (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0])) of wild3 { GHC.Types.I# y ->
                         Text.Megaparsec.State.$WState
                           @ Data.Text.Internal.Text
                           (case ds4 of wild4 { (,) ts1 input' -> input' })
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                           (GHC.Types.I# (GHC.Prim.+# dt61 y))
                           w })
                        hs5 } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <Text.Megaparsec.Stream.Token Data.Text.Internal.Text
                       -> GHC.Types.Bool>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N
                               <Data.Text.Internal.Text>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R)) -}
b73dcb4002bfa24629e0cc2a57f934ab
  $s$fMonadParsecesParsecT_$spToken ::
    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text
     -> Data.Either.Either
          (GHC.Base.Maybe
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)),
           Data.Set.Internal.Set
             (Text.Megaparsec.Error.ErrorItem
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
          a)
    -> GHC.Base.Maybe
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
    -> Text.Megaparsec.Internal.ParsecT e Data.Text.Internal.Text m a
  {- Arity: 2, Strictness: <L,C(U)><L,1*U>, Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   @ a
                   (test :: Text.Megaparsec.Stream.Token Data.Text.Internal.Text
                            -> Data.Either.Either
                                 (GHC.Base.Maybe
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)),
                                  Data.Set.Internal.Set
                                    (Text.Megaparsec.Error.ErrorItem
                                       (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                                 a)
                   (mtoken :: GHC.Base.Maybe
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                   @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: a
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (ds1 :: a
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 case s1 of wild { Text.Megaparsec.State.State input ds2 dt61 w ->
                 case ds2 of wild1 { GHC.Base.:| pos z ->
                 case (Data.Text.uncons input)
                        `cast`
                      (GHC.Base.Maybe
                         ((,)
                            (Sub (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))
                            <Data.Text.Internal.Text>_R)_R)_R of wild2 {
                   GHC.Base.Nothing
                   -> eerr
                        (Text.Megaparsec.Error.TrivialError
                           @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           @ e
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                           (GHC.Base.Just
                              @ (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                              (Text.Megaparsec.Error.EndOfInput
                                 @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                           (case mtoken of wild3 {
                              GHC.Base.Nothing
                              -> Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                              GHC.Base.Just x3
                              -> Data.Set.Internal.$WBin
                                   @ (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                                   (GHC.Types.I# 1#)
                                   (Text.Megaparsec.Error.Tokens
                                      @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                      (Text.Megaparsec.Internal.nes
                                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                         x3))
                                   (Data.Set.Internal.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem
                                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                                   (Data.Set.Internal.Tip
                                      @ (Text.Megaparsec.Error.ErrorItem
                                           (Text.Megaparsec.Stream.Token
                                              Data.Text.Internal.Text))) }))
                        wild
                   GHC.Base.Just ds3
                   -> case ds3 of wild3 { (,) c cs10 ->
                      case test c of wild4 {
                        Data.Either.Left ds4
                        -> case ds4 of wild5 { (,) us ps ->
                           case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           eerr
                             (Text.Megaparsec.Error.TrivialError
                                @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                @ e
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                us
                                ps)
                             (Text.Megaparsec.State.$WState
                                @ Data.Text.Internal.Text
                                input
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (GHC.Types.I# dt61)
                                w) } }
                        Data.Either.Right x3
                        -> case Text.Megaparsec.Stream.$fStreamText0_$cadvance1
                                  (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                                  w
                                  pos
                                  c of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           cok
                             x3
                             (Text.Megaparsec.State.$WState
                                @ Data.Text.Internal.Text
                                cs10
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                (GHC.Types.I# (GHC.Prim.+# dt61 1#))
                                w)
                             (GHC.Types.[]
                                @ (Data.Set.Internal.Set
                                     (Text.Megaparsec.Error.ErrorItem
                                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                               `cast`
                             (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                       <Text.Megaparsec.Stream.Token
                                          Data.Text.Internal.Text>_N)) } } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N) (a :: <*>_N).
                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text
                  -> Data.Either.Either
                       (GHC.Base.Maybe
                          (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)),
                        Data.Set.Internal.Set
                          (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                       a>_R
                 ->_R <GHC.Base.Maybe
                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N <Data.Text.Internal.Text>_N <m>_R <a>_R)) -}
47b8f9d869b9a1d1713b66b4caca6df5
  $s$fMonadParsecesParsecT_$spTokens ::
    (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
     -> Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
     -> GHC.Types.Bool)
    -> Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
    -> Text.Megaparsec.Internal.ParsecT
         e
         Data.Text.Internal.Text
         m
         (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
  {- Arity: 2, Strictness: <L,C(C1(U))><L,U(U,U,U)>,
     Inline: (sat-args=2),
     Unfolding: InlineRule (2, False, False)
                (\ @ e
                   @ m :: * -> *
                   (f4 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> GHC.Types.Bool)
                   (tts32 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
                   @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b)
                   (eok :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> m b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text -> m b) ->
                 case s1 of wild { Text.Megaparsec.State.State input ds1 dt61 w ->
                 case ds1 of wild1 { GHC.Base.:| pos z ->
                 let {
                   unexpect :: GHC.Base.NonEmpty Text.Megaparsec.Pos.SourcePos
                               -> Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                               -> Text.Megaparsec.Error.ParseError
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) e
                     {- Arity: 2 -}
                   = \ (pos' :: GHC.Base.NonEmpty Text.Megaparsec.Pos.SourcePos)
                       (u :: Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                     Text.Megaparsec.Error.TrivialError
                       @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                       @ e
                       pos'
                       (GHC.Base.Just
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                          u)
                       (Data.Set.Internal.$WBin
                          @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                          (GHC.Types.I# 1#)
                          (Text.Megaparsec.Error.Tokens
                             @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             (case Text.Megaparsec.Stream.$fStreamText0_$cchunkToTokens
                                     (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                                     tts32 of wild2 {
                                []
                                -> Data.List.NonEmpty.cycle1
                                     @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                : a1 as5
                                -> GHC.Base.:|
                                     @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                     a1
                                     as5 }))
                          (Data.Set.Internal.Tip
                             @ (Text.Megaparsec.Error.ErrorItem
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                          (Data.Set.Internal.Tip
                             @ (Text.Megaparsec.Error.ErrorItem
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                 } in
                 let {
                   len41 :: GHC.Types.Int
                   = Data.Text.length
                       tts32 `cast` (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0]))
                 } in
                 case Text.Megaparsec.Stream.$fStreamText0_$ctakeN_
                        len41
                        input of wild2 {
                   GHC.Base.Nothing
                   -> eerr
                        (unexpect
                           (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos pos z)
                           (Text.Megaparsec.Error.EndOfInput
                              @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                        wild
                   GHC.Base.Just ds2
                   -> case ds2 of wild3 { (,) tts' input' ->
                      case f4 tts32 tts' of wild4 {
                        GHC.Types.False
                        -> case pos of apos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           eerr
                             (unexpect
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (Text.Megaparsec.Error.Tokens
                                   @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                   (case Text.Megaparsec.Stream.$fStreamText0_$cchunkToTokens
                                           (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                                           tts' of wild5 {
                                      []
                                      -> Data.List.NonEmpty.cycle1
                                           @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                      : a1 as5
                                      -> GHC.Base.:|
                                           @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                           a1
                                           as5 })))
                             (Text.Megaparsec.State.$WState
                                @ Data.Text.Internal.Text
                                input
                                (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos apos z)
                                (GHC.Types.I# dt61)
                                w) }
                        GHC.Types.True
                        -> case Text.Megaparsec.Stream.$fStreamText0_$cadvanceN
                                  (Data.Proxy.Proxy @ * @ Data.Text.Internal.Text)
                                  w
                                  pos
                                  tts' of npos { Text.Megaparsec.Pos.SourcePos ipv ipv1 ipv2 ->
                           let {
                             st :: Text.Megaparsec.State.State Data.Text.Internal.Text
                             = case len41 of wild5 { GHC.Types.I# y ->
                               Text.Megaparsec.State.$WState
                                 @ Data.Text.Internal.Text
                                 input'
                                 (GHC.Base.:| @ Text.Megaparsec.Pos.SourcePos npos z)
                                 (GHC.Types.I# (GHC.Prim.+# dt61 y))
                                 w }
                           } in
                           case Data.Text.Internal.Fusion.Common.null
                                  (Data.Text.Internal.Fusion.stream
                                     tts32
                                       `cast`
                                     (Sub (Text.Megaparsec.Stream.D:R:TokensText0[0]))) of wild5 {
                             GHC.Types.False
                             -> cok
                                  tts'
                                  st
                                  (GHC.Types.[]
                                     @ (Data.Set.Internal.Set
                                          (Text.Megaparsec.Error.ErrorItem
                                             (Text.Megaparsec.Stream.Token
                                                Data.Text.Internal.Text))))
                                    `cast`
                                  (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                            <Text.Megaparsec.Stream.Token
                                               Data.Text.Internal.Text>_N))
                             GHC.Types.True
                             -> eok
                                  tts'
                                  st
                                  (GHC.Types.[]
                                     @ (Data.Set.Internal.Set
                                          (Text.Megaparsec.Error.ErrorItem
                                             (Text.Megaparsec.Stream.Token
                                                Data.Text.Internal.Text))))
                                    `cast`
                                  (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                            <Text.Megaparsec.Stream.Token
                                               Data.Text.Internal.Text>_N)) } } } } } } })
                  `cast`
                (forall (e :: <*>_N) (m :: <* -> *>_N).
                 <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                  -> Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                  -> GHC.Types.Bool>_R
                 ->_R <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <e>_N
                               <Data.Text.Internal.Text>_N
                               <m>_R
                               <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R)) -}
b8edc60dbaaa854e2f21b644c97d52ef
  $s$fMonadStatesStateT0 ::
    Control.Monad.State.Class.MonadState
      s (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
  {- Strictness: m, Inline: CONLIKE,
     Unfolding: DFun: @ s.
                  @ s
                  @ (Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO)
                  (Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT @ s)
                  (\ (x3 :: s) (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                   (# s1, (x3, x3) #))
                    `cast`
                  ((<s>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <(s, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                          <s>_N <GHC.Types.IO>_R <s>_N))
                  (Main.$s$fMonadStatesStateT0_$sput @ s)
                  (Main.$s$fMonadStatesStateT0_$sstate @ s) -}
c4221c54b023caeb297726a442c24fae
  $s$fMonadStatesStateT0_$sput ::
    s -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO ()
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><L,A><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   (s1 :: s)
                   (x3 :: s)
                   (s2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s2, (GHC.Tuple.(), s1) #))
                  `cast`
                (forall (s :: <*>_N).
                 <s>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <((), s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                              <s>_N <GHC.Types.IO>_R <()>_N)) -}
a6b0ff8e16ba76e00bb5385b202de1b8
  $s$fMonadStatesStateT0_$sstate ::
    (s -> (a, s))
    -> Control.Monad.Trans.State.Lazy.StateT s GHC.Types.IO a
  {- Arity: 3, HasNoCafRefs, Strictness: <L,1*C1(U)><L,U><S,U>,
     Inline: (sat-args=1),
     Unfolding: InlineRule (1, False, False)
                (\ @ s
                   @ a
                   (f4 :: s -> (a, s))
                   (x3 :: s)
                   (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s1, f4 x3 #))
                  `cast`
                (forall (s :: <*>_N) (a :: <*>_N).
                 <s -> (a, s)>_R
                 ->_R (<s>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <(a, s)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                             <s>_N <GHC.Types.IO>_R <a>_N)) -}
a3090971639eed0b33c67288a19e240f
  $s$fOrdErrorFancy ::
    GHC.Classes.Ord (Text.Megaparsec.Error.ErrorFancy Main.Custom)
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorFancy Main.Custom)
                  Main.$s$fEqErrorFancy
                  (Text.Megaparsec.Error.$fOrdErrorFancy_$ccompare
                     @ Main.Custom
                     Main.$fOrdCustom)
                  (Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                     @ Main.Custom
                     Main.$fOrdCustom)
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                     (b :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Main.Custom
                          Main.$fOrdCustom
                          b
                          a of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                     (b :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                   Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                     @ Main.Custom
                     Main.$fOrdCustom
                     b
                     a)
                  (\ (a :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                     (b :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Main.Custom
                          Main.$fOrdCustom
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x3 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                     (y :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Main.Custom
                          Main.$fOrdCustom
                          y
                          x3 of wild {
                     GHC.Types.False -> y GHC.Types.True -> x3 })
                  (\ (x3 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                     (y :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                   case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                          @ Main.Custom
                          Main.$fOrdCustom
                          y
                          x3 of wild {
                     GHC.Types.False -> x3 GHC.Types.True -> y }) -}
0437d5d2ba4f4550306e7d8a56c6a8ae
  $s$fOrdErrorFancy_$c<= ::
    Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                   (b :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Main.Custom
                        Main.$fOrdCustom
                        b
                        a of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
ef49deec695eaae6c79b350ef62ba684
  $s$fOrdErrorFancy_$c>= ::
    Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ (a :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                   (b :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Main.Custom
                        Main.$fOrdCustom
                        a
                        b of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False }) -}
1f7cbb1858055748858f52bfe1781318
  $s$fOrdErrorFancy_$cmax ::
    Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                   (y :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Main.Custom
                        Main.$fOrdCustom
                        y
                        x3 of wild {
                   GHC.Types.False -> y GHC.Types.True -> x3 }) -}
b3ffa202107c9721c4c022d9bdfcd944
  $s$fOrdErrorFancy_$cmin ::
    Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (x3 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                   (y :: Text.Megaparsec.Error.ErrorFancy Main.Custom) ->
                 case Text.Megaparsec.Error.$fOrdErrorFancy_$c<
                        @ Main.Custom
                        Main.$fOrdCustom
                        y
                        x3 of wild {
                   GHC.Types.False -> x3 GHC.Types.True -> y }) -}
d339a3589d2e4b08787ed7792f407461
  $s$fOrdErrorItem ::
    GHC.Classes.Ord
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
  {- HasNoCafRefs, Strictness: m, Inline: CONLIKE,
     Unfolding: DFun:.
                  @ (Text.Megaparsec.Error.ErrorItem
                       (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                  Main.$s$fEqErrorItem
                  (Text.Megaparsec.Error.$fOrdErrorItem_$ccompare
                     @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord
                        (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R)
                  (Text.Megaparsec.Error.$fOrdErrorItem_$c<
                     @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord
                        (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R)
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord
                             (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                          b
                          a of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                   Text.Megaparsec.Error.$fOrdErrorItem_$c<
                     @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                     GHC.Classes.$fOrdChar
                       `cast`
                     (GHC.Classes.Ord
                        (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                     b
                     a)
                  (\ (a :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                     (b :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord
                             (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                          a
                          b of wild {
                     GHC.Types.False -> GHC.Types.True
                     GHC.Types.True -> GHC.Types.False })
                  (\ (x3 :: Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                     (y :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord
                             (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                          y
                          x3 of wild {
                     GHC.Types.False -> y GHC.Types.True -> x3 })
                  (\ (x3 :: Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                     (y :: Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                   case Text.Megaparsec.Error.$fOrdErrorItem_$c<
                          @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          GHC.Classes.$fOrdChar
                            `cast`
                          (GHC.Classes.Ord
                             (Sym (Text.Megaparsec.Stream.D:R:TokenText0[0])))_R
                          y
                          x3 of wild {
                     GHC.Types.False -> x3 GHC.Types.True -> y }) -}
6d9c804af5d164bcbe1f26e93cff7ce2
  $s$wupdateOrConcatWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 3, Strictness: <L,C(C1(C1(U)))><L,U><S,U>, Inline: [0],
     Unfolding: (\ @ v
                   (w1 :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                   (ww1 :: Data.HashMap.Array.Array#
                             (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.HashMap.Array.Array
                               (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                        (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case GHC.Magic.runRW#
                                @ ('GHC.Types.TupleRep
                                     '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.HashMap.Array.Array (GHC.Base.Maybe GHC.Types.Int) #)
                                (\ (s2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                 let {
                                   ipv :: GHC.Prim.Int#
                                   = GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                       ww1
                                 } in
                                 case GHC.Prim.newSmallArray#
                                        @ (GHC.Base.Maybe GHC.Types.Int)
                                        @ GHC.Prim.RealWorld
                                        ipv
                                        (Data.HashMap.Array.undefinedElem
                                           @ (GHC.Base.Maybe GHC.Types.Int))
                                        s2 of ds1 { (#,#) ipv1 ipv2 ->
                                 letrec {
                                   $s$wgo1 :: GHC.Prim.State# GHC.Prim.RealWorld
                                              -> GHC.Prim.Int#
                                              -> GHC.Prim.Int#
                                              -> GHC.Prim.SmallMutableArray#
                                                   GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int)
                                              -> GHC.Prim.SmallArray#
                                                   (Data.HashMap.Base.Leaf
                                                      Data.Text.Internal.Text v)
                                              -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.HashMap.Array.MArray
                                                      GHC.Prim.RealWorld
                                                      (GHC.Base.Maybe GHC.Types.Int) #)
                                     {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><L,U> -}
                                   = \ (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                                       (sc1 :: GHC.Prim.Int#)
                                       (sc2 :: GHC.Prim.Int#)
                                       (sc3 :: GHC.Prim.SmallMutableArray#
                                                 GHC.Prim.RealWorld (GHC.Base.Maybe GHC.Types.Int))
                                       (sc4 :: GHC.Prim.SmallArray#
                                                 (Data.HashMap.Base.Leaf
                                                    Data.Text.Internal.Text v)) ->
                                     case GHC.Prim.>=# sc2 sc1 of lwild {
                                       DEFAULT
                                       -> case GHC.Prim.writeSmallArray#
                                                 @ GHC.Prim.RealWorld
                                                 @ (GHC.Base.Maybe GHC.Types.Int)
                                                 sc3
                                                 sc2
                                                 (case GHC.Prim.indexSmallArray#
                                                         @ (Data.HashMap.Base.Leaf
                                                              Data.Text.Internal.Text v)
                                                         sc4
                                                         sc2 of ds2 { Unit# ipv4 ->
                                                  case ipv4 of wild4 { Data.HashMap.Base.L k6 ds4 ->
                                                  case k6 of ww2 { Data.Text.Internal.Text ww3 ww4 ww5 ->
                                                  Main.$wpoly_go1
                                                    @ v
                                                    ww3
                                                    ww4
                                                    ww5
                                                    ww
                                                    0#
                                                    (GHC.Prim.sizeofSmallArray#
                                                       @ (Data.HashMap.Base.Leaf
                                                            Data.Text.Internal.Text v)
                                                       ww) } } })
                                                 sc of s' { DEFAULT ->
                                          $s$wgo1 s' sc1 (GHC.Prim.+# sc2 1#) sc3 sc4 }
                                       1#
                                       -> (# sc,
                                             Data.HashMap.Array.MArray
                                               @ GHC.Prim.RealWorld
                                               @ (GHC.Base.Maybe GHC.Types.Int)
                                               sc3 #) }
                                 } in
                                 case $s$wgo1 ipv1 ipv 0# ipv2 ww1 of ds2 { (#,#) ipv3 ipv4 ->
                                 case ipv4 of wild1 { Data.HashMap.Array.MArray ds3 ->
                                 case GHC.Prim.unsafeFreezeSmallArray#
                                        @ GHC.Prim.RealWorld
                                        @ (GHC.Base.Maybe GHC.Types.Int)
                                        ds3
                                        ipv3 of ds4 { (#,#) ipv5 ipv6 ->
                                 (# ipv5,
                                    Data.HashMap.Array.Array
                                      @ (GHC.Base.Maybe GHC.Types.Int)
                                      ipv6 #) } } } }) of ds1 { (#,#) ipv1 ipv2 ->
                         case ipv2 of ww2 { Data.HashMap.Array.Array ww3 ->
                         case Main.$s$wupdateOrConcatWithKey_$s$wgo1
                                0#
                                0#
                                (GHC.Prim.sizeofSmallArray# @ (GHC.Base.Maybe GHC.Types.Int) ww3)
                                ww3 of ww4 { DEFAULT ->
                         let {
                           x3 :: GHC.Prim.Int#
                           = GHC.Prim.sizeofSmallArray#
                               @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                               ww
                         } in
                         case GHC.Prim.newSmallArray#
                                @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                @ GHC.Prim.RealWorld
                                (GHC.Prim.+# x3 ww4)
                                (Data.HashMap.Array.undefinedElem
                                   @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                s1 of ds { (#,#) ipv ipv4 ->
                         case GHC.Prim.copySmallArray#
                                @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                @ GHC.Prim.RealWorld
                                ww
                                0#
                                ipv4
                                0#
                                x3
                                ipv of s2 { DEFAULT ->
                         let {
                           n13 :: GHC.Prim.Int#
                           = GHC.Prim.sizeofSmallArray#
                               @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                               ww1
                         } in
                         let {
                           exit :: GHC.Prim.State# GHC.Prim.RealWorld
                                   -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                         Data.HashMap.Array.Array
                                           (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                             <join 1> {- Arity: 1, Strictness: <S,U> -}
                           = \ (w :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                    ipv4
                                    w of ds2 { (#,#) ipv5 ipv6 ->
                             (# ipv5,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                  ipv6 #) }
                         } in
                         letrec {
                           $wgo14 :: GHC.Prim.Int#
                                     -> GHC.Prim.Int#
                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.HashMap.Array.Array
                                             (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                             <join 3> {- Arity: 3, Strictness: <L,U><S,U><S,U>, Inline: [0] -}
                           = \ (ww5 :: GHC.Prim.Int#)
                               (ww6 :: GHC.Prim.Int#)
                               (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                             case GHC.Prim.>=# ww6 n13 of lwild {
                               DEFAULT
                               -> case GHC.Prim.indexSmallArray#
                                         @ (GHC.Base.Maybe GHC.Types.Int)
                                         ww3
                                         ww6 of ds2 { Unit# ipv5 ->
                                  case ipv5 of wild {
                                    GHC.Base.Nothing
                                    -> case GHC.Prim.indexSmallArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww1
                                              ww6 of ds3 { Unit# ipv6 ->
                                       case GHC.Prim.writeSmallArray#
                                              @ GHC.Prim.RealWorld
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ipv4
                                              ww5
                                              ipv6
                                              w of s' { DEFAULT ->
                                       $wgo14 (GHC.Prim.+# ww5 1#) (GHC.Prim.+# ww6 1#) s' } }
                                    GHC.Base.Just i3
                                    -> case i3 of wild3 { GHC.Types.I# i# ->
                                       case GHC.Prim.indexSmallArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww
                                              i# of ds3 { Unit# ipv6 ->
                                       case ipv6 of wild4 { Data.HashMap.Base.L k6 v1 ->
                                       case GHC.Prim.indexSmallArray#
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ww1
                                              ww6 of ds4 { Unit# ipv7 ->
                                       case ipv7 of wild5 { Data.HashMap.Base.L ds5 v2 ->
                                       case GHC.Prim.writeSmallArray#
                                              @ GHC.Prim.RealWorld
                                              @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                              ipv4
                                              i#
                                              (Data.HashMap.Base.L
                                                 @ Data.Text.Internal.Text
                                                 @ v
                                                 k6
                                                 (w1 k6 v1 v2))
                                              w of s' { DEFAULT ->
                                       $wgo14 ww5 (GHC.Prim.+# ww6 1#) s' } } } } } } } }
                               1# -> exit w }
                         } in
                         $wgo14 x3 0# s2 } } } } }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
a4e55cda0f0afb57af1c2e11bd1167c5
  $s$wupdateOrConcatWithKey_$s$wgo1 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray# (GHC.Base.Maybe GHC.Types.Int)
    -> GHC.Prim.Int#
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,U> -}
5f6a812269e9a5a908eec7fb6f84c50f
  $sbetween ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      open
    -> Text.Megaparsec.Internal.ParsecT
         Main.Custom
         Data.Text.Internal.Text
         (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
         close
    -> Text.Megaparsec.Internal.ParsecT
         Main.Custom
         Data.Text.Internal.Text
         (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
         a
    -> Text.Megaparsec.Internal.ParsecT
         Main.Custom
         Data.Text.Internal.Text
         (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
         a
  {- Arity: 8,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Inline: (sat-args=3),
     Unfolding: InlineRule (3, False, False)
                (\ @ open
                   @ close
                   @ a
                   (open1 :: Text.Megaparsec.Internal.ParsecT
                               Main.Custom
                               Data.Text.Internal.Text
                               (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
                               open)
                   (close1 :: Text.Megaparsec.Internal.ParsecT
                                Main.Custom
                                Data.Text.Internal.Text
                                (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
                                close)
                   (p6 :: Text.Megaparsec.Internal.ParsecT
                            Main.Custom
                            Data.Text.Internal.Text
                            (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
                            a) ->
                 Text.Megaparsec.Internal.$fApplicativeParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.Custom
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   Text.Megaparsec.Stream.$fStreamText0
                   @ a
                   @ close
                   (Text.Megaparsec.Internal.$fApplicativeParsecT2
                      @ Data.Text.Internal.Text
                      @ Main.Custom
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           Main.ParseEnv GHC.Types.IO)
                      Text.Megaparsec.Stream.$fStreamText0
                      @ open
                      @ a
                      open1
                      p6)
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <a>_R))
                   close1)
                  `cast`
                (forall (open :: <*>_N) (close :: <*>_N) (a :: <*>_N).
                 <Text.Megaparsec.Internal.ParsecT
                    Main.Custom
                    Data.Text.Internal.Text
                    (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
                    open>_R
                 ->_R <Text.Megaparsec.Internal.ParsecT
                         Main.Custom
                         Data.Text.Internal.Text
                         (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
                         close>_R
                 ->_R <Text.Megaparsec.Internal.ParsecT
                         Main.Custom
                         Data.Text.Internal.Text
                         (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
                         a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <a>_R)) -}
40b311427ae47a355f1e612368821b7a
  $sdecimal10 :: GHC.Base.NonEmpty GHC.Types.Char
  {- Strictness: m,
     Unfolding: (GHC.Base.:|
                   @ GHC.Types.Char
                   Main.$sdecimal14
                   Main.$sdecimal11) -}
ab5151bb4e5b79b909bff0541a111a91
  $sdecimal11 :: [GHC.Types.Char]
  {- Unfolding: (GHC.Base.++
                   @ GHC.Types.Char
                   (GHC.CString.unpackCString# Main.$sdecimal13)
                   Main.$sdecimal12) -}
198758aad5cc999f86d24017981ba454
  $sdecimal12 :: [GHC.Types.Char]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.$sdecimal7
                   Main.$sdecimal5) -}
c3461397c6fc3b5f7fedaa1a49ef889f
  $sdecimal13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("he rest of "#) -}
1bbe6b922f0604dc1103deaf81bbfd6d
  $sdecimal14 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 't'#) -}
124d2a8c28d60310cc60aba915ccc2bc
  $sdecimal15 ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      GHC.Types.Int
  {- Unfolding: (Text.Megaparsec.Char.Lexer.decimal_
                   @ Main.Custom
                   @ Data.Text.Internal.Text
                   @ (Text.Megaparsec.Internal.ParsecT
                        Main.Custom
                        Data.Text.Internal.Text
                        (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO))
                   @ GHC.Types.Int
                   (Main.$s$fMonadParsecesParsecT
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           Main.ParseEnv GHC.Types.IO))
                   Main.$sdecimal16
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Text.Megaparsec.Stream.Token
                                       Data.Text.Internal.Text>_N <GHC.Types.Char>_N)
                   GHC.Real.$fIntegralInt) -}
c15d37ea946b5d4537c3c943d38df4b4
  $sdecimal16 ::
    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text :: *)
    GHC.Types.~~ (GHC.Types.Char :: *)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Eq#
                   @ *
                   @ *
                   @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                   @ GHC.Types.Char
                   @~ (Text.Megaparsec.Stream.D:R:TokenText0[0])) -}
a3c4456c0a43bf0c9e8c9ade77d2200f
  $sdecimal2 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
  {- Strictness: m1,
     Unfolding: (Data.Set.Internal.Bin
                   @ (Text.Megaparsec.Error.ErrorItem
                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                   1#
                   Main.$sdecimal3
                   (Data.Set.Internal.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                   (Data.Set.Internal.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))) -}
452939a0162a9c003bdf7979da82275e
  $sdecimal3 ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Error.Label
                   @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                   Main.$sdecimal4) -}
5f0d81297d657765b13402708628834c
  $sdecimal4 :: GHC.Base.NonEmpty GHC.Types.Char
  {- Strictness: m,
     Unfolding: (GHC.Base.:|
                   @ GHC.Types.Char
                   Main.$sdecimal7
                   Main.$sdecimal5) -}
4a17cc4161037174fb58e7560011da09
  $sdecimal5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.$sdecimal6) -}
6d6e6db350f73ba9eacee4c0a3c90e67
  $sdecimal6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("nteger"#) -}
934c9b69ad0887cb0d4ca4b54f220021
  $sdecimal7 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'i'#) -}
64afb611e0c9d4fe86775cd9db8aea41
  $sdecimal8 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
  {- Strictness: m1,
     Unfolding: (Data.Set.Internal.Bin
                   @ (Text.Megaparsec.Error.ErrorItem
                        (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                   1#
                   Main.$sdecimal9
                   (Data.Set.Internal.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                   (Data.Set.Internal.Tip
                      @ (Text.Megaparsec.Error.ErrorItem
                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))) -}
168fab12c16a1e87163f58551488097d
  $sdecimal9 ::
    Text.Megaparsec.Error.ErrorItem
      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
  {- Strictness: m2,
     Unfolding: (Text.Megaparsec.Error.Label
                   @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                   Main.$sdecimal10) -}
e175e8d0ece5c7bfab880f02ba469772
  $sfloat2 ::
    GHC.Types.Double
    -> Text.Megaparsec.State.State Data.Text.Internal.Text
    -> Text.Megaparsec.Internal.Hints
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Unfolding: (\ @ b1 ->
                 Control.Exception.Base.absentError
                   @ (GHC.Types.Double
                      -> Text.Megaparsec.State.State Data.Text.Internal.Text
                      -> Text.Megaparsec.Internal.Hints
                           (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                      -> Control.Monad.Trans.State.Lazy.StateT
                           Main.ParseEnv GHC.Types.IO b1)
                   Main.$sfloat3) -}
1d30d86ed12cfde6b348613f70c1ee8d
  $sfloat3 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("w Double\n\
                 \  -> State Text -> Hints (Token Text) -> StateT ParseEnv IO b1"#) -}
d2d732c6d835b6164b3d237d9c261b42
  $sfloat4 ::
    GHC.Integer.Type.Integer
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (GHC.Types.Double
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (GHC.Types.Double
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <L,U><S(S(LLS)SLL),1*U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(U)><L,C(C1(U))><L,A><L,1*C1(C1(U))> -}
ff4d2c7ecc6666d195a66feefe98d8fe
  $sfloat_m1 ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      GHC.Integer.Type.Integer
  {- Unfolding: (Text.Megaparsec.Char.Lexer.decimal_
                   @ Main.Custom
                   @ Data.Text.Internal.Text
                   @ (Text.Megaparsec.Internal.ParsecT
                        Main.Custom
                        Data.Text.Internal.Text
                        (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO))
                   @ GHC.Integer.Type.Integer
                   (Main.$s$fMonadParsecesParsecT
                      @ (Control.Monad.Trans.State.Lazy.StateT
                           Main.ParseEnv GHC.Types.IO))
                   Main.$sdecimal16
                     `cast`
                   (Sym (Data.Type.Equality.N:~[0]
                             <*>_N) <Text.Megaparsec.Stream.Token
                                       Data.Text.Internal.Text>_N <GHC.Types.Char>_N)
                   GHC.Real.$fIntegralInteger) -}
e0ce6618d0e4a5cd8dd2318b706cd58a
  $shexadecimal1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(S(LLS)S(SL)LL),1*U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,A><L,C(C1(U))> -}
edb4867a60276101b41bcd4019949cca
  $sinsertR_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
e9831b28556f5e72845bd2e9663c1516
  $sinsert_$s$wpoly_go1 ::
    GHC.Prim.Word#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 8,
     Strictness: <S,U><S,U><S,U><L,U><L,U><L,U><L,U><S,U> -}
86eae756ce3a677ab5a8b28f6dd7ceaf
  $sinsert_$sgo3 ::
    GHC.Prim.Int#
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Main.Custom)
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Main.Custom)
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> Text.Megaparsec.Error.ErrorFancy Main.Custom
    -> GHC.Classes.Ord
         (Text.Megaparsec.Error.ErrorFancy Main.Custom) =>
       Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorFancy Main.Custom)
  {- Arity: 7,
     Strictness: <L,U><L,U><L,U><L,U><S,1*U><L,U><S(LC(C(S))LLLLLL),U(A,C(C1(U)),A,A,A,A,A,A)> -}
ba1706bbd9fb724b78856bbcf3de71b6
  $sinsert_go3 ::
    GHC.Classes.Ord a1 =>
    a1 -> a1 -> Data.Set.Internal.Set a1 -> Data.Set.Internal.Set a1
  {- Arity: 4,
     Strictness: <L,U(A,C(C1(U)),A,A,A,A,A,A)><L,U><S,1*U><S,1*U> -}
09e2911135e18a839059dde26ba73602
  $soctal1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (GHC.Integer.Type.Integer
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(S(LLS)S(SL)LL),1*U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,A><L,C(C1(U))> -}
385a2871e21fdb4e8c93525b16abf3f1
  $sscientific1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Data.Scientific.Scientific
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Data.Scientific.Scientific
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Data.Scientific.Scientific
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eok :: Data.Scientific.Scientific
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1) ->
                 Main.$sfloat_m1
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <Main.Custom>_N
                      <Data.Text.Internal.Text>_N
                      <Control.Monad.Trans.State.Lazy.StateT
                         Main.ParseEnv GHC.Types.IO>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   s1
                   (\ (x3 :: GHC.Integer.Type.Integer)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    case s' of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                    case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                    case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                    Main.$wk
                      x3
                      @ b1
                      ww6
                      ww7
                      ww8
                      ww10
                      ww11
                      ww3
                      ww4
                      cok
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ Data.Scientific.Scientific
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         cok) } } })
                   cerr
                   (\ (x3 :: GHC.Integer.Type.Integer)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    case s' of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                    case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                    case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                    Main.$wk
                      x3
                      @ b1
                      ww6
                      ww7
                      ww8
                      ww10
                      ww11
                      ww3
                      ww4
                      cok
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ Data.Scientific.Scientific
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         eok) } } })
                   eerr) -}
d9510e511160f3dc7afe638ed6296544
  $sunions_go3 ::
    Data.Set.Internal.Set
      (Text.Megaparsec.Error.ErrorItem
         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
    -> [Data.Set.Internal.Set
          (Text.Megaparsec.Error.ErrorItem
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))]
    -> Data.Set.Internal.Set
         (Text.Megaparsec.Error.ErrorItem
            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
c762b28a4d6cb3eae17751b769c9652f
  $sunsafeInsert_$s$wpoly_go1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Prim.Word#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Word#
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 9,
     Strictness: <S,U><S,U><S,U><S,U><L,U><L,U><L,U><L,U><S,U> -}
c23ca0bfdb0679aaa164dd00cf149d87
  $tc'Bool :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8273687934820490372##
                   6731203687403643203##
                   Main.$trModule
                   Main.$tc'Bool2
                   0#
                   Main.$tc'Bool1) -}
df0754bb9acc51661ad738a676dd447a
  $tc'Bool1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
268f90c0dd16a9a3afe54b6cd14d9534
  $tc'Bool2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Bool3) -}
3f37d49d22b8c578c35a2e798ed3e066
  $tc'Bool3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Bool"#) -}
096c0bc55d9e390270c11dcbb7593e14
  $tc'Broken :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16007101611702547294##
                   5221155632890710149##
                   Main.$trModule
                   Main.$tc'Broken2
                   0#
                   Main.$tc'Broken1) -}
c8673a8961fea613c96c5a2604580729
  $tc'Broken1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d029e1c56c01d3da58a144919123bab8
  $tc'Broken2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Broken3) -}
5bbd516ce32e050ae3807c3c0e97ab32
  $tc'Broken3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Broken"#) -}
1d68b01be3c2a5557f22e24a5825ca14
  $tc'Cache :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   1260544639199475726##
                   16760056413088264239##
                   Main.$trModule
                   Main.$tc'Cache2
                   0#
                   Main.$tc'Cache1) -}
88c298343072d6ae83959efa6ff43956
  $tc'Cache1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
109922af4758ccf96119cb3870cb97b8
  $tc'Cache2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Cache3) -}
bafde9116637ad081e7949ce3704fe71
  $tc'Cache3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Cache"#) -}
243dfa8688d0e6e65531f85cb2b2a935
  $tc'Env :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16703616774606600940##
                   10744873200893762546##
                   Main.$trModule
                   Main.$tc'Env2
                   0#
                   Main.$tc'Env1) -}
d4fb4e8b6eaaf28f232986f1aaef1d40
  $tc'Env1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
73c0e6db538a3fa098c0f7e61d4d0d2b
  $tc'Env2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Env3) -}
f1e63ee3507ea2cf5f05bdf57d593890
  $tc'Env3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Env"#) -}
c3f32acaead618a7d0b144caff3e2fa7
  $tc'Eval :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7444739056523916950##
                   8719597071178098457##
                   Main.$trModule
                   Main.$tc'Eval2
                   1#
                   Main.$tc'Eval1) -}
c83cf28dbd0a0d18311fe80daf915105
  $tc'Eval1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
09527efc25ef637cd7ed492da852d3df
  $tc'Eval2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Eval3) -}
c8336359ac027356d8f6dfa51bde388e
  $tc'Eval3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Eval"#) -}
b6150d3c0cd25e01309a2ab4715331e6
  $tc'Exited :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4743550001183201030##
                   16232452769270266821##
                   Main.$trModule
                   Main.$tc'Exited1
                   0#
                   Main.$tc'Broken1) -}
7e269f6e6856d51a8eebf8da65d0f920
  $tc'Exited1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Exited2) -}
a153a02f5d88bcdd7fc460f7500e5861
  $tc'Exited2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Exited"#) -}
8e57a2a15b02598a72af4ecff0982c4c
  $tc'Expand :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17270276727507586605##
                   8904459836529891580##
                   Main.$trModule
                   Main.$tc'Expand2
                   0#
                   Main.$tc'Expand1) -}
e6b658fd815a5dcd4c048a52b7434498
  $tc'Expand1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
934f4f8bc5aa77ff9e4a62d52319c3f3
  $tc'Expand2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Expand3) -}
467c84e42e59a7d91f023e83203a4966
  $tc'Expand3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Expand"#) -}
be5b3631173f1be1200706eebcc8315a
  $tc'FD :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   17743826247588941123##
                   16838785185278006885##
                   Main.$trModule
                   Main.$tc'FD2
                   0#
                   Main.$tc'FD1) -}
bea414ae6feda9c2cc793c48af419d83
  $tc'FD1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
54f64a5f0dad6a9b05a808448728c371
  $tc'FD2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'FD3) -}
79d1d437e928ab95ba6bf2014e84d910
  $tc'FD3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'FD"#) -}
73c7a92950f81d1601876c787c6d05ef
  $tc'Flags :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15246334507463678684##
                   13053204603413229616##
                   Main.$trModule
                   Main.$tc'Flags2
                   0#
                   Main.$tc'Flags1) -}
9e11802fbc8f307232562a68959cdd85
  $tc'Flags1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
9f57b533132812ef7bebe9a4e7699efd
  $tc'Flags2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Flags3) -}
7564289a753e5304c39afd13283fd42a
  $tc'Flags3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Flags"#) -}
4ef93d0c6e583ac5350c1d6a219990a4
  $tc'Float :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3613683557823133786##
                   15156013965850347367##
                   Main.$trModule
                   Main.$tc'Float2
                   0#
                   Main.$tc'Float1) -}
47d41b8144300a17fa6b736b205e5ced
  $tc'Float1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
ebe1c74ca25c12b8194831a2c16c77ba
  $tc'Float2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Float3) -}
c0309ac52e82c0677e59a82f38032e30
  $tc'Float3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Float"#) -}
7611ea8fc2b68f57026e67343eaf9926
  $tc'Forked :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13257431406646761798##
                   7902661616195836891##
                   Main.$trModule
                   Main.$tc'Forked2
                   0#
                   Main.$tc'Forked1) -}
58d0ddc6fc5e9a69df57e51a990fe495
  $tc'Forked1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
6afc27b0615c0c35e935d90e53d69906
  $tc'Forked2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Forked3) -}
8df42fde38b3c3a27dd514e844f6a6f0
  $tc'Forked3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Forked"#) -}
816ec008023727b1ebf7ebbc5bbc51b2
  $tc'Internal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8251553968420029822##
                   16687599753149948662##
                   Main.$trModule
                   Main.$tc'Internal2
                   0#
                   Main.$tc'Internal1) -}
f593cbcb60ab448bb7329a04ba5f163d
  $tc'Internal1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f885d2570e7c11f1ab55ce02c29a5e2e
  $tc'Internal2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Internal3) -}
b713270b452793526921ec82d516e813
  $tc'Internal3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Internal"#) -}
ce5e042d721f648cf37ea564711a1492
  $tc'InvalidFormat :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   85474296711477535##
                   6754695716402816600##
                   Main.$trModule
                   Main.$tc'InvalidFormat2
                   0#
                   Main.$tc'InvalidFormat1) -}
d2cc6e4c0d21b228dda34ace6553bb32
  $tc'InvalidFormat1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d89f5b980ae9b721481fdafaac79e301
  $tc'InvalidFormat2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'InvalidFormat3) -}
1cd07d8127ca71a0b2bf7f4955637439
  $tc'InvalidFormat3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'InvalidFormat"#) -}
cde9017811d42db3563cd809bd6ad963
  $tc'Lambda :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   13066833174196164344##
                   3995030253933373968##
                   Main.$trModule
                   Main.$tc'Lambda2
                   0#
                   Main.$tc'Lambda1) -}
22924937c48e17a5310433369e30c927
  $tc'Lambda1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8190571b66e859ef511446b145e7c738
  $tc'Lambda2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Lambda3) -}
a73e5250def19d72dadb7f8bbc7145b8
  $tc'Lambda3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Lambda"#) -}
a1dff64f3838c7fc3d4ff1b7fddd22a3
  $tc'LinkedStr :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11482938401500397963##
                   2573138270367384172##
                   Main.$trModule
                   Main.$tc'LinkedStr2
                   0#
                   Main.$tc'LinkedStr1) -}
64006b0fab79a6cbb5d3612acced6ea0
  $tc'LinkedStr1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
a2eaa611d94f27cde7531f81c7b67323
  $tc'LinkedStr2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'LinkedStr3) -}
b8cf1277d8d5cbc0a843ebf9a34482a8
  $tc'LinkedStr3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'LinkedStr"#) -}
1c6cbf32661319023647e9a57e8258da
  $tc'List :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9927808781724481643##
                   7048647306205932290##
                   Main.$trModule
                   Main.$tc'List1
                   0#
                   Main.$tc'LinkedStr1) -}
b0ff1210356d7d259ce3494e06e05f58
  $tc'List1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'List2) -}
50ab35f9d30469971e30cf549fe24748
  $tc'List2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'List"#) -}
1a8934c94dedf9010fbaae189ceeac9f
  $tc'MultiDefine :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15550599027517251787##
                   4584668745675618985##
                   Main.$trModule
                   Main.$tc'MultiDefine2
                   0#
                   Main.$tc'MultiDefine1) -}
124016a68d974bdb4abbf09101148ea2
  $tc'MultiDefine1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
f8f647d9650ce00ba75b7240d5f8473c
  $tc'MultiDefine2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'MultiDefine3) -}
93200ba7b62cb57b1026a7c2f4854c1a
  $tc'MultiDefine3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'MultiDefine"#) -}
477324a8b59e4ec3b274a3b7392de483
  $tc'NoArgs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12981698250036692060##
                   15735911021898165203##
                   Main.$trModule
                   Main.$tc'NoArgs1
                   0#
                   Main.$tc'Expand1) -}
109357ac2cc97c2ebd36f7b38f354269
  $tc'NoArgs1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NoArgs2) -}
543f5d978acf89ed33ca74788b6bdfcb
  $tc'NoArgs2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoArgs"#) -}
c4a55acc9b83ef348cc77cba409c9ef6
  $tc'NoCache :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   18228043211905165049##
                   11044112483794594484##
                   Main.$trModule
                   Main.$tc'NoCache2
                   0#
                   Main.$tc'NoCache1) -}
9f8340a3f1c0cba0a3ec41f79caa5133
  $tc'NoCache1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m1, Inline: [~] -}
bf1f0f539b7ebf125b7608e3f60fb595
  $tc'NoCache2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NoCache3) -}
ec769fc401e70283ea5695b434888786
  $tc'NoCache3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoCache"#) -}
9a45e1a5961efd4957d89920b86604ee
  $tc'NoFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11079736662151173726##
                   1514923585941696527##
                   Main.$trModule
                   Main.$tc'NoFunc1
                   0#
                   Main.$tc'NoCache1) -}
b6181bb9d8a6e0b98a63f013efd06fbf
  $tc'NoFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NoFunc2) -}
069ba4d88cfd6b2b58d8222f4cb6f6e1
  $tc'NoFunc2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NoFunc"#) -}
e3f0c687fa861e9ec06d049ec5f34d4b
  $tc'Normal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4687379188260267520##
                   16806632198905116153##
                   Main.$trModule
                   Main.$tc'Normal1
                   0#
                   Main.$tc'Expand1) -}
b2648374caa46c3e0275cf5dc6682129
  $tc'Normal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Normal2) -}
293c82666d572e58fa94e345e02b53a7
  $tc'Normal2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Normal"#) -}
656e72c60d68ce9689f398d83a878cbf
  $tc'NotDefined :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11657818289273621924##
                   15896594615834503130##
                   Main.$trModule
                   Main.$tc'NotDefined1
                   0#
                   Main.$tc'MultiDefine1) -}
69e1c3c3acc2ee38f358dc921bee520e
  $tc'NotDefined1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NotDefined2) -}
d3fde8d802d21ab1e59d9b3e639df3f2
  $tc'NotDefined2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotDefined"#) -}
e4b60ef594fd56d4d6a8204fbb03660a
  $tc'NotLiteral :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8786444520736996150##
                   16590610792096448707##
                   Main.$trModule
                   Main.$tc'NotLiteral1
                   0#
                   Main.$tc'MultiDefine1) -}
31b237f65035b59d0a72c1256e9ca393
  $tc'NotLiteral1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NotLiteral2) -}
3da264fa7b677681242b1f59d54de70a
  $tc'NotLiteral2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotLiteral"#) -}
6c733ddbc81866bd11e57f465edbacff
  $tc'NotPureFunc :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   11948364403424892953##
                   4509708881472173125##
                   Main.$trModule
                   Main.$tc'NotPureFunc1
                   0#
                   Main.$tc'MultiDefine1) -}
3f06f4d35047b7e5e88e603bf9c3d1cf
  $tc'NotPureFunc1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NotPureFunc2) -}
b2336e0f89b10f48aa3eb5275fd60983
  $tc'NotPureFunc2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NotPureFunc"#) -}
59791f6eb7e8f717cd3c5cc2983c68f3
  $tc'NumArgs :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16592331247880665147##
                   1982150893023075239##
                   Main.$trModule
                   Main.$tc'NumArgs2
                   0#
                   Main.$tc'NumArgs1) -}
871d089d3c8cd69e5b89eab1450822d7
  $tc'NumArgs1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
4480334eceb9bbfd5a1f8282f860170d
  $tc'NumArgs2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'NumArgs3) -}
9f18a0cab18e4ff5a58c9b31b60b0521
  $tc'NumArgs3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'NumArgs"#) -}
e16e82567c669428e2b8e3c773830681
  $tc'ParseEnv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15882103616010135928##
                   2191463344357103419##
                   Main.$trModule
                   Main.$tc'ParseEnv2
                   0#
                   Main.$tc'ParseEnv1) -}
d4b62012def38c0fc77edc7ef0d2e7fa
  $tc'ParseEnv1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
2d5ef932c878b92549d02f85e85d7289
  $tc'ParseEnv2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ParseEnv3) -}
c061140b16e59b5be91cb71ca1ff786c
  $tc'ParseEnv3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ParseEnv"#) -}
0e9b3ea96d79a1976671591688b7f4d1
  $tc'Prim :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12826052766906310400##
                   4938540656055807366##
                   Main.$trModule
                   Main.$tc'Prim2
                   0#
                   Main.$tc'Prim1) -}
a42cc451feb9cf96da495c02f213433c
  $tc'Prim1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
5f4fdd53073496f86a8a20bf32401759
  $tc'Prim2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Prim3) -}
8f100162775af800109238c45d65cc0f
  $tc'Prim3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Prim"#) -}
57c25914e09ca403904ebed14d0edfd8
  $tc'PrimFS :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2503471091223431800##
                   8034546663282823442##
                   Main.$trModule
                   Main.$tc'PrimFS2
                   0#
                   Main.$tc'PrimFS1) -}
599c91b1654624610d62a59219c9cfd5
  $tc'PrimFS1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
15dea2882578f9f1d84f4cb918a7dcee
  $tc'PrimFS2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'PrimFS3) -}
0ed7de4586a672ccc637c097aa619906
  $tc'PrimFS3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'PrimFS"#) -}
754497d99a8ff048c44364b6e2beb947
  $tc'Purely :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16228103521164812542##
                   7429838569666761284##
                   Main.$trModule
                   Main.$tc'Purely1
                   0#
                   Main.$tc'Expand1) -}
f9014f8b638b14bcd3c05a463ba1c17f
  $tc'Purely1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Purely2) -}
b01229b8f47a740ed6e77c5382cde354
  $tc'Purely2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Purely"#) -}
6e98879f0f1d5c5e31141e63b3f38e3d
  $tc'Rd :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5584780195073838951##
                   3062391477490653138##
                   Main.$trModule
                   Main.$tc'Rd2
                   0#
                   Main.$tc'Rd1) -}
230ef2f6fe2383ab4ffe605fbcb3ea14
  $tc'Rd1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bd971f846dbbfabd8fcb00b3cb84c2f4
  $tc'Rd2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Rd3) -}
6198d9eca8e3d945aedc5bb23040091f
  $tc'Rd3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Rd"#) -}
fff9ed03116178b7c110b284c1c7b6e8
  $tc'Returned :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3673711782181160561##
                   15047616058191360184##
                   Main.$trModule
                   Main.$tc'Returned1
                   0#
                   Main.$tc'Broken1) -}
f79d97a40f4f4d357e193f6ee49b60e0
  $tc'Returned1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Returned2) -}
49ae7f2e7fce7f92389486b96168b9a9
  $tc'Returned2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Returned"#) -}
840dc7fc2306c3b83b5fe41d7ace6551
  $tc'SomeError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12605370343987469934##
                   16588303340669298711##
                   Main.$trModule
                   Main.$tc'SomeError1
                   0#
                   Main.$tc'Internal1) -}
836788fb0e3a08b49d9f834e11a340f3
  $tc'SomeError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'SomeError2) -}
c2424bc91be98f39ace298a0f667983f
  $tc'SomeError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'SomeError"#) -}
f106ac03c64279cb03da234ca04d403e
  $tc'Str :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   5798942426098476213##
                   5900795599289133102##
                   Main.$trModule
                   Main.$tc'Str2
                   0#
                   Main.$tc'Str1) -}
a786684d4e5bdd2d2daf27298f374ee5
  $tc'Str1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
bc98f0a2e62615441bf3fd1f2d76c79a
  $tc'Str2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Str3) -}
075c8f3d9d4dd0e593aafaaea054e578
  $tc'Str3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Str"#) -}
f62b4f1633dbe6a75235960474435a33
  $tc'ThreadInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12119444195076154461##
                   4396070288150812273##
                   Main.$trModule
                   Main.$tc'ThreadInfo2
                   0#
                   Main.$tc'ThreadInfo1) -}
b7331776c6efa421068155eed77b0d45
  $tc'ThreadInfo1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
aab53ddb315e6657f594f4d24f57512e
  $tc'ThreadInfo2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'ThreadInfo3) -}
4e72c1294766b3a60efd883a24db9dc4
  $tc'ThreadInfo3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'ThreadInfo"#) -}
f9194a00e376faf87b6f2002a5736f1b
  $tc'Threaded :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7625743301827761842##
                   10043701929894781984##
                   Main.$trModule
                   Main.$tc'Threaded2
                   0#
                   Main.$tc'Threaded1) -}
f9db63951083430e5d944bfc9a7ff0f0
  $tc'Threaded1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
245454b4af0b4b05e02ebe51413d051b
  $tc'Threaded2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Threaded3) -}
3f1ad310ee919749535f0395cac8c292
  $tc'Threaded3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Threaded"#) -}
016c8b995fd946a27231e73878cfb00d
  $tc'TypeMismatch :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   592404368900098429##
                   12867579647729118414##
                   Main.$trModule
                   Main.$tc'TypeMismatch2
                   0#
                   Main.$tc'TypeMismatch1) -}
20e9f38ed9cab973a0b2f5fc901b34a0
  $tc'TypeMismatch1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
58553472066108d06d7da8e238566e13
  $tc'TypeMismatch2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'TypeMismatch3) -}
62f2e761d6d2c2aa5ce1eaf145889c9f
  $tc'TypeMismatch3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'TypeMismatch"#) -}
e10eb82c59efc19e06dad52e99a410cb
  $tc'UnboundVar :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9228253573747957705##
                   3546338811461806384##
                   Main.$trModule
                   Main.$tc'UnboundVar1
                   0#
                   Main.$tc'Internal1) -}
33b2d5331237f42c47e89afbb46cb451
  $tc'UnboundVar1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'UnboundVar2) -}
0bb12718498ea5cde48961b6fa56ce7a
  $tc'UnboundVar2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'UnboundVar"#) -}
cd8b3076f4582864e0c13f921212016b
  $tc'Var :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   941528533574368362##
                   2414828796846326931##
                   Main.$trModule
                   Main.$tc'Var2
                   0#
                   Main.$tc'Var1) -}
b13de3d25c8096b32cef08d2b01c396c
  $tc'Var1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
d794eb41864ee6912ef8d9f366e17b3f
  $tc'Var2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'Var3) -}
9d50a35c0b55e825dba255a913f262c0
  $tc'Var3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'Var"#) -}
69503ac8c15d34418e00ee9b98da906e
  $tc'VarA :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12608022229871784572##
                   4639024765656697701##
                   Main.$trModule
                   Main.$tc'VarA2
                   0#
                   Main.$tc'VarA1) -}
7e410214ab5673ea377f56cdc39a4ab8
  $tc'VarA1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
46347481d30419b344d5e7a8e46891f3
  $tc'VarA2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'VarA3) -}
b287ba62b3345b3582b76ff37e53576a
  $tc'VarA3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VarA"#) -}
529af677f3bc54ee0011e2d1d99a8fb9
  $tc'VarM :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12729302209716866386##
                   10309054044621306430##
                   Main.$trModule
                   Main.$tc'VarM1
                   0#
                   Main.$tc'Var1) -}
26e1eaed425f30565606e9ea51e8f6eb
  $tc'VarM1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'VarM2) -}
92ac87abd4385e79f510fe51555c1722
  $tc'VarM2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VarM"#) -}
750e8861c02b7c5a5d190de38fc40752
  $tc'VarN :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2553525439863635687##
                   12247637344993197520##
                   Main.$trModule
                   Main.$tc'VarN2
                   0#
                   Main.$tc'VarN1) -}
b6af6c41425287a92a29b4a42380b292
  $tc'VarN1 :: GHC.Types.KindRep
  {- HasNoCafRefs, Strictness: m4, Inline: [~] -}
8336bcb8b6bd2e869fc2d2ef6588718c
  $tc'VarN2 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'VarN3) -}
83455b147ed15917fc2fdc54cff29e5a
  $tc'VarN3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VarN"#) -}
e0065e9f768bc18d0b740c12a4ee1de6
  $tc'VarR :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   14050170727319001822##
                   13004562336368805798##
                   Main.$trModule
                   Main.$tc'VarR1
                   0#
                   Main.$tc'VarA1) -}
2052fd545e6a6cfeaba8457364d3065f
  $tc'VarR1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tc'VarR2) -}
0e40df748c1586fee00473cd6d440e87
  $tc'VarR2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'VarR"#) -}
2c48621ba4cdeb08b4465f6cec581412
  $tcCache :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   3613073707848587398##
                   2123212563135507657##
                   Main.$trModule
                   Main.$tcCache1
                   0#
                   GHC.Types.krep$*) -}
a6a92e4df120066cb238672f3fd0e009
  $tcCache1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCache2) -}
c8326cddda6c9a931100bcbbdfdedc0b
  $tcCache2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Cache"#) -}
d8d6b7d2a49b4e9a45cc2737700ab856
  $tcCustom :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4295705838737357677##
                   2728295772679465916##
                   Main.$trModule
                   Main.$tcCustom1
                   0#
                   GHC.Types.krep$*) -}
63a247fedd7a6d967963de91c1c404a2
  $tcCustom1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcCustom2) -}
6357415a33ad0c3cff2cb42bcda4698d
  $tcCustom2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Custom"#) -}
3074539111246ef84df696f999580bf7
  $tcEnv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   16719196856831336909##
                   10582005298383135762##
                   Main.$trModule
                   Main.$tcEnv1
                   0#
                   GHC.Types.krep$*) -}
57eaae72aa8a5145dcec76c296898dad
  $tcEnv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcEnv2) -}
8d9b94b4333ff86993cc14c5f097e6e2
  $tcEnv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Env"#) -}
586be027feaacde1968c4ed401f1178a
  $tcEval :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   8525211485912629338##
                   16079289720556590260##
                   Main.$trModule
                   Main.$tcEval1
                   0#
                   GHC.Types.krep$*Arr*) -}
c4b1dcbfa363472f063d3767a8baeb52
  $tcEval1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcEval2) -}
3760ab671a006034bf1fbc30cd43496d
  $tcEval2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Eval"#) -}
91388994f9d9118602bad79217a3bed4
  $tcFlags :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   581213970394967281##
                   3509737719224284649##
                   Main.$trModule
                   Main.$tcFlags1
                   0#
                   GHC.Types.krep$*) -}
d5ef4fd5b8b5e34308c856a28b175df3
  $tcFlags1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcFlags2) -}
136e97927b3ccd248dd8ec3c1bb80bbf
  $tcFlags2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Flags"#) -}
fc079ea50bbb0375c3383c116c2ef0a1
  $tcJobInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   9890613085960429183##
                   6086201706197320173##
                   Main.$trModule
                   Main.$tcJobInfo1
                   0#
                   GHC.Types.krep$*) -}
d707c01a22ef1e0f25c83ab29b1bd9c3
  $tcJobInfo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcJobInfo2) -}
60704906e06d87ab730f4ca247c5e06f
  $tcJobInfo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("JobInfo"#) -}
b061f0f09d8a7b3d18fb8dce76f81c89
  $tcLambdaType :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   12220325068173094226##
                   1710914243054381768##
                   Main.$trModule
                   Main.$tcLambdaType1
                   0#
                   GHC.Types.krep$*) -}
552f5891d7fd8afd497eca74cd5958da
  $tcLambdaType1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcLambdaType2) -}
02036e869690c56383b856c3d050ec04
  $tcLambdaType2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("LambdaType"#) -}
27d3bcbe7a7e3d9d8785e17be676c11a
  $tcParseEnv :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   15957191558506667096##
                   2478682835644940476##
                   Main.$trModule
                   Main.$tcParseEnv1
                   0#
                   GHC.Types.krep$*) -}
133db4be81420d81f66dd14dbc220213
  $tcParseEnv1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcParseEnv2) -}
1a61ab1c67a751cd20f52591a207ac0f
  $tcParseEnv2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ParseEnv"#) -}
2ffff7e9a3f97aba5683b1d0b7843213
  $tcShError :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   4691157053863964702##
                   1906340682759576448##
                   Main.$trModule
                   Main.$tcShError1
                   0#
                   GHC.Types.krep$*) -}
818957572471b04c9d9f879228e1488c
  $tcShError1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcShError2) -}
5109eb826dca6e9ee13ccff08acbfabd
  $tcShError2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ShError"#) -}
a65475002f858a86f205ca7ecc758493
  $tcThreadInfo :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   2112117219436119955##
                   11497729673286221062##
                   Main.$trModule
                   Main.$tcThreadInfo1
                   0#
                   GHC.Types.krep$*) -}
4d6c6b225e2e813c1df5e408f08da708
  $tcThreadInfo1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcThreadInfo2) -}
513a48267edb8861e551dfab04b0a5ae
  $tcThreadInfo2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ThreadInfo"#) -}
957b9239431b80fe7c71c0742b017f00
  $tcVal :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7463231145256676633##
                   9133200204911899045##
                   Main.$trModule
                   Main.$tcVal1
                   0#
                   GHC.Types.krep$*) -}
49b739eef0ae95ea43f85f875f4f996b
  $tcVal1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcVal2) -}
b94a936f664c1905a8491872ba91438a
  $tcVal2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Val"#) -}
27a02d61c649a3ba10e4fe18438e41d0
  $tcVarT :: GHC.Types.TyCon
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.TyCon
                   7839906129034602270##
                   3984199521353429358##
                   Main.$trModule
                   Main.$tcVarT1
                   0#
                   GHC.Types.krep$*) -}
1d98358c98f3e9e133802856fd9bda75
  $tcVarT1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$tcVarT2) -}
d8e14361107cca478470c2fe5a5afde8
  $tcVarT2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VarT"#) -}
be86c9d078d3acbf19ba91fe74a24273
  $trModule :: GHC.Types.Module
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (GHC.Types.Module Main.$trModule3 Main.$trModule1) -}
b09d86f2c49dd5176b544d8d13ddb6c5
  $trModule1 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule2) -}
e5875966b74dad2d29772660b8a75e33
  $trModule2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Main"#) -}
23b03bd7d075a00f5ad1ee10e6add7b8
  $trModule3 :: GHC.Types.TrName
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (GHC.Types.TrNameS Main.$trModule4) -}
d026be77cb9ced20e35a61514e0458aa
  $trModule4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("main"#) -}
94db68e1495b515fa2f4d2f653a3d700
  $w$cshowsPrec ::
    GHC.Prim.Int# -> Main.Custom -> GHC.Base.String -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,1*U><L,U>, Inline: [0] -}
ee6ec2f2f7f3e8cef28278a42f55e84e
  $w$cshowsPrec1 ::
    GHC.Prim.Int#
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Base.String
    -> GHC.Base.String
  {- Arity: 4, Strictness: <S,U><L,1*U><L,1*U><L,U>, Inline: [0] -}
61d9aba738a7367b1479d90fc7413189
  $w$cshowsPrec2 ::
    GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe Main.Val
    -> Data.HashSet.HashSet Data.Text.Internal.Text
    -> Data.HashSet.HashSet Data.Text.Internal.Text
    -> Data.HashSet.HashSet Data.Text.Internal.Text
    -> Data.HashSet.HashSet Data.Text.Internal.Text
    -> GHC.Base.Maybe Main.Custom
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Show.ShowS
  {- Arity: 10,
     Strictness: <S,U><L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U><L,U><L,U><L,U>,
     Inline: [0] -}
cb22d11c2e5628d2f96740c7d143ea05
  $w$s$wupdateOrSnocWithKey ::
    (Data.Text.Internal.Text -> v -> v -> v)
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> Data.HashMap.Array.Array
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
  {- Arity: 6, Strictness: <L,C(C1(C1(U)))><S,U><S,U><S,U><L,U><S,U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (w :: Data.Text.Internal.Text -> v -> v -> v)
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w1 :: v)
                   (w2 :: Data.HashMap.Array.Array#
                            (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)) ->
                 let {
                   exit :: v
                           -> Data.HashMap.Array.Array#
                                (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                           -> GHC.Prim.Int#
                           -> Data.Text.Internal.Text
                           -> v
                           -> Data.HashMap.Array.Array
                                (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     <join 5> {- Arity: 5, Strictness: <L,U><S,U><S,U><L,U><L,U> -}
                   = \ (w3 :: v)[OneShot]
                       (ww3 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))[OneShot]
                       (ww4 :: GHC.Prim.Int#)[OneShot]
                       (k6 :: Data.Text.Internal.Text)[OneShot]
                       (y :: v)[OneShot] ->
                     case GHC.Magic.runRW#
                            @ ('GHC.Types.TupleRep
                                 '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                            @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.HashMap.Array.Array
                                   (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                             case GHC.Prim.thawSmallArray#
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                    @ GHC.Prim.RealWorld
                                    ww3
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                       ww3)
                                    s1 of ds2 { (#,#) ipv4 ipv5 ->
                             case GHC.Prim.writeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                    ipv5
                                    ww4
                                    (Data.HashMap.Base.L
                                       @ Data.Text.Internal.Text
                                       @ v
                                       k6
                                       (w k6 w3 y))
                                    ipv4 of s' { DEFAULT ->
                             case GHC.Prim.unsafeFreezeSmallArray#
                                    @ GHC.Prim.RealWorld
                                    @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                    ipv5
                                    s' of ds3 { (#,#) ipv6 ipv7 ->
                             (# ipv6,
                                Data.HashMap.Array.Array
                                  @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                  ipv7 #) } } }) of ds2 { (#,#) ipv4 ipv5 ->
                     ipv5 }
                 } in
                 letrec {
                   $wgo14 :: GHC.Prim.ByteArray#
                             -> GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> v
                             -> Data.HashMap.Array.Array#
                                  (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                             -> GHC.Prim.Int#
                             -> GHC.Prim.Int#
                             -> Data.HashMap.Array.Array
                                  (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                     <join 7> {- Arity: 7,
                                 Strictness: <L,U><L,U><L,U><L,U><S,U><S,U><S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.ByteArray#)
                       (ww4 :: GHC.Prim.Int#)
                       (ww5 :: GHC.Prim.Int#)
                       (w3 :: v)
                       (ww6 :: Data.HashMap.Array.Array#
                                 (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                       (ww7 :: GHC.Prim.Int#)
                       (ww8 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww7 ww8 of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexSmallArray#
                                 @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                 ww6
                                 ww7 of ds1 { Unit# ipv3 ->
                          case ipv3 of wild { Data.HashMap.Base.L kx y ->
                          case kx of wild1 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                          case GHC.Prim.==# ww5 dt63 of lwild1 {
                            DEFAULT -> $wgo14 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                            1#
                            -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.ByteArray#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.Word#
                                                              -> GHC.Prim.State# GHC.Prim.RealWorld
                                                              -> (# GHC.Prim.State#
                                                                      GHC.Prim.RealWorld,
                                                                    GHC.Prim.Int# #)}
                                      ww3
                                      (GHC.Prim.int2Word# ww4)
                                      dt61
                                      (GHC.Prim.int2Word# dt62)
                                      (GHC.Prim.int2Word# ww5)
                                      GHC.Prim.realWorld# of wild5 { (#,#) ds2 ds3 ->
                               case GHC.Prim.narrow32Int# ds3 of wild2 {
                                 DEFAULT -> $wgo14 ww3 ww4 ww5 w3 ww6 (GHC.Prim.+# ww7 1#) ww8
                                 0#
                                 -> exit
                                      w3
                                      ww6
                                      ww7
                                      (Data.Text.Internal.Text ww3 ww4 ww5)
                                      y } } } } } }
                       1#
                       -> case GHC.Magic.runRW#
                                 @ ('GHC.Types.TupleRep
                                      '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                                 @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.HashMap.Array.Array
                                        (Data.HashMap.Base.Leaf Data.Text.Internal.Text v) #)
                                 (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                  case GHC.Prim.newSmallArray#
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         @ GHC.Prim.RealWorld
                                         (GHC.Prim.+# ww8 1#)
                                         (Data.HashMap.Array.undefinedElem
                                            @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v))
                                         s1 of ds { (#,#) ipv3 ipv4 ->
                                  case GHC.Prim.copySmallArray#
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         @ GHC.Prim.RealWorld
                                         ww6
                                         0#
                                         ipv4
                                         0#
                                         ww8
                                         ipv3 of s2 { DEFAULT ->
                                  case GHC.Prim.writeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         ipv4
                                         ww8
                                         (Data.HashMap.Base.L
                                            @ Data.Text.Internal.Text
                                            @ v
                                            (Data.Text.Internal.Text ww3 ww4 ww5)
                                            w3)
                                         s2 of s' { DEFAULT ->
                                  case GHC.Prim.unsafeFreezeSmallArray#
                                         @ GHC.Prim.RealWorld
                                         @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                         ipv4
                                         s' of ds2 { (#,#) ipv5 ipv6 ->
                                  (# ipv5,
                                     Data.HashMap.Array.Array
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                                       ipv6 #) } } } }) of ds1 { (#,#) ipv3 ipv4 ->
                          ipv4 } }
                 } in
                 $wgo14
                   ww
                   ww1
                   ww2
                   w1
                   w2
                   0#
                   (GHC.Prim.sizeofSmallArray#
                      @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
                      w2)) -}
fb8e8dcdfef15326741075429604c5f3
  $w$sdelete ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 4, Strictness: <S,U><S,U><S,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.7.0 GHC.Prim.ByteArray#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Main.$wpoly_go4 @ v (GHC.Prim.int2Word# ds2) ww ww1 ww2 0# w }) -}
bcabed92e1664637762c7ac3057494ae
  $w$sfloat ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (GHC.Types.Double
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 4, Strictness: <L,U><L,C(U)><L,U><L,U>, Inline: [0],
     Unfolding: (\ @ b1
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: GHC.Types.Double
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1) ->
                 Main.$sfloat_m1
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <Main.Custom>_N
                      <Data.Text.Internal.Text>_N
                      <Control.Monad.Trans.State.Lazy.StateT
                         Main.ParseEnv GHC.Types.IO>_R
                      <GHC.Integer.Type.Integer>_R)
                   @ b1
                   w
                   (\ (x3 :: GHC.Integer.Type.Integer)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    Main.$sfloat4
                      x3
                      @ b1
                      s'
                      w1
                      w2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ GHC.Types.Double
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         w1)
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         w2))
                   w2
                   (\ (x3 :: GHC.Integer.Type.Integer)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    Main.$sfloat4
                      x3
                      @ b1
                      s'
                      w1
                      w2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ GHC.Types.Double
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         (Main.$sfloat2 @ b1))
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         w3))
                   w3) -}
80e329d0bdb151f721762493f0604870
  $w$sinsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.7.0 GHC.Prim.ByteArray#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Main.$wpoly_go5
                   @ v
                   (GHC.Prim.int2Word# ds2)
                   ww
                   ww1
                   ww2
                   w
                   0#
                   w1 }) -}
a856539b24c4b89420bfde691b128e12
  $w$slookup ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 4, HasNoCafRefs, Strictness: <S,U><S,U><S,U><L,1*U>,
     Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case {__pkg_ccall hashable-1.2.7.0 GHC.Prim.ByteArray#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.Int#
                                                    -> GHC.Prim.State# GHC.Prim.RealWorld
                                                    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                          GHC.Prim.Int# #)}
                        ww
                        (GHC.Prim.uncheckedIShiftL# ww1 1#)
                        (GHC.Prim.uncheckedIShiftL# ww2 1#)
                        -2578643520546668380#
                        GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                 Main.$wpoly_go6 @ v (GHC.Prim.int2Word# ds2) ww ww1 ww2 0# w }) -}
04c13a97335bc401c7267ea3f3ab9d43
  $w$sunsafeInsert ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 5, Strictness: <S,U><S,U><S,U><L,U><L,1*U>, Inline: [0],
     Unfolding: (\ @ v
                   (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: v)
                   (w1 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text v) ->
                 case GHC.Magic.runRW#
                        @ ('GHC.Types.TupleRep
                             '['GHC.Types.TupleRep '[], 'GHC.Types.LiftedRep])
                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                             Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
                        (\ (w2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                         case {__pkg_ccall hashable-1.2.7.0 GHC.Prim.ByteArray#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Int# #)}
                                ww
                                (GHC.Prim.uncheckedIShiftL# ww1 1#)
                                (GHC.Prim.uncheckedIShiftL# ww2 1#)
                                -2578643520546668380#
                                GHC.Prim.realWorld# of wild1 { (#,#) ds1 ds2 ->
                         Main.$wpoly_go7
                           @ v
                           (GHC.Prim.int2Word# ds2)
                           ww
                           ww1
                           ww2
                           w
                           0#
                           w1
                           w2 }) of ds1 { (#,#) ipv ipv1 ->
                 ipv1 }) -}
81e68207d6c0faa3081575a2249a21bb
  $wcompleteFn ::
    GHC.Prim.MutVar#
      GHC.Prim.RealWorld
      (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO
         (GHC.Base.String, [System.Console.Haskeline.Completion.Completion])
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld
                            (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val))
                   (ww1 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo)
                   (ww2 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String) ->
                 System.Console.Haskeline.Completion.$wcompleteQuotedWord
                   @ GHC.Types.IO
                   GHC.Base.$fMonadIO
                   Main.completeFn9
                   Main.completeFn12
                   Main.completeFn11
                   (\ (w :: (GHC.Base.String, GHC.Base.String))[OneShot] ->
                    case w of ww5 { (,) ww6 ww7 ->
                    Main.$wunquotedCompleteFn ww ww1 ww2 ww6 ww7 })
                   ww3
                   ww4) -}
abd133dc8bad1c00d96e6f5d5905f400
  $wexpand ::
    Main.Env
    -> Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) Data.Text.Internal.Text #)
  {- Arity: 3, Strictness: <L,A><S,1*U><S,U>, Inline: [0] -}
302763e805b3e3ed42fc16cbec32bb30
  $wexpandL ::
    Main.Env
    -> Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) [Data.Text.Internal.Text] #)
  {- Arity: 3, Strictness: <L,A><S,1*U><S,U>, Inline: [0] -}
dd39af0a94b5b15821e7b95382a4d448
  $wformatUsage ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Data.Text.Internal.Text]
    -> Data.Text.Internal.Text
  {- Arity: 4, Strictness: <L,U><L,U><L,U><S,1*U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   (w :: [Data.Text.Internal.Text]) ->
                 case w of wild {
                   [] -> Main.formatUsage5
                   : x3 xs
                   -> let {
                        n13 :: Data.Text.Internal.Text = Data.Text.Internal.Text ww ww1 ww2
                      } in
                      Data.Text.concat
                        (GHC.Types.:
                           @ Data.Text.Internal.Text
                           (Data.Text.concat
                              (GHC.Types.:
                                 @ Data.Text.Internal.Text
                                 Main.formatUsage3
                                 (Main.defaultFuncs_$sgo1
                                    n13
                                    (GHC.Types.:
                                       @ Data.Text.Internal.Text
                                       x3
                                       (GHC.Types.[] @ Data.Text.Internal.Text)))))
                           (Main.formatUsage_go1
                              (GHC.Base.map
                                 @ Data.Text.Internal.Text
                                 @ Data.Text.Internal.Text
                                 (\ (x4 :: Data.Text.Internal.Text) ->
                                  case x4 of x5 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                                  Data.Text.concat
                                    (GHC.Types.:
                                       @ Data.Text.Internal.Text
                                       Main.formatUsage1
                                       (Main.defaultFuncs_$sgo1
                                          n13
                                          (GHC.Types.:
                                             @ Data.Text.Internal.Text
                                             x5
                                             (GHC.Types.[] @ Data.Text.Internal.Text)))) })
                                 xs))) }) -}
d23a28b44c4edb9e381c75e627196fd1
  $wgetSubOpt ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) (Main.Val, [Main.Val]) #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,U><L,1*U><L,U>,
     Inline: [0] -}
4fc95f0f636e598bb0e375cf41a312ad
  $wgetVar ::
    [Main.Val]
    -> [Main.Val]
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> Main.VarT
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Val #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U><S,U><L,U>,
     Inline: [0] -}
75fdf12f393d86bc745c0cee66ed4f7e
  $wgetVarMaybe ::
    [Main.Val]
    -> [Main.Val]
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> Main.VarT
    -> GHC.Base.Maybe Main.Val
  {- Arity: 7,
     Strictness: <L,U><L,U><L,1*U><L,1*U><L,1*U><L,1*U><S,1*U>,
     Inline: [0],
     Unfolding: (\ (ww :: [Main.Val])
                   (ww1 :: [Main.Val])
                   (ww2 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                   (ww3 :: GHC.Prim.MutVar#
                             GHC.Prim.RealWorld
                             (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val))
                   (ww4 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo)
                   (ww5 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int)
                   (w :: Main.VarT) ->
                 case w of wild {
                   Main.VarN t
                   -> case t of ww6 { Data.Text.Internal.Text ww7 ww8 ww9 ->
                      Main.$w$slookup @ Main.Val ww7 ww8 ww9 ww2 }
                   Main.VarA dt61
                   -> case dt61 of ds {
                        DEFAULT
                        -> case Main.$wgreater @ Main.Val ds ww1 of wild1 {
                             GHC.Types.False -> GHC.Base.Nothing @ Main.Val
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ Main.Val
                                  (GHC.List.$w!! @ Main.Val ww1 (GHC.Prim.-# ds 1#)) }
                        -1# -> GHC.Base.Just @ Main.Val (Main.List ww1) }
                   Main.VarR dt61
                   -> case dt61 of ds {
                        DEFAULT
                        -> case Main.$wgreater @ Main.Val ds ww of wild1 {
                             GHC.Types.False -> GHC.Base.Nothing @ Main.Val
                             GHC.Types.True
                             -> GHC.Base.Just
                                  @ Main.Val
                                  (GHC.List.$w!! @ Main.Val ww (GHC.Prim.-# ds 1#)) }
                        -1# -> GHC.Base.Just @ Main.Val (Main.List ww)
                        0#
                        -> Main.getVarMaybe_$s$wgetVarMaybe
                             1#
                             ww5
                             ww4
                             ww3
                             ww2
                             ww1
                             ww } }) -}
becd531bd61a786a931fcb253aedf59c
  $wgo ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 9,
     Strictness: <L,U><L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,C(C1(C1(U)))><L,1*C1(C1(C1(U)))>,
     Inline: [0] -}
cfa6f114b8eb9c37f7643af402ed94a2
  $wgo1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 9,
     Strictness: <L,U><L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,C(C1(C1(U)))><L,1*C1(C1(C1(U)))>,
     Inline: [0] -}
8293221011fd73408d6d94c440383350
  $wgo2 ::
    Data.HashMap.Array.Array
      (Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Foreign.C.Types.CInt)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.IO [System.Posix.Signals.Handler]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Posix.Signals.Handler] #)
  {- Arity: 5, Strictness: <L,1*U(U)><S,U><S,U><L,1*C1(U(U,U))><S,U>,
     Inline: [0] -}
218d45ce44a9cf2c41c950aeb161d06f
  $wgo3 ::
    Data.HashMap.Array.Array
      (Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Foreign.C.Types.CInt)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Types.IO [System.Posix.Signals.Handler]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Posix.Signals.Handler] #)
  {- Arity: 5, Strictness: <L,1*U(U)><S,U><S,U><L,1*C1(U(U,U))><S,U>,
     Inline: [0] -}
777b33b3b8fbd251b63bcadf66f63f9f
  $wgo4 :: [GHC.Types.Double] -> GHC.Prim.Double# -> Main.Val
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,U>m1,
     Inline: [0] -}
24c765147bc1ad1024a7c5bace1c2bdd
  $wgo5 ::
    ([Main.Val] -> [Main.Val])
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (([Main.Val] -> [Main.Val])
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (([Main.Val] -> [Main.Val])
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U(U(U,U,U),U),U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))>,
     Inline: [0] -}
4cb0d1ed5cc49722ef0c7ea22fbe0b5e
  $wgreater :: GHC.Prim.Int# -> [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,U><S,1*U>, Inline: [0] -}
cb8bcfdecf989b8b935fa46e7432eead
  $wk ::
    GHC.Integer.Type.Integer
    -> forall b.
       GHC.Prim.ByteArray#
       -> GHC.Prim.Int#
       -> GHC.Prim.Int#
       -> Text.Megaparsec.Pos.SourcePos
       -> [Text.Megaparsec.Pos.SourcePos]
       -> GHC.Prim.Int#
       -> Text.Megaparsec.Pos.Pos
       -> (Data.Scientific.Scientific
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Data.Scientific.Scientific
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 10,
     Strictness: <S,U><S,U><S,U><S,U><L,U(U,U,U)><L,U><S,U><L,U(U)><L,C(C1(C1(U)))><L,C(C1(C1(U)))>,
     Inline: [0] -}
da9353b15517b17300a5674802aa75cc
  $wk1 ::
    Main.Val
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> ([Main.Val]
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> ([Main.Val]
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <L,U><L,U(U,U(U(U,U,U),U),U,U)><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))>,
     Inline: [0],
     Unfolding: (\ (w :: Main.Val)
                   @ b
                   (w1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w2 :: [Main.Val]
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: [Main.Val]
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 Main.$wgo5
                   (GHC.Base.id @ [Main.Val])
                   @ b
                   w1
                   (\ (x3 :: [Main.Val] -> [Main.Val])
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    w2
                      (GHC.Types.: @ Main.Val w (x3 (GHC.Types.[] @ Main.Val)))
                      s'
                      hs5)
                   w3
                   (\ (x3 :: [Main.Val] -> [Main.Val])
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    w4
                      (GHC.Types.: @ Main.Val w (x3 (GHC.Types.[] @ Main.Val)))
                      s'
                      hs5)) -}
1f6ad69daf8a1a659284d088a3c1048e
  $wlvl ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#) ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# ww1 ww2
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww3 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww3 end of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexWord16Array# ww ww3 of r# { DEFAULT ->
                          case GHC.Prim.geWord# r# 55296## of lwild1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww3 1#))
                            1#
                            -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww3 1#))
                                 1#
                                 -> case GHC.Prim.indexWord16Array#
                                           ww
                                           (GHC.Prim.+# ww3 1#) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                     10#)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                               65536#)))
                                      ($wunfold (GHC.Prim.+# ww3 2#)) } } } }
                       1# -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 $wunfold ww1) -}
2cf8c95829a02b7333fbe10d50948c24
  $wmkPath ::
    GHC.Base.String
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.String
  {- Arity: 7, Strictness: <L,1*U><L,A><L,A><L,A><L,U><S,U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Base.String)
                   (ww1 :: GHC.Prim.MutVar#
                             GHC.Prim.RealWorld
                             (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val))
                   (ww2 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo)
                   (ww3 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int)
                   (ww4 :: GHC.Prim.ByteArray#)
                   (ww5 :: GHC.Prim.Int#)
                   (ww6 :: GHC.Prim.Int#) ->
                 let {
                   end :: GHC.Prim.Int# = GHC.Prim.+# ww5 ww6
                 } in
                 letrec {
                   $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                     {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                   = \ (ww7 :: GHC.Prim.Int#) ->
                     case GHC.Prim.>=# ww7 end of lwild {
                       DEFAULT
                       -> case GHC.Prim.indexWord16Array# ww4 ww7 of r# { DEFAULT ->
                          case GHC.Prim.geWord# r# 55296## of lwild1 {
                            DEFAULT
                            -> GHC.Types.:
                                 @ GHC.Types.Char
                                 (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                 ($wunfold (GHC.Prim.+# ww7 1#))
                            1#
                            -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww7 1#))
                                 1#
                                 -> case GHC.Prim.indexWord16Array#
                                           ww4
                                           (GHC.Prim.+# ww7 1#) of r#1 { DEFAULT ->
                                    GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C#
                                         (GHC.Prim.chr#
                                            (GHC.Prim.+#
                                               (GHC.Prim.+#
                                                  (GHC.Prim.uncheckedIShiftL#
                                                     (GHC.Prim.-# (GHC.Prim.word2Int# r#) 55296#)
                                                     10#)
                                                  (GHC.Prim.-# (GHC.Prim.word2Int# r#1) 56320#))
                                               65536#)))
                                      ($wunfold (GHC.Prim.+# ww7 2#)) } } } }
                       1# -> GHC.Types.[] @ GHC.Types.Char }
                 } in
                 case $wunfold ww5 of path {
                   [] -> case GHC.List.badHead ret_ty GHC.Base.String of {}
                   : x3 ds1
                   -> case x3 of wild { GHC.Types.C# x4 ->
                      case x4 of wild1 {
                        DEFAULT
                        -> case GHC.List.$wspan
                                  @ GHC.Types.Char
                                  System.FilePath.Posix.isPathSeparator
                                  path of ww7 { (#,#) ww8 ww9 ->
                           case ww8 of wild2 {
                             []
                             -> System.FilePath.Posix.normalise
                                  (System.FilePath.Posix.joinDrive ww path)
                             : ds2 ds3 -> System.FilePath.Posix.normalise path } }
                        '/'# -> System.FilePath.Posix.normalise path } } }) -}
563fdc088160026bfe8af03d1299209a
  $wmod' :: GHC.Prim.Double# -> GHC.Prim.Double# -> GHC.Prim.Double#
  {- Arity: 2, Strictness: <S,U><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.Double#) (ww1 :: GHC.Prim.Double#) ->
                 case GHC.Integer.Type.decodeDoubleInteger
                        ww1 of ds1 { (#,#) ipv ipv1 ->
                 let {
                   $j :: GHC.Integer.Type.Integer -> GHC.Prim.Double#
                     <join 1> {- Arity: 1, Strictness: <S,U> -}
                   = \ (ds2 :: GHC.Integer.Type.Integer)[OneShot] ->
                     case GHC.Integer.Type.eqInteger# ds2 Main.mod'_f of wild {
                       DEFAULT
                       -> case GHC.Integer.Type.decodeDoubleInteger
                                 ww of ds3 { (#,#) ipv2 ipv3 ->
                          case GHC.Prim.<# ipv3 0# of lwild {
                            DEFAULT
                            -> GHC.Integer.Type.doubleFromInteger
                                 (GHC.Integer.Type.modInteger
                                    (GHC.Integer.Type.shiftLInteger ipv2 ipv3)
                                    ds2)
                            1#
                            -> let {
                                 s :: GHC.Prim.Int# = GHC.Prim.negateInt# ipv3
                               } in
                               case GHC.Prim.># s 52# of lwild1 {
                                 DEFAULT
                                 -> case GHC.Integer.Type.integerToInt ipv2 of n13 { DEFAULT ->
                                    GHC.Integer.Type.doubleFromInteger
                                      (GHC.Integer.Type.modInteger
                                         (GHC.Integer.Type.smallInteger
                                            (GHC.Prim.uncheckedIShiftRA# n13 s))
                                         ds2) }
                                 1#
                                 -> case GHC.Integer.Type.ltInteger# ipv2 Main.mod'_f of wild1 {
                                      DEFAULT
                                      -> GHC.Integer.Type.doubleFromInteger
                                           (GHC.Integer.Type.modInteger Main.mod'_f ds2)
                                      1#
                                      -> GHC.Integer.Type.doubleFromInteger
                                           (GHC.Integer.Type.modInteger Main.mod'3 ds2) } } } }
                       1# -> case GHC.Real.divZeroError ret_ty GHC.Prim.Double# of {} }
                 } in
                 case GHC.Prim.<# ipv1 0# of lwild {
                   DEFAULT -> $j (GHC.Integer.Type.shiftLInteger ipv ipv1)
                   1#
                   -> let {
                        s :: GHC.Prim.Int# = GHC.Prim.negateInt# ipv1
                      } in
                      case GHC.Prim.># s 52# of lwild1 {
                        DEFAULT
                        -> case GHC.Integer.Type.integerToInt ipv of n13 { DEFAULT ->
                           $j
                             (GHC.Integer.Type.smallInteger
                                (GHC.Prim.uncheckedIShiftRA# n13 s)) }
                        1#
                        -> case GHC.Integer.Type.ltInteger# ipv Main.mod'_f of wild1 {
                             DEFAULT -> $j Main.mod'_f 1# -> $j Main.mod'3 } } } }) -}
44cbfc0a0683c129fbe87aa9c9c832e3
  $wmultiDefine ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 let {
                   t :: Data.Text.Internal.Text = Data.Text.Internal.Text ww ww1 ww2
                 } in
                 let {
                   lvl531 :: Main.Custom = Main.MultiDefine t
                 } in
                 let {
                   lvl532 :: GHC.Base.Maybe Main.Custom
                   = GHC.Base.Just @ Main.Custom lvl531
                 } in
                 Text.Megaparsec.Internal.$fMonadStatestParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.ParseEnv
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   @ Main.Custom
                   Text.Megaparsec.Stream.$fStreamText0
                   (Main.$s$fMonadStatesStateT0 @ Main.ParseEnv)
                   @ ()
                   (\ (s1 :: Main.ParseEnv) ->
                    (GHC.Tuple.(),
                     case s1 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                     Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 lvl532 ipv7 }))
                   @ b
                   w
                   w1
                   w2
                   w3
                   w4) -}
f1e688a1f992234b389a2fe7bf7e9c9f
  $wnotDefined ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 let {
                   t :: Data.Text.Internal.Text = Data.Text.Internal.Text ww ww1 ww2
                 } in
                 let {
                   lvl531 :: Main.Custom = Main.NotDefined t
                 } in
                 let {
                   lvl532 :: GHC.Base.Maybe Main.Custom
                   = GHC.Base.Just @ Main.Custom lvl531
                 } in
                 Text.Megaparsec.Internal.$fMonadStatestParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.ParseEnv
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   @ Main.Custom
                   Text.Megaparsec.Stream.$fStreamText0
                   (Main.$s$fMonadStatesStateT0 @ Main.ParseEnv)
                   @ ()
                   (\ (s1 :: Main.ParseEnv) ->
                    (GHC.Tuple.(),
                     case s1 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                     Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 lvl532 ipv7 }))
                   @ b
                   w
                   w1
                   w2
                   w3
                   w4) -}
3a4148a73208a80ba14358a66ffab18c
  $wnotLiteral ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 let {
                   t :: Data.Text.Internal.Text = Data.Text.Internal.Text ww ww1 ww2
                 } in
                 let {
                   lvl531 :: Main.Custom = Main.NotLiteral t
                 } in
                 let {
                   lvl532 :: GHC.Base.Maybe Main.Custom
                   = GHC.Base.Just @ Main.Custom lvl531
                 } in
                 Text.Megaparsec.Internal.$fMonadStatestParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.ParseEnv
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   @ Main.Custom
                   Text.Megaparsec.Stream.$fStreamText0
                   (Main.$s$fMonadStatesStateT0 @ Main.ParseEnv)
                   @ ()
                   (\ (s1 :: Main.ParseEnv) ->
                    (GHC.Tuple.(),
                     case s1 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                     Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 lvl532 ipv7 }))
                   @ b
                   w
                   w1
                   w2
                   w3
                   w4) -}
819b33bb730af59fdad9cadedb0f23f4
  $wnotPureFunc ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 let {
                   t :: Data.Text.Internal.Text = Data.Text.Internal.Text ww ww1 ww2
                 } in
                 let {
                   lvl531 :: Main.Custom = Main.NotPureFunc t
                 } in
                 let {
                   lvl532 :: GHC.Base.Maybe Main.Custom
                   = GHC.Base.Just @ Main.Custom lvl531
                 } in
                 Text.Megaparsec.Internal.$fMonadStatestParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.ParseEnv
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   @ Main.Custom
                   Text.Megaparsec.Stream.$fStreamText0
                   (Main.$s$fMonadStatesStateT0 @ Main.ParseEnv)
                   @ ()
                   (\ (s1 :: Main.ParseEnv) ->
                    (GHC.Tuple.(),
                     case s1 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                     Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 lvl532 ipv7 }))
                   @ b
                   w
                   w1
                   w2
                   w3
                   w4) -}
22269b1ddf9b8761c4c5d0ce077d54bf
  $woptHead ::
    [Main.Val]
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> (# Data.Text.Internal.Text, Data.Text.Internal.Text,
          [Main.Val] #)
  {- Arity: 4, Strictness: <S,1*U><L,U><L,U><S,U>, Inline: [0] -}
861f35c73488bc3324d1a9594d18064e
  $wouter ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
a4da2f943f7878aae6ba736f64f4e9ca
  $wouter1 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
210696e65bd8fae7299a51e3066b4445
  $wouter2 ::
    GHC.Prim.MutableByteArray# GHC.Prim.RealWorld
    -> GHC.Prim.Int#
    -> [GHC.Types.Char]
    -> GHC.Prim.Int#
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Text.Internal.Text #)
  {- Arity: 5, Strictness: <L,U><S,U><S,1*U><S,U><S,U>,
     Inline: [0] -}
7589164a173d12a09a883c1c65d7763b
  $wp ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 10,
     Strictness: <L,U><L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,C(C1(C1(U)))><L,U><L,1*C1(C1(U))>,
     Inline: [0] -}
225e960c1d4e2b5916a3c9778de0f4e6
  $wp1 ::
    Data.Text.Internal.Text
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U(U,U,U)><L,U(U,U,U)><L,U><L,U><L,U(U)><L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0] -}
e39d6939354e3e91d64c1b69869809b5
  $wp2 ::
    Data.Text.Internal.Text
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U(U,U,U)><L,U(U,U,U)><L,U><L,U><L,U(U)><L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0] -}
6ff87380a57b5e7adeb9a03daef982e7
  $wp3 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 10,
     Strictness: <L,U><L,U><S,U><L,U(U,U,U)><L,U><L,U><L,U(U)><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))><L,1*C1(C1(U))>,
     Inline: [0] -}
68378b22670a69a13b5e9414c235f587
  $wparens ::
    Data.Text.Internal.Text
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U(U,U,U)><L,U(U,U,U)><L,U><L,U><L,U(U)><L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0] -}
1ca7f72904c473241a998df61b811d52
  $wparens1 ::
    Data.Text.Internal.Text
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U(U,U,U)><L,U(U,U,U)><L,U><L,U><L,U(U)><L,1*C1(C1(C1(U)))><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0] -}
b94058cf23d880ef89a7e49e4cbbccdb
  $wparseRedirect ::
    Data.Text.Internal.Text
    -> Text.Megaparsec.Pos.SourcePos
    -> [Text.Megaparsec.Pos.SourcePos]
    -> GHC.Prim.Int#
    -> Text.Megaparsec.Pos.Pos
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 9,
     Strictness: <L,U(U,U,U)><L,U(U,U,U)><L,U><L,U><L,U(U)><L,U><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Inline: [0] -}
4c4a0fde5c1d16feac1ea1c69890e858
  $wpoly_go1 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><S,U><S,U>, Inline: [0] -}
850de9acb30544261e5046ace6a67370
  $wpoly_go2 ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Array.Array#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text v)
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><S,U><S,U>, Inline: [0] -}
9bfc3f214a1ff3bdc3a2bf67ad2d90c9
  $wpoly_go3 ::
    GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 3, Strictness: <L,U><S,U><S,1*U>, Inline: [0] -}
103b5ee3e7f927a07f36b03913a6dfbd
  $wpoly_go4 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 6, Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
c8b33e86e54ac12e9ea91452d9549dd9
  $wpoly_go5 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
  {- Arity: 7, Strictness: <S,U><L,U><L,U><L,U><L,U><L,U><S,1*U>,
     Inline: [0] -}
b770366375cdf35c17373face834e323
  $wpoly_go6 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Base.Maybe v
  {- Arity: 6, HasNoCafRefs,
     Strictness: <L,U><L,U><L,U><L,U><L,U><S,1*U>, Inline: [0] -}
2b2b8474618cb03f4908ba15fcc4faed
  $wpoly_go7 ::
    GHC.Prim.Word#
    -> GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> v
    -> GHC.Prim.Int#
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text v
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.HashMap.Base.HashMap Data.Text.Internal.Text v #)
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,U><L,U><S,1*U><L,U>,
     Inline: [0] -}
b3c0ecde513b965523d33b6784372e6c
  $wsearchfn ::
    GHC.Prim.MutVar#
      GHC.Prim.RealWorld
      (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Console.Haskeline.Completion.Completion] #)
  {- Arity: 5, Strictness: <S,U><S,1*U><S,1*U><S,1*U><S,U>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld
                            (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val))
                   (ww1 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo)
                   (ww2 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int)
                   (w :: GHC.Base.String)
                   (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of s { DEFAULT ->
                 case Main.$wwordlist ww ww1 ww2 w1 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of w2 { DEFAULT ->
                 (# ipv,
                    letrec {
                      go16 :: [[GHC.Types.Char]]
                              -> [System.Console.Haskeline.Completion.Completion]
                        {- Arity: 1, Strictness: <S,1*U> -}
                      = \ (ds :: [[GHC.Types.Char]]) ->
                        case ds of wild {
                          [] -> GHC.Types.[] @ System.Console.Haskeline.Completion.Completion
                          : y ys
                          -> case Data.OldList.isPrefixOf
                                    @ GHC.Types.Char
                                    GHC.Classes.$fEqChar
                                    s
                                    y of wild1 {
                               GHC.Types.False -> go16 ys
                               GHC.Types.True
                               -> GHC.Types.:
                                    @ System.Console.Haskeline.Completion.Completion
                                    (System.Console.Haskeline.Completion.simpleCompletion y)
                                    (go16 ys) } }
                    } in
                    go16 w2 #) } } }) -}
492040879ac5fa8153dfafd99cf8ee05
  $wsetDefVar ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 8,
     Strictness: <L,U><L,U><L,U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.ByteArray#)
                   (ww1 :: GHC.Prim.Int#)
                   (ww2 :: GHC.Prim.Int#)
                   @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 Text.Megaparsec.Internal.$fMonadStatestParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.ParseEnv
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   @ Main.Custom
                   Text.Megaparsec.Stream.$fStreamText0
                   (Main.$s$fMonadStatesStateT0 @ Main.ParseEnv)
                   @ ()
                   (\ (s1 :: Main.ParseEnv) ->
                    (GHC.Tuple.(),
                     case s1 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                     case Main.$w$sinsert
                            @ ()
                            ww
                            ww1
                            ww2
                            GHC.Tuple.()
                            ipv5
                              `cast`
                            (Data.HashSet.N:HashSet[0]
                                 <Data.Text.Internal.Text>_N) of nt { DEFAULT ->
                     Main.ParseEnv
                       ipv
                       ipv1
                       ipv2
                       ipv3
                       ipv4
                       nt
                         `cast`
                       (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                       ipv6
                       ipv7 } }))
                   @ b
                   w
                   w1
                   w2
                   w3
                   w4) -}
f8de41fdf63e0fb9634c2d2d84048595
  $wunquotedCompleteFn ::
    GHC.Prim.MutVar#
      GHC.Prim.RealWorld
      (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Base.String
    -> GHC.Base.String
    -> GHC.Types.IO
         (GHC.Base.String, [System.Console.Haskeline.Completion.Completion])
  {- Arity: 5, Strictness: <L,U><L,U><L,U><S,U><L,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld
                            (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val))
                   (ww1 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo)
                   (ww2 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int)
                   (ww3 :: GHC.Base.String)
                   (ww4 :: GHC.Base.String) ->
                 let {
                   $j :: GHC.Types.IO
                           (GHC.Base.String, [System.Console.Haskeline.Completion.Completion])
                     <join 0>
                   = System.Console.Haskeline.Completion.$wcompleteWordWithPrev
                       @ GHC.Types.IO
                       GHC.Base.$fMonadIO
                       Main.completeFn9
                       Main.completeFn7
                       (\ (ds :: GHC.Base.String)[OneShot]
                          (eta :: GHC.Base.String)[OneShot]
                          (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        Main.$wsearchfn ww ww1 ww2 eta eta1)
                         `cast`
                       (<GHC.Base.String>_R
                        ->_R <GHC.Base.String>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <[System.Console.Haskeline.Completion.Completion]>_R))
                       ww3
                 } in
                 case Data.OldList.words
                        (Main.completeFn_isArg'
                           (GHC.Types.[] @ GHC.Types.Char)
                           ww3) of x3 {
                   [] -> $j
                   : ds ds1
                   -> case ds1 of wild {
                        []
                        -> case ww3 of wild1 {
                             []
                             -> case GHC.List.badHead
                                ret_ty (GHC.Types.IO
                                          (GHC.Base.String,
                                           [System.Console.Haskeline.Completion.Completion]))
                                of {}
                             : x4 ds2
                             -> case x4 of wild2 { GHC.Types.C# ds3 ->
                                case ds3 of ds4 {
                                  DEFAULT -> $j
                                  '\t'#
                                  -> System.Console.Haskeline.Completion.$wcompleteFilename
                                       @ GHC.Types.IO
                                       Control.Monad.IO.Class.$fMonadIOIO
                                       wild1
                                       ww4
                                  ' '#
                                  -> System.Console.Haskeline.Completion.$wcompleteFilename
                                       @ GHC.Types.IO
                                       Control.Monad.IO.Class.$fMonadIOIO
                                       wild1
                                       ww4 } } }
                        : ipv ipv1
                        -> System.Console.Haskeline.Completion.$wcompleteFilename
                             @ GHC.Types.IO
                             Control.Monad.IO.Class.$fMonadIOIO
                             ww3
                             ww4 } }) -}
3685f307f2661f14252fd3b0cb920cab
  $wusageShow ::
    GHC.Prim.ByteArray#
    -> GHC.Prim.Int# -> GHC.Prim.Int# -> GHC.Base.String
  {- Arity: 3, Strictness: <S,U><S,U><S,U>, Inline: [0] -}
4f594104ab5fde74d199965e814d1b98
  $wwordlist ::
    GHC.Prim.MutVar#
      GHC.Prim.RealWorld
      (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 4, Strictness: <L,U><L,A><L,A><S,U>, Inline: [0],
     Unfolding: (\ (ww :: GHC.Prim.MutVar#
                            GHC.Prim.RealWorld
                            (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val))
                   (ww1 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo)
                   (ww2 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int)
                   (w :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case (GHC.Magic.noinline
                         @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                         GHC.IO.Encoding.getForeignEncoding)
                        `cast`
                      (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                        w of ds1 { (#,#) ipv ipv1 ->
                 case GHC.Foreign.charIsRepresentable3
                        @ (GHC.Base.Maybe GHC.Base.String)
                        ipv1
                        Main.completeFn5
                        System.Environment.getEnv3
                          `cast`
                        (<Foreign.C.String.CString>_R
                         ->_R Sym (GHC.Types.N:IO[0] <GHC.Base.Maybe GHC.Base.String>_R))
                        ipv of ds2 { (#,#) ipv2 ipv3 ->
                 case ipv3 of wild {
                   GHC.Base.Nothing
                   -> case System.Environment.getEnv2 ipv2 Main.completeFn5
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
                      of {}
                   GHC.Base.Just x3
                   -> case Main.completeFn4
                             (Data.List.Split.Internals.$wpostProcess
                                @ GHC.Types.Char
                                Data.List.Split.Internals.Drop
                                Data.List.Split.Internals.KeepBlankFields
                                Data.List.Split.Internals.KeepBlank
                                Data.List.Split.Internals.KeepBlank
                                (Data.List.Split.Internals.splitInternal
                                   @ GHC.Types.Char
                                   Main.completeFn1
                                     `cast`
                                   (Sym (Data.List.Split.Internals.N:Delimiter[0]
                                             <GHC.Types.Char>_R))
                                   x3))
                             ipv2 of ds4 { (#,#) ipv4 ipv5 ->
                      case ipv5 of c { DEFAULT ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                             ww
                             ipv4 of ds5 { (#,#) ipv6 ipv7 ->
                      case ipv7 of funcs1 { DEFAULT ->
                      (# ipv6,
                         let {
                           z :: [[GHC.Types.Char]]
                           = case funcs1 of wild1 {
                               Data.HashMap.Base.Empty -> GHC.Types.[] @ [GHC.Types.Char]
                               Data.HashMap.Base.BitmapIndexed dt61 dt62
                               -> Main.completeFn_$s$wgo3
                                    (GHC.Types.[] @ [GHC.Types.Char])
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text Main.Val)
                                       dt62)
                                    dt62
                               Data.HashMap.Base.Leaf dt61 dt62 dt63
                               -> case dt62 of ww3 { Data.Text.Internal.Text ww4 ww5 ww6 ->
                                  GHC.Types.:
                                    @ [GHC.Types.Char]
                                    (Main.$wlvl ww4 ww5 ww6)
                                    (GHC.Types.[] @ [GHC.Types.Char]) }
                               Data.HashMap.Base.Full dt61
                               -> Main.completeFn_$s$wgo1
                                    (GHC.Types.[] @ [GHC.Types.Char])
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text Main.Val)
                                       dt61)
                                    dt61
                               Data.HashMap.Base.Collision dt61 dt62
                               -> Main.completeFn_$s$wgo2
                                    (GHC.Types.[] @ [GHC.Types.Char])
                                    0#
                                    (GHC.Prim.sizeofSmallArray#
                                       @ (Data.HashMap.Base.Leaf Data.Text.Internal.Text Main.Val)
                                       dt62)
                                    dt62 }
                         } in
                         letrec {
                           go16 :: [[GHC.IO.FilePath]] -> [[GHC.Types.Char]]
                             {- Arity: 1, Strictness: <S,1*U> -}
                           = \ (ds :: [[GHC.IO.FilePath]]) ->
                             case ds of wild1 {
                               [] -> z : y ys -> GHC.Base.++ @ [GHC.Types.Char] y (go16 ys) }
                         } in
                         Data.OldList.nubBy
                           @ GHC.IO.FilePath
                           GHC.Base.eqString
                           (go16 c) #) } } } } } } }) -}
61d9aba738a7367b1479d90fc7413189
  data Cache
    = NoCache
    | Cache {clsrId :: {-# UNPACK #-}GHC.Types.Int, cache :: !Main.Val}
    | NoFunc
94db68e1495b515fa2f4d2f653a3d700
  data Custom
    = NotPureFunc !Data.Text.Internal.Text
    | MultiDefine !Data.Text.Internal.Text
    | NotDefined !Data.Text.Internal.Text
    | NotLiteral !Data.Text.Internal.Text
    | InvalidFormat !GHC.Base.String
61d9aba738a7367b1479d90fc7413189
  data Env
    = Env {status :: !GHC.Types.Bool,
           ret :: ![Main.Val],
           args :: ![Main.Val],
           vars :: !(Data.HashMap.Base.HashMap
                       Data.Text.Internal.Text Main.Val),
           inn :: !GHC.IO.Handle.Types.Handle,
           out :: !GHC.IO.Handle.Types.Handle,
           err :: !GHC.IO.Handle.Types.Handle,
           flags :: !Main.Flags,
           parenv :: !Main.ParseEnv,
           funID :: {-# UNPACK #-}GHC.Types.Int,
           dir :: !GHC.Base.String,
           funcs :: ! {-# UNPACK #-}(GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                                             Data.Text.Internal.Text
                                                             Main.Val>_N)(GHC.IORef.IORef
                                                                            (Data.HashMap.Base.HashMap
                                                                               Data.Text.Internal.Text
                                                                               Main.Val)),
           thread :: ! {-# UNPACK #-}(GHC.IORef.N:IORef[0] <Main.ThreadInfo>_N)(GHC.IORef.IORef
                                                                                  Main.ThreadInfo),
           idSrc :: ! {-# UNPACK #-}(GHC.IORef.N:IORef[0] <GHC.Types.Int>_N)(GHC.IORef.IORef
                                                                               GHC.Types.Int)}
61d9aba738a7367b1479d90fc7413189
  type role Eval nominal
  newtype Eval a
    = Eval (Control.Monad.Trans.Except.ExceptT
              ([Main.Val], Main.ShError) GHC.Types.IO a)
6f7631d31603ae03d30f0b14d9f7c2d7
  data Flags
    = Flags {interactiveMode :: !GHC.Types.Bool,
             ignoreInterpreterError :: !GHC.Types.Bool}
078659143a16e18669f77fa566915579
  data JobInfo
    = Threaded {-# UNPACK #-}GHC.Conc.Sync.ThreadId
               {-# UNPACK #-}(GHC.MVar.MVar Main.Env)
    | Forked ! {-# UNPACK #-}(System.Posix.Types.N:CPid[0])System.Posix.Types.ProcessID
8212f2bcb50e27a64552e8b3559c70e8
  data LambdaType = Normal | NoArgs | Expand | Purely
61d9aba738a7367b1479d90fc7413189
  data ParseEnv
    = ParseEnv {allocCount :: {-# UNPACK #-}GHC.Types.Int,
                addArg :: !(GHC.Base.Maybe Main.Val),
                defFn :: !(Data.HashSet.HashSet Data.Text.Internal.Text),
                defPureFn :: !(Data.HashSet.HashSet Data.Text.Internal.Text),
                unDefPureFn :: !(Data.HashSet.HashSet Data.Text.Internal.Text),
                defVar :: !(Data.HashSet.HashSet Data.Text.Internal.Text),
                isErr :: !(GHC.Base.Maybe Main.Custom),
                parseFlags :: !Main.Flags}
0c7d0998d9e17ce2a7d35a2c83304bb1
  type Parser =
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
    :: * -> *
61d9aba738a7367b1479d90fc7413189
  data ShError
    = Returned !GHC.Types.Bool
    | Exited !GHC.Types.Bool
    | Broken !GHC.Types.Bool
    | SomeError !GHC.Base.String
    | NumArgs !GHC.Base.String {-# UNPACK #-}GHC.Types.Int
    | TypeMismatch !GHC.Base.String !Main.Val
    | UnboundVar !GHC.Base.String
    | Internal !GHC.Base.String
61d9aba738a7367b1479d90fc7413189
  data ThreadInfo
    = ThreadInfo {tid :: {-# UNPACK #-}GHC.Conc.Sync.ThreadId,
                  exitMvar :: {-# UNPACK #-}(GHC.MVar.MVar Main.Env),
                  cmdMvar :: !(GHC.Base.Maybe (GHC.MVar.MVar ())),
                  exitTrap :: !Main.Val}
61d9aba738a7367b1479d90fc7413189
  data Val
    = Float {-# UNPACK #-}GHC.Types.Double
    | Str !(GHC.Base.Maybe (GHC.IORef.IORef Main.Cache))
          !Data.Text.Internal.Text
    | Bool !GHC.Types.Bool
    | FD {-# UNPACK #-}GHC.Types.Word
    | VarM !Main.VarT
    | Var !Main.VarT
    | LinkedStr ![Main.Val]
    | Lambda !Main.LambdaType
             !Main.ParseEnv
             !(GHC.Base.Maybe Main.Env)
             !(Main.Env -> Main.Eval Main.Env)
    | List ![Main.Val]
    | Prim !Main.LambdaType
           !(Main.Env -> [Main.Val] -> Main.Eval Main.Env)
           ![Data.Text.Internal.Text]
    | PrimFS !(Main.Env -> [Main.Val] -> Main.Eval Main.Env)
    | Rd !((Main.Env -> Main.Eval Main.Env)
           -> Main.Env -> Main.Eval Main.Env)
89a4ee7ab2c4883a89869b5c92e19b27
  data VarT
    = VarN !Data.Text.Internal.Text
    | VarA {-# UNPACK #-}GHC.Types.Int
    | VarR {-# UNPACK #-}GHC.Types.Int
61d9aba738a7367b1479d90fc7413189
  addArg :: Main.ParseEnv -> GHC.Base.Maybe Main.Val
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLL),1*U(A,U,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds1 }) -}
61d9aba738a7367b1479d90fc7413189
  allocCount :: Main.ParseEnv -> GHC.Types.Int
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLL),1*U(U,A,A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 GHC.Types.I# dt61 }) -}
55a4dc6ef4c35676ee4b4f5fe92a08d3
  allocThreadInfo :: GHC.Types.IO (GHC.IORef.IORef Main.ThreadInfo)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.allocThreadInfo1
                  `cast`
                (Sym (GHC.Types.N:IO[0] <GHC.IORef.IORef Main.ThreadInfo>_R)) -}
2cdf73c0e7f908b1b323f4d8f8575051
  allocThreadInfo1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          GHC.IORef.IORef Main.ThreadInfo #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case GHC.Prim.myThreadId# s of ds { (#,#) ipv ipv1 ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Env
                        ipv of ds1 { (#,#) ipv2 ipv3 ->
                 case GHC.Prim.newMutVar#
                        @ Main.ThreadInfo
                        @ GHC.Prim.RealWorld
                        (Main.ThreadInfo
                           ipv1
                           ipv3
                           (GHC.Base.Nothing @ (GHC.MVar.MVar ()))
                           (Main.Lambda
                              Main.NoArgs
                              Main.defaultParseEnv
                              (GHC.Base.Nothing @ Main.Env)
                              (Main.$fMonadEval2 @ Main.Env)
                                `cast`
                              (<Main.Env>_R
                               ->_R Sym (GHC.Types.N:IO[0]
                                             <Data.Either.Either
                                                ([Main.Val], Main.ShError)
                                                Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                         <([Main.Val],
                                                                           Main.ShError)>_N
                                                                         <GHC.Types.IO>_R
                                                                         <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))))
                        ipv2 of ds2 { (#,#) ipv4 ipv5 ->
                 (# ipv4,
                    (GHC.STRef.STRef @ GHC.Prim.RealWorld @ Main.ThreadInfo ipv5)
                      `cast`
                    (Sym (GHC.IORef.N:IORef[0]) <Main.ThreadInfo>_N) #) } } }) -}
1b39e2d91a64c9d454b370927904b001
  and' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                Main.and'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
4cdfd65bb2fbd006395eddee687d5109
  and'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, HasNoCafRefs,
     Unfolding: (Main.and'2 GHC.Classes.&&) -}
2d0e7124b22c7bd831f2b1af5eb4d9e4
  and'2 ::
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S,1*U><C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (eta :: GHC.Types.Bool
                           -> GHC.Types.Bool -> GHC.Types.Bool)
                   (eta1 :: Main.Env -> Main.Eval Main.Env)
                   (eta2 :: Main.Env -> Main.Eval Main.Env)
                   (eta3 :: Main.Env)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of f4 { DEFAULT ->
                 case eta2 of y { DEFAULT ->
                 case eta3 of e { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (eta1 e)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta4 of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left x3 -> ds
                   Data.Either.Right y1
                   -> case y1 of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                      case (y e)
                             `cast`
                           (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                               <([Main.Val], Main.ShError)>_N
                                                               <GHC.Types.IO>_R
                                                               <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                  <Data.Either.Either
                                                                                     ([Main.Val],
                                                                                      Main.ShError)
                                                                                     Main.Env>_R))
                             ipv14 of ds11 { (#,#) ipv16 ipv17 ->
                      case ipv17 of wild2 {
                        Data.Either.Left e1 -> ds11
                        Data.Either.Right x3
                        -> case x3 of m { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                           (# ipv16,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (case f4 ds1 ipv18 of dt65 { DEFAULT ->
                                 Main.Env
                                   dt65
                                   ipv19
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv7
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13 }) #) } } } } } } } } }) -}
13509dff682016ab1ec79b30e03328bf
  andBrank :: Main.Parser a -> Main.Parser a
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.andBrank1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.Parser a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <a>_R)) -}
9cdb41a5f21866610a37e9e2e0812042
  andBrank1 ::
    Main.Parser a
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ a
                   (x3 :: Main.Parser a)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 x3
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <Main.Custom>_N
                      <Data.Text.Internal.Text>_N
                      <Control.Monad.Trans.State.Lazy.StateT
                         Main.ParseEnv GHC.Types.IO>_R
                      <a>_R)
                   @ b
                   eta
                   (\ (x4 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    case x4 of y { DEFAULT ->
                    case s' of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                    case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                    case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                    Main.$wgo
                      @ b
                      ww6
                      ww7
                      ww8
                      ww10
                      ww11
                      ww3
                      ww4
                      (\ (x5 :: ())
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta1 y s'1 hs6)
                      (\ (x5 :: ())[OneShot]
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta1
                         y
                         s'1
                         (GHC.Base.++
                            @ (Data.Set.Internal.Set
                                 (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                            hs5
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)
                            hs6
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                           `cast`
                         (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text>_N))) } } } })
                   eta2
                   (\ (x4 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    case x4 of y { DEFAULT ->
                    case s' of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                    case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                    case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                    Main.$wgo
                      @ b
                      ww6
                      ww7
                      ww8
                      ww10
                      ww11
                      ww3
                      ww4
                      (\ (x5 :: ())
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta1 y s'1 hs6)
                      (\ (x5 :: ())[OneShot]
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta3
                         y
                         s'1
                         (GHC.Base.++
                            @ (Data.Set.Internal.Set
                                 (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                            hs5
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)
                            hs6
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                           `cast`
                         (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text>_N))) } } } })
                   eta4) -}
9097b5450d194f1ff1c5d5da7a80eda8
  andSpace :: Main.Parser a -> Main.Parser a
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.andSpace1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.Parser a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <a>_R)) -}
9e81c4f70c30aba09827397864b7b539
  andSpace1 ::
    Main.Parser a
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ a
                   (x3 :: Main.Parser a)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 x3
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <Main.Custom>_N
                      <Data.Text.Internal.Text>_N
                      <Control.Monad.Trans.State.Lazy.StateT
                         Main.ParseEnv GHC.Types.IO>_R
                      <a>_R)
                   @ b
                   eta
                   (\ (x4 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    case x4 of y { DEFAULT ->
                    case s' of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                    case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                    case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                    Main.$wgo1
                      @ b
                      ww6
                      ww7
                      ww8
                      ww10
                      ww11
                      ww3
                      ww4
                      (\ (x5 :: ())
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta1 y s'1 hs6)
                      (\ (x5 :: ())[OneShot]
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta1
                         y
                         s'1
                         (GHC.Base.++
                            @ (Data.Set.Internal.Set
                                 (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                            hs5
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)
                            hs6
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                           `cast`
                         (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text>_N))) } } } })
                   eta2
                   (\ (x4 :: a)
                      (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)) ->
                    case x4 of y { DEFAULT ->
                    case s' of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                    case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                    case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                    Main.$wgo1
                      @ b
                      ww6
                      ww7
                      ww8
                      ww10
                      ww11
                      ww3
                      ww4
                      (\ (x5 :: ())
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta1 y s'1 hs6)
                      (\ (x5 :: ())[OneShot]
                         (s'1 :: Text.Megaparsec.State.State
                                   Data.Text.Internal.Text)[OneShot]
                         (hs6 :: Text.Megaparsec.Internal.Hints
                                   (Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text))[OneShot] ->
                       eta3
                         y
                         s'1
                         (GHC.Base.++
                            @ (Data.Set.Internal.Set
                                 (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                            hs5
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)
                            hs6
                              `cast`
                            (Text.Megaparsec.Internal.N:Hints[0]
                                 <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                           `cast`
                         (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token
                                      Data.Text.Internal.Text>_N))) } } } })
                   eta4) -}
61d9aba738a7367b1479d90fc7413189
  args :: Main.Env -> [Main.Val]
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLLLLLLLL),1*U(A,A,U,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds3 }) -}
c87d3ad7f15c298cfb363698d7379be0
  bool :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ Main.Env
                   (Main.Env
                      ipv
                      (GHC.Types.: @ Main.Val (Main.Bool ipv) xs1)
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13) } }) -}
2923a321b72191893bee1beeebc42ca8
  bool1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (Main.Env
                         ipv
                         (GHC.Types.: @ Main.Val (Main.Bool ipv) xs1)
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13) #) } }) -}
8fe713008fb129399986551bf23b2df5
  boolDispatch ::
    Main.Env
    -> GHC.Types.Bool -> [Main.Val] -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 5,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.boolDispatch1
                  `cast`
                (<Main.Env>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <[Main.Val]>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
480e8fa88be685e5021759eb35a0c3b9
  boolDispatch1 ::
    Main.Env
    -> GHC.Types.Bool
    -> [Main.Val]
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 5,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (b :: GHC.Types.Bool)
                   (xs :: [Main.Val])
                   (ys :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case b of b1 { DEFAULT ->
                 let {
                   $j :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> Data.Either.Either
                              ([Main.Val], Main.ShError) ([Main.Val], [Main.Val])
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                               Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                     <join 2> {- Arity: 2, Strictness: <S,U><S,1*U> -}
                   = \ (ipv14 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot]
                       (ipv15 :: Data.Either.Either
                                   ([Main.Val], Main.ShError) ([Main.Val], [Main.Val]))[OneShot] ->
                     case ipv15 of wild {
                       Data.Either.Left e1
                       -> (# ipv14,
                             Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                       Data.Either.Right x3
                       -> case x3 of wild1 { (,) xs2 ys2 ->
                          case xs2 of wild2 {
                            []
                            -> (# ipv14,
                                  Data.Either.Right @ ([Main.Val], Main.ShError) @ Main.Env env1 #)
                            : x4 xs1
                            -> case b1 of wild3 {
                                 GHC.Types.False
                                 -> case Main.boolDispatch4
                                           env1
                                           ys2
                                           ipv14 of ds1 { (#,#) ipv16 ipv17 ->
                                    case ipv17 of wild4 {
                                      Data.Either.Left e1
                                      -> (# ipv16,
                                            Data.Either.Left
                                              @ ([Main.Val], Main.ShError)
                                              @ Main.Env
                                              e1 #)
                                      Data.Either.Right x5
                                      -> case x5 of zs { DEFAULT ->
                                         (# ipv16,
                                            Data.Either.Right
                                              @ ([Main.Val], Main.ShError)
                                              @ Main.Env
                                              (case GHC.Base.++
                                                      @ Main.Val
                                                      xs1
                                                      zs of dt61 { DEFAULT ->
                                               Main.Env
                                                 GHC.Types.True
                                                 dt61
                                                 ipv2
                                                 ipv3
                                                 ipv4
                                                 ipv5
                                                 ipv6
                                                 ipv7
                                                 ipv8
                                                 ipv9
                                                 ipv10
                                                 ipv11
                                                 ipv12
                                                 ipv13 }) #) } } }
                                 GHC.Types.True
                                 -> (# ipv14,
                                       Data.Either.Right
                                         @ ([Main.Val], Main.ShError)
                                         @ Main.Env
                                         (Main.Env
                                            GHC.Types.True
                                            (GHC.Types.: @ Main.Val x4 (GHC.Types.[] @ Main.Val))
                                            ipv2
                                            ipv3
                                            ipv4
                                            ipv5
                                            ipv6
                                            ipv7
                                            ipv8
                                            ipv9
                                            ipv10
                                            ipv11
                                            ipv12
                                            ipv13) #) } } } }
                 } in
                 case xs of wild {
                   []
                   -> case ys of wild1 {
                        [] -> $j eta Main.boolDispatch2
                        : x3 xs1
                        -> case Main.boolDispatch_$svalExpand
                                  eta
                                  x3
                                  (GHC.Types.[] @ Main.Val)
                                  env1 of ds1 { (#,#) ipv14 ipv15 ->
                           case ipv15 of wild2 {
                             Data.Either.Left e1
                             -> $j
                                  ipv14
                                  (Data.Either.Left
                                     @ ([Main.Val], Main.ShError)
                                     @ ([Main.Val], [Main.Val])
                                     e1)
                             Data.Either.Right x4
                             -> case x4 of ys1 {
                                  []
                                  -> case Main.boolDispatch_$svalExpandInc
                                            ipv14
                                            xs1
                                            env1 of ds2 { (#,#) ipv16 ipv17 ->
                                     $j ipv16 ipv17 }
                                  : ipv16 ipv17
                                  -> $j
                                       ipv14
                                       (Data.Either.Right
                                          @ ([Main.Val], Main.ShError)
                                          @ ([Main.Val], [Main.Val])
                                          (ys1, xs1)) } } } }
                   : ipv14 ipv15
                   -> case ys of ds { DEFAULT ->
                      $j
                        eta
                        (Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ ([Main.Val], [Main.Val])
                           (wild, ds)) } } } }) -}
c5656f0ff1d81a281fe7851349df020d
  boolDispatch2 ::
    Data.Either.Either
      ([Main.Val], Main.ShError) ([Main.Val], [Main.Val])
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ ([Main.Val], Main.ShError)
                   @ ([Main.Val], [Main.Val])
                   Main.boolDispatch3) -}
269d42fec92dcf107e4c9ce71f3e68e6
  boolDispatch3 :: ([Main.Val], [Main.Val])
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((GHC.Types.[] @ Main.Val, GHC.Types.[] @ Main.Val)) -}
bf13daa28f6ee3afe3b5a05bfe7b5cfc
  boolDispatch4 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) [Main.Val] #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
6dc7513183be33ed7505d2e7598dc23d
  boolDispatch_$svalExpand ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> Main.Val
    -> [Main.Val]
    -> Main.Env
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) [Main.Val] #)
  {- Arity: 4,
     Strictness: <S,U><S,1*U><L,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
7cc0c60931426b11edf42efb85caf829
  boolDispatch_$svalExpandInc ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> [Main.Val]
    -> Main.Env
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) ([Main.Val], [Main.Val]) #)
  {- Arity: 3,
     Strictness: <S,U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)> -}
04e071169de30d4ddced067124869711
  brank :: Main.Parser ()
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.brank1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <()>_R)) -}
65ac8533914c6e15d67ddd4fd89613c5
  brank1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w3 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                 Main.$wgo @ b1 ww6 ww7 ww8 ww10 ww11 ww3 ww4 w1 w3 } } }) -}
a224713209bca09706588dad374ee57e
  brankAnd :: Main.Parser a -> Main.Parser a
  {- Arity: 6,
     Strictness: <S,1*U><S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.brankAnd1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.Parser a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <a>_R)) -}
4e24acdfe607e4047f57f448e7b11573
  brankAnd1 ::
    Main.Parser a
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S,1*U><S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ a
                   (x3 :: Main.Parser a)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 case x3
                        `cast`
                      (Text.Megaparsec.Internal.N:ParsecT[0]
                           <Main.Custom>_N
                           <Data.Text.Internal.Text>_N
                           <Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO>_R
                           <a>_R) of nt { DEFAULT ->
                 case eta of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                 Main.$wgo
                   @ b
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww3
                   ww4
                   (\ (x4 :: ())
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    nt
                      @ b
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ a
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta1)
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta2))
                   (\ (x4 :: ())[OneShot]
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    nt
                      @ b
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ a
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta3)
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta4)) } } } }) -}
e40685f9c1f92926edaba47ab5c00be1
  break' :: Main.Env -> [Main.Val] -> Main.Eval a
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLL),1*U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.break'1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
6a6db987f628e2ca5b79867de18da895
  break'1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLL),1*U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Left
                      @ ([Main.Val], Main.ShError)
                      @ a
                      (xs1, Main.Broken ipv) #) } }) -}
caaecd7d674a223a032b6011669c50b9
  breakF :: p -> [Main.Val] -> Main.Eval a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.breakF1
                  `cast`
                (forall (p6 :: <*>_N) (a :: <*>_N).
                 <p6>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
e8f1c1ea2a962041ca28cb7aeb3b05c4
  breakF1 ::
    p
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ p6
                   @ a
                   (env :: p6)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { DEFAULT ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Left
                      @ ([Main.Val], Main.ShError)
                      @ a
                      (xs1, Main.breakF2) #) } }) -}
1ed232a83e0df7518df0a3531812c494
  breakF2 :: Main.ShError
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Main.Broken GHC.Types.False) -}
ddee9a627acb2d5a96224bbc15365da0
  breakT :: p -> [Main.Val] -> Main.Eval a
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.breakT1
                  `cast`
                (forall (p6 :: <*>_N) (a :: <*>_N).
                 <p6>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
3b92172df02ab87d54ec03ea5bc28a67
  breakT1 ::
    p
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ p6
                   @ a
                   (env :: p6)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { DEFAULT ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Left
                      @ ([Main.Val], Main.ShError)
                      @ a
                      (xs1, Main.breakT2) #) } }) -}
cb1d9521d0d0cc2f834579188162a0f6
  breakT2 :: Main.ShError
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Main.Broken GHC.Types.True) -}
61d9aba738a7367b1479d90fc7413189
  cache :: Main.Cache -> Main.Val
  RecSel Left Main.Cache
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cache) ->
                 case ds of wild {
                   DEFAULT -> Main.cache1 Main.Cache dt61 ds1 -> ds1 }) -}
61d9aba738a7367b1479d90fc7413189
  cache1 :: Main.Val
  {- Strictness: x -}
e7313a22335fed9ae35962db8d5ef9c9
  cd :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.cd1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
95b50093d3e5b7451a7377526211a6c4
  cd1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
08e52e55305d3fbc42c6028f056a4f81
  check :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.check1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
866f2db8216c1b8b181f74c3efd5444b
  check1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
2dc81cb914b20d90c28409fdd1201273
  chkParseErr ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      ()
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U)><L,A><L,A><L,1*C1(C1(C1(C1(C1(U(U,U))))))><L,1*C1(C1(C1(C1(U(U,U)))))><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chkParseErr1
                  `cast`
                ((forall (b1 :: <*>_N).
                  <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                  ->_R <()
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Text.Megaparsec.Internal.Hints
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <Text.Megaparsec.Error.ParseError
                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <()
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Text.Megaparsec.Internal.Hints
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <Text.Megaparsec.Error.ParseError
                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R (<Main.ParseEnv>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(b1,
                                        Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Main.ParseEnv>_N
                                                                       <GHC.Types.IO>_R
                                                                       <b1>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                           <Main.Custom>_N
                                                                                           <Data.Text.Internal.Text>_N
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              Main.ParseEnv
                                                                                              GHC.Types.IO>_R
                                                                                           <()>_R)) -}
da262a9a8802fa70b8d4e7f738f24c33
  chkParseErr1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Main.ParseEnv
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b1, Main.ParseEnv) #)
  {- Arity: 7, HasNoCafRefs,
     Strictness: <L,U(U,U,U,U)><L,A><L,A><L,1*C1(C1(C1(C1(C1(U(U,U))))))><L,1*C1(C1(C1(C1(U(U,U)))))><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: ()
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eok :: ()
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eta :: Main.ParseEnv)
                   (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 case ipv6 of wild {
                   GHC.Base.Nothing
                   -> ((eok
                          GHC.Tuple.()
                          s1
                          (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Main.ParseEnv>_N <GHC.Types.IO>_R <b1>_N)
                         x3)
                        `cast`
                      (GHC.Types.N:IO[0] <(b1, Main.ParseEnv)>_R)
                        eta1
                   GHC.Base.Just x4
                   -> case s1 of wild1 { Text.Megaparsec.State.State ds3 pos dt61 ds4 ->
                      ((eerr
                          (Text.Megaparsec.Error.FancyError
                             @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             @ Main.Custom
                             pos
                             (Data.Set.Internal.Bin
                                @ (Text.Megaparsec.Error.ErrorFancy Main.Custom)
                                1#
                                (Text.Megaparsec.Error.ErrorCustom @ Main.Custom x4)
                                (Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorFancy Main.Custom))
                                (Data.Set.Internal.Tip
                                   @ (Text.Megaparsec.Error.ErrorFancy Main.Custom))))
                          wild1)
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Main.ParseEnv>_N <GHC.Types.IO>_R <b1>_N)
                         x3)
                        `cast`
                      (GHC.Types.N:IO[0] <(b1, Main.ParseEnv)>_R)
                        eta1 } } }) -}
478d877e1838468fcb5f68247b395108
  chkPureFn :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 8,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chkPureFn1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (forall (b :: <*>_N).
                       <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R (<Main.ParseEnv>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(b,
                                             Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <Main.ParseEnv>_N
                                                                            <GHC.Types.IO>_R
                                                                            <b>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                               <Main.Custom>_N
                                                                                               <Data.Text.Internal.Text>_N
                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                  Main.ParseEnv
                                                                                                  GHC.Types.IO>_R
                                                                                               <()>_R)) -}
9c710386f72c5da43153f0095920d7af
  chkPureFn1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Main.ParseEnv
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
  {- Arity: 8,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (name1 :: Data.Text.Internal.Text)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta5 :: Main.ParseEnv)
                   (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta5 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 case name1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Main.$w$slookup
                        @ ()
                        ww1
                        ww2
                        ww3
                        ipv2
                          `cast`
                        (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild {
                   GHC.Base.Nothing
                   -> case Main.$w$slookup
                             @ ()
                             ww1
                             ww2
                             ww3
                             ipv3
                               `cast`
                             (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild1 {
                        GHC.Base.Nothing
                        -> ((eta3
                               GHC.Tuple.()
                               eta
                               (GHC.Types.[]
                                  @ (Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                 `cast`
                               (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                         <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                              (case Main.$w$sinsert
                                      @ ()
                                      ww1
                                      ww2
                                      ww3
                                      GHC.Tuple.()
                                      ipv4
                                        `cast`
                                      (Data.HashSet.N:HashSet[0]
                                           <Data.Text.Internal.Text>_N) of nt { DEFAULT ->
                               Main.ParseEnv
                                 ipv
                                 ipv1
                                 ipv2
                                 ipv3
                                 nt
                                   `cast`
                                 (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                                 ipv5
                                 ipv6
                                 ipv7 }))
                             `cast`
                           (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                             eta6
                        GHC.Base.Just ds
                        -> ((eta3
                               GHC.Tuple.()
                               eta
                               (GHC.Types.[]
                                  @ (Data.Set.Internal.Set
                                       (Text.Megaparsec.Error.ErrorItem
                                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                 `cast`
                               (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                         <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                              `cast`
                            (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                 <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                              x3)
                             `cast`
                           (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                             eta6 }
                   GHC.Base.Just ds
                   -> ((eta3
                          GHC.Tuple.()
                          eta
                          (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                         (Main.ParseEnv
                            ipv
                            ipv1
                            ipv2
                            ipv3
                            ipv4
                            ipv5
                            (GHC.Base.Just @ Main.Custom (Main.NotPureFunc ww))
                            ipv7))
                        `cast`
                      (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                        eta6 } } }) -}
42b800eba6df91e8de575869db0bc589
  chkVar :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.chkVar1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (forall (b :: <*>_N).
                       <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R (<Main.ParseEnv>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(b,
                                             Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <Main.ParseEnv>_N
                                                                            <GHC.Types.IO>_R
                                                                            <b>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                               <Main.Custom>_N
                                                                                               <Data.Text.Internal.Text>_N
                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                  Main.ParseEnv
                                                                                                  GHC.Types.IO>_R
                                                                                               <()>_R)) -}
ac4bc99b84accac6586ba5b254ba1a74
  chkVar1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Main.ParseEnv
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (name1 :: Data.Text.Internal.Text)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta5 :: Main.ParseEnv)
                   (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta5 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 case name1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Main.$w$slookup
                        @ ()
                        ww1
                        ww2
                        ww3
                        ipv5
                          `cast`
                        (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild {
                   GHC.Base.Nothing
                   -> ((eta3
                          GHC.Tuple.()
                          eta
                          (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                         (Main.ParseEnv
                            ipv
                            ipv1
                            ipv2
                            ipv3
                            ipv4
                            ipv5
                            (GHC.Base.Just @ Main.Custom (Main.NotDefined ww))
                            ipv7))
                        `cast`
                      (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                        eta6
                   GHC.Base.Just ds
                   -> ((eta3
                          GHC.Tuple.()
                          eta
                          (GHC.Types.[]
                             @ (Data.Set.Internal.Set
                                  (Text.Megaparsec.Error.ErrorItem
                                     (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                         x3)
                        `cast`
                      (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                        eta6 } } }) -}
61d9aba738a7367b1479d90fc7413189
  clsrId :: Main.Cache -> GHC.Types.Int
  RecSel Left Main.Cache
  {- Arity: 1, Strictness: <S,1*U>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Cache) ->
                 case ds of wild {
                   DEFAULT -> Main.clsrId1
                   Main.Cache dt61 ds1 -> GHC.Types.I# dt61 }) -}
eecbd71b152c2b0cd93cbe5ab9269d51
  clsrId1 :: GHC.Types.Int
  {- Strictness: x -}
04dd30880a8717dbe1812d5a74a3dd71
  cmdExec ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text] -> Main.Env -> GHC.Types.IO Main.Env
  {- Arity: 4,
     Strictness: <S,1*U(U,U,U)><S,1*U><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.cmdExec1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <[Data.Text.Internal.Text]>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Env>_R)) -}
2b4e5831ad4350ec1fcbf853f7cccb18
  cmdExec1 ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text]
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
  {- Arity: 4,
     Strictness: <S,1*U(U,U,U)><S,1*U><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,U> -}
61d9aba738a7367b1479d90fc7413189
  cmdMvar :: Main.ThreadInfo -> GHC.Base.Maybe (GHC.MVar.MVar ())
  RecSel Left Main.ThreadInfo
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLSL),1*U(A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ThreadInfo) ->
                 case ds of wild { Main.ThreadInfo dt61 dt62 ds1 ds2 -> ds1 }) -}
3eef4fb82a90f25deda962e5cd5a6a5a
  colon :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ Main.Env
                   (Main.Env
                      ipv
                      xs1
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13) } }) -}
a4ea8bc9c27acb48cb5ae82bdb7931c4
  colon1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (Main.Env
                         ipv
                         xs1
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13) #) } }) -}
436da3e6dc2fc18842db70157e2637d4
  comma' ::
    GHC.Base.Monad m =>
    (t -> m Main.Env) -> (Main.Env -> m Main.Env) -> t -> m Main.Env
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(A,C(C1(U)),A,C(U),A)><S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   @ t
                   ($dMonad :: GHC.Base.Monad m)
                   (f4 :: t -> m Main.Env)
                   (g :: Main.Env -> m Main.Env)
                   (e :: t) ->
                 case f4 of f5 { DEFAULT ->
                 case g of g1 { DEFAULT ->
                 case e of e1 { DEFAULT ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ Main.Env
                   @ Main.Env
                   (f5 e1)
                   (\ (re1 :: Main.Env) ->
                    case re1 of re2 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ Main.Env
                      @ Main.Env
                      (g1 re2)
                      (\ (re3 :: Main.Env) ->
                       case re3 of re4 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ Main.Env
                         (case GHC.Base.++ @ Main.Val ipv1 ipv15 of dt61 { DEFAULT ->
                          Main.Env
                            ipv14
                            dt61
                            ipv16
                            ipv17
                            ipv18
                            ipv19
                            ipv20
                            ipv21
                            ipv22
                            ipv23
                            ipv24
                            ipv25
                            ipv26
                            ipv27 }) }) }) } } }) -}
6e26102cb66cedfb92f6fb7b7e4fead8
  comma'1 ::
    (t -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> t
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S,1*U><S,U>,
     Unfolding: (\ @ t
                   (f4 :: t -> Main.Eval Main.Env)
                   (g :: Main.Env -> Main.Eval Main.Env)
                   (e :: t)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case g of g1 { DEFAULT ->
                 case e of e1 { DEFAULT ->
                 case (f4 e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e2 -> ds1
                   Data.Either.Right x3
                   -> case x3 of re1 { Main.Env ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      case (g1 re1)
                             `cast`
                           (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                               <([Main.Val], Main.ShError)>_N
                                                               <GHC.Types.IO>_R
                                                               <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                  <Data.Either.Either
                                                                                     ([Main.Val],
                                                                                      Main.ShError)
                                                                                     Main.Env>_R))
                             ipv of ds2 { (#,#) ipv16 ipv17 ->
                      case ipv17 of wild1 {
                        Data.Either.Left e2 -> ds2
                        Data.Either.Right x4
                        -> case x4 of re2 { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                           (# ipv16,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (case GHC.Base.++ @ Main.Val ipv3 ipv19 of dt61 { DEFAULT ->
                                 Main.Env
                                   ipv18
                                   dt61
                                   ipv20
                                   ipv21
                                   ipv22
                                   ipv23
                                   ipv24
                                   ipv25
                                   ipv26
                                   ipv27
                                   ipv28
                                   ipv29
                                   ipv30
                                   ipv31 }) #) } } } } } } } }) -}
ab5aae6dd2b0a809374e6dea3c778ae0
  completeFn ::
    Main.Env
    -> System.Console.Haskeline.Completion.CompletionFunc GHC.Types.IO
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLLLSSS),1*U(A,A,A,A,A,A,A,A,A,A,A,U,U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Env) (w1 :: (GHC.Base.String, GHC.Base.String)) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case w1 of ww15 { (,) ww16 ww17 ->
                 Main.$wcompleteFn ww12 ww13 ww14 ww16 ww17 } }) -}
8a6b5d7d1ed0f5e31f130dedd4e90a4b
  completeFn1 :: [GHC.Types.Char -> GHC.Types.Bool]
  {- Unfolding: (GHC.CString.unpackFoldrCString#
                   @ [GHC.Types.Char -> GHC.Types.Bool]
                   Main.completeFn3
                   Main.completeFn2
                   (GHC.Types.[] @ (GHC.Types.Char -> GHC.Types.Bool))) -}
060ae158cbdca965406d14398de969c3
  completeFn10 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# '\\'#) -}
ee72741b8e19659f7dfdb769b2312b4c
  completeFn11 ::
    GHC.IO.FilePath
    -> GHC.Types.IO [System.Console.Haskeline.Completion.Completion]
  {- Arity: 1,
     Unfolding: (System.Console.Haskeline.Completion.listFiles
                   @ GHC.Types.IO
                   Control.Monad.IO.Class.$fMonadIOIO) -}
63488972a0fe5cce249804607ddf481f
  completeFn12 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.completeFn13) -}
062293088c1ab4845b1b223712cffb0c
  completeFn13 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("'"#) -}
d9cbf013b7b240092157a2b7e2723f72
  completeFn2 ::
    GHC.Types.Char
    -> [GHC.Types.Char -> GHC.Types.Bool]
    -> [GHC.Types.Char -> GHC.Types.Bool]
  {- Arity: 2, HasNoCafRefs, Strictness: <L,U(U)><L,U>m2,
     Unfolding: (\ (x3 :: GHC.Types.Char)
                   (ys :: [GHC.Types.Char -> GHC.Types.Bool])[OneShot] ->
                 GHC.Types.:
                   @ (GHC.Types.Char -> GHC.Types.Bool)
                   (GHC.Classes.eqChar x3)
                   ys) -}
f540ac7f45cf266d951683631dcb4a4e
  completeFn3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (":"#) -}
005d019249040fe65e52b5ec3288f041
  completeFn4 ::
    [Data.List.Split.Internals.Chunk GHC.Types.Char]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [[GHC.IO.FilePath]] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
0ee495ae749924bf1e2b635f15eb7d17
  completeFn5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.completeFn6) -}
c49ab754576e80509c13354ace67feb2
  completeFn6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("PATH"#) -}
fe388a343d7e07e727fad7a47ba29711
  completeFn7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.completeFn8) -}
b86d4dd688e1cefb8470bc65d2a1efc9
  completeFn8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" \t;|>&}"#) -}
775f8b257ccfd2ecea919f7422441560
  completeFn9 :: GHC.Base.Maybe GHC.Types.Char
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Base.Just @ GHC.Types.Char Main.completeFn10) -}
6912db80dbbaac9053dcb5f422030524
  completeFn_$s$wgo1 ::
    [[GHC.Types.Char]]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> [[GHC.Types.Char]]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
63013adf6ae6386b1e9fbe08741c207a
  completeFn_$s$wgo2 ::
    [[GHC.Types.Char]]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf Data.Text.Internal.Text Main.Val)
    -> [[GHC.Types.Char]]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
d84f98a5b6af046943d42b1512ec6f88
  completeFn_$s$wgo3 ::
    [[GHC.Types.Char]]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> [[GHC.Types.Char]]
  {- Arity: 4, HasNoCafRefs, Strictness: <L,1*U><S,U><S,U><L,U> -}
a5b73bef205e9bed4f55feaf0b24bdbb
  completeFn_$sisArg' ::
    GHC.Prim.Char#
    -> [GHC.Types.Char] -> [GHC.Types.Char] -> GHC.Base.String
  {- Arity: 3, HasNoCafRefs, Strictness: <S,1*U><L,1*U><S,1*U> -}
f7a9da7cfc08419b57a8411cebd4fe55
  completeFn_isArg' ::
    GHC.Base.String -> GHC.Base.String -> GHC.Base.String
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
5fa65ee2e805c6298fb20e9605c9591f
  def :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,A,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.def1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
f4a85d5ff20823d89ed9f20313134fd6
  def' ::
    Main.Env
    -> Data.Text.Internal.Text -> Main.Val -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <S(LLSSSSSS(SS)SLSSLL),1*U(A,A,U,U,U,U,U,U(U,U),U,A,U,U,U,U)><S(SSS),1*U(U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.def2
                  `cast`
                (<Main.Env>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
fd04ecd365198093cfd3e8c11b285e4e
  def1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,A,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   [] -> (# eta, Main.def11 #)
                   : ds1 ds2
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case ds2 of wild2 {
                             []
                             -> (# eta,
                                   Data.Either.Left
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (Main.def5,
                                      case GHC.List.$wlenAcc @ Main.Val wild 0# of ww2 { DEFAULT ->
                                      Main.NumArgs Main.def9 ww2 }) #)
                             : ds3 ds4
                             -> case ds4 of wild3 {
                                  []
                                  -> (# eta,
                                        Data.Either.Left
                                          @ ([Main.Val], Main.ShError)
                                          @ Main.Env
                                          (Main.def5, Main.TypeMismatch Main.def7 wild1) #)
                                  : ipv14 ipv15
                                  -> (# eta,
                                        Data.Either.Left
                                          @ ([Main.Val], Main.ShError)
                                          @ Main.Env
                                          (Main.def5,
                                           case GHC.List.$wlenAcc
                                                  @ Main.Val
                                                  wild
                                                  0# of ww2 { DEFAULT ->
                                           Main.NumArgs Main.def9 ww2 }) #) } }
                        Main.Str ds3 name1
                        -> let {
                             fail :: GHC.Prim.Void#
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                               <join 1> {- Arity: 1, Strictness: <L,A> -}
                             = \ (ds4 :: GHC.Prim.Void#)[OneShot] ->
                               Main.def2
                                 env1
                                 name1
                                 (Main.Prim
                                    Main.Purely
                                    (\ (e :: Main.Env)
                                       (ds5 :: [Main.Val])
                                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                     case e of e1 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                                     case ds5 of ds6 { DEFAULT ->
                                     (# eta1,
                                        Data.Either.Right
                                          @ ([Main.Val], Main.ShError)
                                          @ Main.Env
                                          (case ds2 of dt61 { DEFAULT ->
                                           Main.Env
                                             ipv14
                                             dt61
                                             ipv16
                                             ipv17
                                             ipv18
                                             ipv19
                                             ipv20
                                             ipv21
                                             ipv22
                                             ipv23
                                             ipv24
                                             ipv25
                                             ipv26
                                             ipv27 }) #) } })
                                      `cast`
                                    (<Main.Env>_R
                                     ->_R <[Main.Val]>_R
                                     ->_R Sym (GHC.Types.N:IO[0]
                                                   <Data.Either.Either
                                                      ([Main.Val], Main.ShError)
                                                      Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                               <([Main.Val],
                                                                                 Main.ShError)>_N
                                                                               <GHC.Types.IO>_R
                                                                               <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                    (GHC.Types.[] @ Data.Text.Internal.Text))
                                 eta
                           } in
                           case ds2 of wild2 {
                             [] -> fail GHC.Prim.void#
                             : body ds4
                             -> case body of wild3 {
                                  DEFAULT -> fail GHC.Prim.void#
                                  Main.Lambda ds5 ds6 ds7 ds8
                                  -> case ds4 of wild4 {
                                       [] -> Main.def2 env1 name1 wild3 eta
                                       : ipv14 ipv15 -> fail GHC.Prim.void# } } } } } }) -}
95c1286d9e3516509695260dd8671936
  def10 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("2"#) -}
9aa077f2dc1d7f1499f8fd5bd970e008
  def11 :: Data.Either.Either ([Main.Val], Main.ShError) Main.Env
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ ([Main.Val], Main.ShError)
                   @ Main.Env
                   Main.def12) -}
1e038142e55a5af5ce4215dff6f66cb1
  def12 :: ([Main.Val], Main.ShError)
  {- Strictness: m, Unfolding: ((Main.def5, Main.def13)) -}
4697412c472fd19b87d576fa8d55a034
  def13 :: Main.ShError
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ Main.Val
                        (GHC.Types.[] @ Main.Val)
                        0# of ww2 { DEFAULT ->
                 Main.NumArgs Main.def9 ww2 }) -}
d78c6cb0cee4c708e6469b3b99288154
  def2 ::
    Main.Env
    -> Data.Text.Internal.Text
    -> Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <S(LLSSSSSS(SS)SLSSLL),1*U(A,A,U,U,U,U,U,U(U,U),U,A,U,U,U,U)><S(SSS),1*U(U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (name1 :: Data.Text.Internal.Text)
                   (body :: Main.Val)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ipv7 of wild { Main.Flags ds ds1 ->
                 case body of body1 { DEFAULT ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                        ipv11
                        eta of ds2 { (#,#) ipv14 ipv15 ->
                 case name1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Main.$w$slookup @ Main.Val ww1 ww2 ww3 ipv15 of wild1 {
                   GHC.Base.Nothing
                   -> case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                             ipv11
                             (Main.$w$sinsert @ Main.Val ww1 ww2 ww3 body1 ipv15)
                             ipv14 of s2# { DEFAULT ->
                      case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv13
                             s2# of ds3 { (#,#) ipv16 ipv17 ->
                      case ipv17 of wild2 { GHC.Types.I# y ->
                      let {
                        ipv18 :: GHC.Prim.Int# = GHC.Prim.+# 1# y
                      } in
                      case GHC.Prim.writeMutVar#
                             @ GHC.Prim.RealWorld
                             @ GHC.Types.Int
                             ipv13
                             (GHC.Types.I# ipv18)
                             ipv16 of s2#1 { DEFAULT ->
                      (# s2#1,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.True
                              (GHC.Types.[] @ Main.Val)
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              wild
                              ipv8
                              ipv18
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) } } } }
                   GHC.Base.Just ipv16
                   -> case ds of wild2 {
                        GHC.Types.False
                        -> (# ipv14,
                              Data.Either.Left
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.def5,
                                 case Data.Text.Show.$w$cshow ww of ww4 { (#,#) ww5 ww6 ->
                                 case GHC.Base.++_$s++
                                        @ GHC.Types.Char
                                        Main.def3
                                        ww5
                                        ww6 of dt61 { DEFAULT ->
                                 Main.SomeError dt61 } }) #)
                        GHC.Types.True
                        -> case GHC.Prim.writeMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                                  ipv11
                                  (Main.$w$sinsert @ Main.Val ww1 ww2 ww3 body1 ipv15)
                                  ipv14 of s2# { DEFAULT ->
                           case GHC.Prim.readMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Types.Int
                                  ipv13
                                  s2# of ds3 { (#,#) ipv17 ipv18 ->
                           case ipv18 of wild3 { GHC.Types.I# y ->
                           let {
                             ipv19 :: GHC.Prim.Int# = GHC.Prim.+# 1# y
                           } in
                           case GHC.Prim.writeMutVar#
                                  @ GHC.Prim.RealWorld
                                  @ GHC.Types.Int
                                  ipv13
                                  (GHC.Types.I# ipv19)
                                  ipv17 of s2#1 { DEFAULT ->
                           (# s2#1,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.Env
                                   GHC.Types.True
                                   (GHC.Types.[] @ Main.Val)
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   wild
                                   ipv8
                                   ipv19
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13) #) } } } } } } } } } } }) -}
98bfaa009f45cf5e894044b4e2492f13
  def3 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.def4) -}
bb1eff9cd2f4dd7f8730d1b8954a62c0
  def4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" is already defined"#) -}
20c5b760802a3617b1eaef93e6bc9475
  def5 :: [Main.Val]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Val
                   Main.def6
                   (GHC.Types.[] @ Main.Val)) -}
919225312c81ac612f8e2b407d054e60
  def6 :: Main.Val
  {- HasNoCafRefs, Strictness: m1, Unfolding: (Main.Float 22.0##) -}
f942a26cbb3e479bd490ed7e35614137
  def7 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.def8) -}
0b2176290c5106d90224de49e4b7239e
  def8 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("string"#) -}
c284c6788aea553f8f6fbd48a37e42a7
  def9 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.def10) -}
61d9aba738a7367b1479d90fc7413189
  defFn ::
    Main.ParseEnv -> Data.HashSet.HashSet Data.Text.Internal.Text
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLSLLLLL),1*U(A,A,U,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds2 }) -}
61d9aba738a7367b1479d90fc7413189
  defPureFn ::
    Main.ParseEnv -> Data.HashSet.HashSet Data.Text.Internal.Text
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLL),1*U(A,A,A,U,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds3 }) -}
61d9aba738a7367b1479d90fc7413189
  defVar ::
    Main.ParseEnv -> Data.HashSet.HashSet Data.Text.Internal.Text
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLL),1*U(A,A,A,A,A,U,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds5 }) -}
ca3286c7e223190d39209c96cb11186d
  defaultEnv ::
    GHC.IO.FilePath
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> GHC.IORef.IORef Main.ThreadInfo
    -> GHC.IORef.IORef GHC.Types.Int
    -> Main.Env
  {- Arity: 4,
     Strictness: <S,1*U><S(S),1*U(U)><S(S),1*U(U)><S(S),1*U(U)>,
     Unfolding: InlineRule (4, True, False)
                (\ (dt61 :: GHC.Base.String)
                   (dt62 :: GHC.IORef.IORef
                              (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val))
                   (dt63 :: GHC.IORef.IORef Main.ThreadInfo)
                   (dt64 :: GHC.IORef.IORef GHC.Types.Int) ->
                 case Main.defaultVars of dt65 { DEFAULT ->
                 case GHC.IO.Handle.FD.stdin of dt66 { DEFAULT ->
                 case GHC.IO.Handle.FD.stdout of dt67 { DEFAULT ->
                 case GHC.IO.Handle.FD.stderr of dt68 { DEFAULT ->
                 case dt61 of dt69 { DEFAULT ->
                 case dt62
                        `cast`
                      (GHC.IORef.N:IORef[0] <Data.HashMap.Base.HashMap
                                               Data.Text.Internal.Text
                                               Main.Val>_N) of dt70 { GHC.STRef.STRef dt71 ->
                 case dt63
                        `cast`
                      (GHC.IORef.N:IORef[0] <Main.ThreadInfo>_N) of dt72 { GHC.STRef.STRef dt73 ->
                 case dt64
                        `cast`
                      (GHC.IORef.N:IORef[0] <GHC.Types.Int>_N) of dt74 { GHC.STRef.STRef dt75 ->
                 Main.Env
                   GHC.Types.True
                   (GHC.Types.[] @ Main.Val)
                   (GHC.Types.[] @ Main.Val)
                   dt65
                   dt66
                   dt67
                   dt68
                   Main.defaultParseEnv1
                   Main.defaultParseEnv
                   0#
                   dt69
                   dt71
                   dt73
                   dt75 } } } } } } } }) -}
1ed3198bb2217424190ee24ae22e8b27
  defaultFuncs ::
    Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
  {- Unfolding: (Main.defaultFuncs_go3
                   Main.defaultFuncs1
                   (Data.HashMap.Base.Empty @ Data.Text.Internal.Text @ Main.Val)) -}
16036da7991a973b345192485eb2acac
  defaultFuncs1 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs368
                   Main.defaultFuncs2) -}
330f3619ac36620ae528bf7db10da63c
  defaultFuncs10 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs314
                   Main.defaultFuncs11) -}
800548052b29e02e61adf4a2d02d804b
  defaultFuncs100 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs101
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs85) -}
91f4b5f79eb019c8a00be2c765174e48
  defaultFuncs101 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (Main.Env
                         ipv
                         (GHC.Types.: @ Main.Val (Main.List xs1) (GHC.Types.[] @ Main.Val))
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13) #) } }) -}
10d98e191633e28606e84f3fc3fb5110
  defaultFuncs102 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs103) -}
3aa047e8d2463a3bcbf6591f5f70d75b
  defaultFuncs103 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("list"#) -}
b45874c12438cc4e5e28e62078c05b1d
  defaultFuncs104 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs107, Main.defaultFuncs105)) -}
32c1b658f9f3ed79e4e481d0fba8efab
  defaultFuncs105 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs106
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs85) -}
5c02d13f505b820580ba6e70ee741175
  defaultFuncs106 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   []
                   -> (# eta,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.False
                              (GHC.Types.[] @ Main.Val)
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #)
                   : x3 ds1
                   -> let {
                        fail :: GHC.Prim.Void#
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                          <join 1> {- Arity: 1, Strictness: <L,A> -}
                        = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                          case ds1 of wild1 {
                            []
                            -> (# eta,
                                  Data.Either.Right
                                    @ ([Main.Val], Main.ShError)
                                    @ Main.Env
                                    (Main.Env
                                       GHC.Types.False
                                       (GHC.Types.: @ Main.Val x3 (GHC.Types.[] @ Main.Val))
                                       ipv2
                                       ipv3
                                       ipv4
                                       ipv5
                                       ipv6
                                       ipv7
                                       ipv8
                                       ipv9
                                       ipv10
                                       ipv11
                                       ipv12
                                       ipv13) #)
                            : ipv14 ipv15
                            -> (# eta,
                                  Data.Either.Right
                                    @ ([Main.Val], Main.ShError)
                                    @ Main.Env
                                    (case Main.defaultFuncs_$sisList' x3 wild1 of dt61 { DEFAULT ->
                                     Main.Env
                                       dt61
                                       wild
                                       ipv2
                                       ipv3
                                       ipv4
                                       ipv5
                                       ipv6
                                       ipv7
                                       ipv8
                                       ipv9
                                       ipv10
                                       ipv11
                                       ipv12
                                       ipv13 }) #) }
                      } in
                      case x3 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        Main.List ds2
                        -> case ds1 of wild2 {
                             []
                             -> (# eta,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (Main.Env
                                        GHC.Types.True
                                        (GHC.Types.: @ Main.Val wild1 (GHC.Types.[] @ Main.Val))
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        ipv7
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13) #)
                             : ipv14 ipv15 -> fail GHC.Prim.void# } } } }) -}
86bd5dcfbd604024388171e01db43eeb
  defaultFuncs107 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs108) -}
57f1fe38db7cf3515623231c7ca78305
  defaultFuncs108 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("list?"#) -}
e22b14ff2392341255a348ff147f9474
  defaultFuncs109 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs114, Main.defaultFuncs110)) -}
066f0804463582363bcc35e67f898db0
  defaultFuncs11 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs307
                   Main.defaultFuncs12) -}
597b326a11b0093a415d455124678392
  defaultFuncs110 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.check1
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs111) -}
9f0fd35cb5fe95e562f44859b6cb6c5c
  defaultFuncs111 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs112
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
acc7c7eac25d49c834e8df9678e58973
  defaultFuncs112 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs113) -}
2286cea858df47ac5bc45a388b50b445
  defaultFuncs113 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[-bcdefiLnoprsSwxOG] FILE..."#) -}
5dcadfc471a1eff9b3aa1218ded14cee
  defaultFuncs114 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs115) -}
8be21ed8a8124126ba9b07cb44ce55a8
  defaultFuncs115 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("check"#) -}
79585f8dc87fc3af193517814e7ad5d2
  defaultFuncs116 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs131, Main.defaultFuncs117)) -}
f18ab620c6832d6a18a03662dc95b02c
  defaultFuncs117 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs121
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs118) -}
be7022de12839b215a0e97d3515bfa9b
  defaultFuncs118 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs119
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
f1398ce458cb5087b4b4b55059d665e2
  defaultFuncs119 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs120) -}
99664956db0897220bf233bfdeacf8c9
  defaultFuncs12 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs299
                   Main.defaultFuncs13) -}
033fa7fe01459a6d169124b55e189239
  defaultFuncs120 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("DURATION COMMAND [ARG]..."#) -}
ecca57d474a084cd73850ec16a5c6ccc
  defaultFuncs121 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ys :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ys of wild {
                   []
                   -> case Main.defaultFuncs130
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                      of {}
                   : x3 xs
                   -> case Main.defaultFuncs127 x3 eta of ds1 { (#,#) ipv14 ipv15 ->
                      case ipv15 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv14,
                              Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                        Data.Either.Right x4
                        -> case x4 of n13 { GHC.Types.D# ipv16 ->
                           case GHC.Prim.<=## ipv16 0.0## of lwild {
                             DEFAULT
                             -> let {
                                  x5 :: GHC.Prim.Double# = GHC.Prim.*## ipv16 1000000.0##
                                } in
                                let {
                                  n14 :: GHC.Prim.Int# = GHC.Prim.double2Int# x5
                                } in
                                case GHC.Prim.<## x5 (GHC.Prim.int2Double# n14) of lwild1 {
                                  DEFAULT
                                  -> case System.Timeout.$wtimeout
                                            @ (Data.Either.Either
                                                 ([Main.Val], Main.ShError) Main.Env)
                                            n14
                                            (Main.defaultFuncs126
                                               env1
                                               (Main.defaultFuncs51
                                                  Main.defaultFuncs50
                                                    `cast`
                                                  (<Main.Env>_R
                                                   ->_R <[Main.Val]>_R
                                                   ->_R Sym (GHC.Types.N:IO[0]
                                                                 <Data.Either.Either
                                                                    ([Main.Val], Main.ShError)
                                                                    Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <([Main.Val],
                                                                                               Main.ShError)>_N
                                                                                             <GHC.Types.IO>_R
                                                                                             <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                                  xs
                                                  env1)
                                                 `cast`
                                               (Sym (GHC.Types.N:IO[0]
                                                         <Data.Either.Either
                                                            ([Main.Val], Main.ShError)
                                                            Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                     <([Main.Val],
                                                                                       Main.ShError)>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)))
                                              `cast`
                                            (Sym (GHC.Types.N:IO[0]
                                                      <Data.Either.Either
                                                         ([Main.Val], Main.ShError) Main.Env>_R))
                                            ipv14 of ds2 { (#,#) ipv17 ipv18 ->
                                     case ipv18 of y {
                                       GHC.Base.Nothing
                                       -> (# ipv17,
                                             Data.Either.Right
                                               @ ([Main.Val], Main.ShError)
                                               @ Main.Env
                                               (Main.Env
                                                  GHC.Types.False
                                                  (GHC.Types.[] @ Main.Val)
                                                  ipv2
                                                  ipv3
                                                  ipv4
                                                  ipv5
                                                  ipv6
                                                  ipv7
                                                  ipv8
                                                  ipv9
                                                  ipv10
                                                  ipv11
                                                  ipv12
                                                  ipv13) #)
                                       GHC.Base.Just ds
                                       -> case ds of wild2 {
                                            Data.Either.Left e -> (# ipv17, wild2 #)
                                            Data.Either.Right renv
                                            -> (# ipv17,
                                                  Data.Either.Right
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    (case renv of renv1 { Main.Env ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ->
                                                     Main.Env
                                                       ipv19
                                                       ipv20
                                                       ipv2
                                                       ipv3
                                                       ipv4
                                                       ipv5
                                                       ipv6
                                                       ipv7
                                                       ipv8
                                                       ipv9
                                                       ipv10
                                                       ipv11
                                                       ipv12
                                                       ipv13 }) #) } } }
                                  1#
                                  -> case System.Timeout.$wtimeout
                                            @ (Data.Either.Either
                                                 ([Main.Val], Main.ShError) Main.Env)
                                            (GHC.Prim.-# n14 1#)
                                            (Main.defaultFuncs126
                                               env1
                                               (Main.defaultFuncs51
                                                  Main.defaultFuncs50
                                                    `cast`
                                                  (<Main.Env>_R
                                                   ->_R <[Main.Val]>_R
                                                   ->_R Sym (GHC.Types.N:IO[0]
                                                                 <Data.Either.Either
                                                                    ([Main.Val], Main.ShError)
                                                                    Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                             <([Main.Val],
                                                                                               Main.ShError)>_N
                                                                                             <GHC.Types.IO>_R
                                                                                             <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                                  xs
                                                  env1)
                                                 `cast`
                                               (Sym (GHC.Types.N:IO[0]
                                                         <Data.Either.Either
                                                            ([Main.Val], Main.ShError)
                                                            Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                     <([Main.Val],
                                                                                       Main.ShError)>_N
                                                                                     <GHC.Types.IO>_R
                                                                                     <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)))
                                              `cast`
                                            (Sym (GHC.Types.N:IO[0]
                                                      <Data.Either.Either
                                                         ([Main.Val], Main.ShError) Main.Env>_R))
                                            ipv14 of ds2 { (#,#) ipv17 ipv18 ->
                                     case ipv18 of y {
                                       GHC.Base.Nothing
                                       -> (# ipv17,
                                             Data.Either.Right
                                               @ ([Main.Val], Main.ShError)
                                               @ Main.Env
                                               (Main.Env
                                                  GHC.Types.False
                                                  (GHC.Types.[] @ Main.Val)
                                                  ipv2
                                                  ipv3
                                                  ipv4
                                                  ipv5
                                                  ipv6
                                                  ipv7
                                                  ipv8
                                                  ipv9
                                                  ipv10
                                                  ipv11
                                                  ipv12
                                                  ipv13) #)
                                       GHC.Base.Just ds
                                       -> case ds of wild2 {
                                            Data.Either.Left e -> (# ipv17, wild2 #)
                                            Data.Either.Right renv
                                            -> (# ipv17,
                                                  Data.Either.Right
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    (case renv of renv1 { Main.Env ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ->
                                                     Main.Env
                                                       ipv19
                                                       ipv20
                                                       ipv2
                                                       ipv3
                                                       ipv4
                                                       ipv5
                                                       ipv6
                                                       ipv7
                                                       ipv8
                                                       ipv9
                                                       ipv10
                                                       ipv11
                                                       ipv12
                                                       ipv13 }) #) } } } }
                             1#
                             -> (# ipv14,
                                   Data.Either.Left
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (Main.defaultFuncs124,
                                      case GHC.Base.++
                                             @ GHC.Types.Char
                                             (GHC.Float.$w$sshowSignedFloat
                                                GHC.Float.$fShowDouble2
                                                GHC.Float.minExpt
                                                ipv16
                                                (GHC.Types.[] @ GHC.Types.Char))
                                             Main.defaultFuncs122 of dt61 { DEFAULT ->
                                      Main.SomeError dt61 }) #) } } } } } }) -}
638b5992a74272bc53e350fa0401bbb7
  defaultFuncs122 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs123) -}
f798aa2090226c87079887cb13a75e6d
  defaultFuncs123 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" is not positive number"#) -}
4ea18809021b5962d4f85bd09a39a3fa
  defaultFuncs124 :: [Main.Val]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Val
                   Main.defaultFuncs125
                   (GHC.Types.[] @ Main.Val)) -}
dd2249d21f54ee0595cadd4aa0da83fd
  defaultFuncs125 :: Main.Val
  {- HasNoCafRefs, Strictness: m1, Unfolding: (Main.Float 2.0##) -}
59768e945cce8ae4aca48f286e67f732
  defaultFuncs126 ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><C(S(LS)),1*C1(U(U,U))><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: Main.Eval Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ipv7 of wild { Main.Flags ds1 ds2 ->
                 case ds
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds3 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild1 {
                   Data.Either.Left l
                   -> case l of wild2 { (,) v ds4 ->
                      case ds4 of wild3 {
                        DEFAULT
                        -> case ds2 of wild4 {
                             GHC.Types.False -> ds3
                             GHC.Types.True
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       ipv6
                                       (case wild3 of wild5 {
                                          Main.SomeError s -> s
                                          Main.NumArgs s dt61
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError7
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError6
                                                     (case GHC.Show.$wshowSignedInt
                                                             0#
                                                             dt61
                                                             (GHC.Types.[]
                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                      GHC.Types.: @ GHC.Types.Char ww5 ww6 })))
                                          Main.TypeMismatch s v1
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError5
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError4
                                                     (Main.$fShowShError_$cshow1 v1)))
                                          Main.UnboundVar t
                                          -> GHC.CString.unpackAppendCString# Main.$fShowShError3 t
                                          Main.Internal s
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError2
                                               s })
                                       GHC.Types.True
                                       ipv14 of ds5 { (#,#) ipv16 ipv17 ->
                                (# ipv16,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (case v of dt61 { DEFAULT ->
                                      Main.Env
                                        GHC.Types.False
                                        dt61
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        wild
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13 }) #) } }
                        Main.Returned s -> ds3
                        Main.Exited s -> ds3
                        Main.Broken s -> ds3 } }
                   Data.Either.Right r -> ds3 } } } }) -}
2f16548cb1dea97628c1189e10646478
  defaultFuncs127 ::
    Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) GHC.Types.Double #)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ds :: Main.Val)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   DEFAULT
                   -> (# eta,
                         Data.Either.Left
                           @ ([Main.Val], Main.ShError)
                           @ GHC.Types.Double
                           (GHC.Types.[] @ Main.Val,
                            case GHC.Base.++
                                   @ GHC.Types.Char
                                   (Main.$fShowShError_$cshow1 wild)
                                   Main.defaultFuncs128 of dt61 { DEFAULT ->
                            Main.SomeError dt61 }) #)
                   Main.Float dt61
                   -> (# eta,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ GHC.Types.Double
                           (GHC.Types.D# dt61) #)
                   Main.Str ds1 s
                   -> case s of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      let {
                        ds2 :: Data.Either.Either
                                 GHC.Base.String (GHC.Types.Double, Data.Text.Internal.Text)
                        = Data.Text.Read.$wsigna
                            @ GHC.Types.Double
                            GHC.Float.$fNumDouble
                            Data.Text.Read.rational_$srational
                              `cast`
                            (Sym (Data.Text.Internal.Read.N:IParser[0]
                                      <Data.Text.Internal.Text>_R <GHC.Types.Double>_R))
                            ww1
                            ww2
                            ww3
                      } in
                      let {
                        fail :: GHC.Prim.Void#
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.Either.Either
                                        ([Main.Val], Main.ShError) GHC.Types.Double #)
                          <join 1> {- Arity: 1, Strictness: <L,A> -}
                        = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                          case ds2 of ds4 { DEFAULT ->
                          let {
                            ds5 :: Data.Either.Either
                                     GHC.Base.String
                                     (GHC.Integer.Type.Integer, Data.Text.Internal.Text)
                            = Data.Text.Read.$wsigna
                                @ GHC.Integer.Type.Integer
                                GHC.Num.$fNumInteger
                                Data.Text.Read.hexadecimal_$shexadecimal5
                                  `cast`
                                (Sym (Data.Text.Internal.Read.N:IParser[0]
                                          <Data.Text.Internal.Text>_R <GHC.Integer.Type.Integer>_R))
                                ww1
                                ww2
                                ww3
                          } in
                          let {
                            fail1 :: GHC.Prim.Void#
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Either.Either
                                             ([Main.Val], Main.ShError) GHC.Types.Double #)
                              <join 1> {- Arity: 1, Strictness: <L,A> -}
                            = \ (ds6 :: GHC.Prim.Void#)[OneShot] ->
                              case ds5 of ds7 { DEFAULT ->
                              (# eta,
                                 Data.Either.Left
                                   @ ([Main.Val], Main.ShError)
                                   @ GHC.Types.Double
                                   (GHC.Types.[] @ Main.Val,
                                    case Data.Text.Show.$w$cshow ww of ww4 { (#,#) ww5 ww6 ->
                                    case GHC.Base.++_$s++
                                           @ GHC.Types.Char
                                           Main.defaultFuncs128
                                           ww5
                                           ww6 of dt61 { DEFAULT ->
                                    Main.SomeError dt61 } }) #) }
                          } in
                          case ds5 of wild1 {
                            Data.Either.Left ipv -> fail1 GHC.Prim.void#
                            Data.Either.Right ds6
                            -> case ds6 of wild2 { (,) d ds7 ->
                               case ds7 of wild3 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                               case Data.Text.Internal.empty_ of wild4 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                               case GHC.Prim.==# dt63 dt66 of lwild {
                                 DEFAULT -> fail1 GHC.Prim.void#
                                 1#
                                 -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Int# #)}
                                           dt61
                                           (GHC.Prim.int2Word# dt62)
                                           dt64
                                           (GHC.Prim.int2Word# dt65)
                                           (GHC.Prim.int2Word# dt63)
                                           GHC.Prim.realWorld# of wild5 { (#,#) ds8 ds9 ->
                                    case GHC.Prim.narrow32Int# ds9 of wild6 {
                                      DEFAULT -> fail1 GHC.Prim.void#
                                      0#
                                      -> (# eta,
                                            Data.Either.Right
                                              @ ([Main.Val], Main.ShError)
                                              @ GHC.Types.Double
                                              (case GHC.Integer.Type.doubleFromInteger
                                                      d of wild7 { DEFAULT ->
                                               GHC.Types.D# wild7 }) #) } } } } } } } }
                      } in
                      case ds2 of wild1 {
                        Data.Either.Left ipv -> fail GHC.Prim.void#
                        Data.Either.Right ds3
                        -> case ds3 of wild2 { (,) d ds4 ->
                           case ds4 of wild3 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                           case Data.Text.Internal.empty_ of wild4 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> fail GHC.Prim.void#
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds5 ds6 ->
                                case GHC.Prim.narrow32Int# ds6 of wild6 {
                                  DEFAULT -> fail GHC.Prim.void#
                                  0#
                                  -> (# eta,
                                        Data.Either.Right
                                          @ ([Main.Val], Main.ShError)
                                          @ GHC.Types.Double
                                          d #) } } } } } } } } }) -}
4a0ccc4402dd32a7dbee4a13d855d282
  defaultFuncs128 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs129) -}
4fa78f45318caaec37aeb6c386971667
  defaultFuncs129 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" cannot be read as number"#) -}
1439100a08cdcfb099f370b7a3b26df6
  defaultFuncs13 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs292
                   Main.defaultFuncs14) -}
807c2951b96f648526022e1bb7cb3d20
  defaultFuncs130 :: Main.Eval Main.Env
  {- Strictness: x -}
68ac465b630922503a631e2d9db57b0d
  defaultFuncs131 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs132) -}
79ab1528a112599b2738f2e15d3af6d1
  defaultFuncs132 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("timeo"#) -}
a145e79b39f3e182b8f045ac1268f9ad
  defaultFuncs133 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs139, Main.defaultFuncs134)) -}
6301b9c168e40af58445a225431bd81b
  defaultFuncs134 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs138
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs135) -}
34dcb1b145a4d8726cc878415ea68a9f
  defaultFuncs135 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs136
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
6e12b12888b51564819f35dc5336a455
  defaultFuncs136 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs137) -}
24022aca1b442014a6b4beb081346341
  defaultFuncs137 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("{-r|-c|-f} NUMBER"#) -}
bd3eae5ed87a68006a59f3150ce3f673
  defaultFuncs138 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U> -}
ce9fbbf20d35ccfe02a91a31585935a1
  defaultFuncs139 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs140) -}
bafc4e024e1d3c6f3b5c0d9e6c4d255c
  defaultFuncs14 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs287
                   Main.defaultFuncs15) -}
86049845a65ec720bc5051a4c685dc9f
  defaultFuncs140 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("int"#) -}
6fa3fa82f5f23e6a27807127158f83a9
  defaultFuncs141 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs147, Main.defaultFuncs142)) -}
a934cfdcc7de7142f02265e2e8a16282
  defaultFuncs142 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs146
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs143) -}
a6ba1f0448b933c97a764899b3dc5ad2
  defaultFuncs143 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs144
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
8cf6317604216a13efeb985e63de1d46
  defaultFuncs144 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs145) -}
21599ddb94dfafeb1004eb80b30bfb2e
  defaultFuncs145 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NUMBER [NUMBER] LIST"#) -}
27a4817ca33545bf4e7c4ffa6f39a7c3
  defaultFuncs146 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
8bb2fdf6ce739f5c86fcd8b4b5640e8a
  defaultFuncs147 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs148) -}
59275859cc152072251ecc8af9867ed7
  defaultFuncs148 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("idx"#) -}
946abd0a27541a5fb0e714cb4fc0bdcd
  defaultFuncs149 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs156, Main.defaultFuncs150)) -}
0d8b3bdf620292bd9bb6588ceb829b71
  defaultFuncs15 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs274
                   Main.defaultFuncs16) -}
aaffa8f30e857019c7f42d28189cf833
  defaultFuncs150 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs154
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs151) -}
1cddeb76235b0ddee03cd15b2828f5ab
  defaultFuncs151 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs152
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
f7c4978ec93d5979de08911b6a6904b5
  defaultFuncs152 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs153) -}
2121575a7c7f0fd3dc11cb560c24d8fc
  defaultFuncs153 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("VALUE..."#) -}
49038c3ef9eb7726d8db74d410fed54a
  defaultFuncs154 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 letrec {
                   go16 :: [Main.Val]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.Either.Either ([Main.Val], Main.ShError) [Main.Val] #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [Main.Val])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ds of wild {
                       [] -> (# eta1, Main.defaultFuncs155 #)
                       : y ys
                       -> case Main.$wexpand env1 y eta1 of ds1 { (#,#) ipv14 ipv15 ->
                          case ipv15 of wild1 {
                            Data.Either.Left x3
                            -> (# ipv14,
                                  Data.Either.Left @ ([Main.Val], Main.ShError) @ [Main.Val] x3 #)
                            Data.Either.Right y1
                            -> case go16 ys ipv14 of ds2 { (#,#) ipv16 ipv17 ->
                               case ipv17 of wild2 {
                                 Data.Either.Left e1 -> ds2
                                 Data.Either.Right x3
                                 -> (# ipv16,
                                       Data.Either.Right
                                         @ ([Main.Val], Main.ShError)
                                         @ [Main.Val]
                                         (GHC.Types.:
                                            @ Main.Val
                                            (case y1 of wild3 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                                             let {
                                               end :: GHC.Prim.Int# = GHC.Prim.+# dt62 dt63
                                             } in
                                             letrec {
                                               $wloop_length :: GHC.Prim.Int#
                                                                -> GHC.Prim.Int# -> Main.Val
                                                 <join 2> {- Arity: 2, Strictness: <S,U><S,U>,
                                                             Inline: [0] -}
                                               = \ (ww :: GHC.Prim.Int#) (ww1 :: GHC.Prim.Int#) ->
                                                 case GHC.Prim.>=# ww1 end of lwild {
                                                   DEFAULT
                                                   -> case GHC.Prim.indexWord16Array#
                                                             dt61
                                                             ww1 of r# { DEFAULT ->
                                                      case GHC.Prim.geWord# r# 55296## of lwild1 {
                                                        DEFAULT
                                                        -> $wloop_length
                                                             (GHC.Prim.+# ww 1#)
                                                             (GHC.Prim.+# ww1 1#)
                                                        1#
                                                        -> case GHC.Prim.leWord#
                                                                  r#
                                                                  56319## of lwild2 {
                                                             DEFAULT
                                                             -> $wloop_length
                                                                  (GHC.Prim.+# ww 1#)
                                                                  (GHC.Prim.+# ww1 1#)
                                                             1#
                                                             -> $wloop_length
                                                                  (GHC.Prim.+# ww 1#)
                                                                  (GHC.Prim.+# ww1 2#) } } }
                                                   1# -> Main.Float (GHC.Prim.int2Double# ww) }
                                             } in
                                             $wloop_length 0# dt62 })
                                            x3) #) } } } } }
                 } in
                 case go16 xs eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left e1
                   -> (# ipv14,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                   Data.Either.Right x3
                   -> case x3 of l { DEFAULT ->
                      (# ipv14,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.True
                              l
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) } } } }) -}
1df2201ae523206d84a5585e03076db2
  defaultFuncs155 ::
    Data.Either.Either ([Main.Val], Main.ShError) [Main.Val]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ ([Main.Val], Main.ShError)
                   @ [Main.Val]
                   (GHC.Types.[] @ Main.Val)) -}
510aec95dc4419f67d6cf62d779834f2
  defaultFuncs156 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs157) -}
0c11abf5c7c7c9d0d9114e43ccdba930
  defaultFuncs157 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("lenc"#) -}
a8ebb6254ea68ebd8243f1b3c8a02b8c
  defaultFuncs158 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs162, Main.defaultFuncs159)) -}
6ab5a2d524f6b2421c0b7cea3d6d8a18
  defaultFuncs159 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs160
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs151) -}
200804aca40aa71c5a1a5fcbe0289e55
  defaultFuncs16 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs269
                   Main.defaultFuncs17) -}
00dede06a65cc3574acc6472d81234fc
  defaultFuncs160 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (case GHC.Base.build
                              @ Main.Val
                              (\ @ b1
                                 (c :: Main.Val -> b1 -> b1)[OneShot]
                                 (n13 :: b1)[OneShot] ->
                               GHC.Base.foldr
                                 @ Main.Val
                                 @ b1
                                 (GHC.Base.mapFB @ Main.Val @ b1 @ Main.Val c Main.defaultFuncs161)
                                 n13
                                 xs1) of dt61 { DEFAULT ->
                       Main.Env
                         GHC.Types.True
                         dt61
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13 }) #) } }) -}
e4ec9ea659c0570b67cab1b973a82de9
  defaultFuncs161 :: Main.Val -> Main.Val
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U>m1, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Main.Val) ->
                 case w of wild {
                   DEFAULT -> Main.Float 1.0##
                   Main.List xs
                   -> case GHC.List.$wlenAcc @ Main.Val xs 0# of ww2 { DEFAULT ->
                      Main.Float (GHC.Prim.int2Double# ww2) } }) -}
9d290467b968af26bafaaba65fdcbce2
  defaultFuncs162 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs163) -}
477f5c0e5b2ad762760f990a9d47e8d9
  defaultFuncs163 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("len"#) -}
1b30466e3eae01febd5b24f298655406
  defaultFuncs164 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs171, Main.defaultFuncs165)) -}
b1292bed084fc077b6e4a00519f043d5
  defaultFuncs165 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs169
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs166) -}
b5285bdb7a5e2ae68320ebb6d55e01c5
  defaultFuncs166 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs167
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
bc92bd3139b442030fd3f02414d8bdd9
  defaultFuncs167 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs168) -}
661f802d73c284ba6a46a92e5ab39842
  defaultFuncs168 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("[-br] COMMAND [ARG]... VALUE LIST"#) -}
a08c8c56b62cfc7fec8da49379805f47
  defaultFuncs169 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Unfolding: (Main.defaultFuncs170
                   Data.Text.Internal.empty_
                   GHC.Types.False
                   GHC.Types.False) -}
e4ce83d28982fe5d55441f00f02cc5e7
  defaultFuncs17 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs265
                   Main.defaultFuncs18) -}
2de5039d49bedd97f3d6fa11263b7528
  defaultFuncs170 ::
    Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U> -}
c8ce8d9bc63f9cdb4abebca01a134b9e
  defaultFuncs171 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs172) -}
20ba851bf302791d1ac57444afd5111c
  defaultFuncs172 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fold"#) -}
c18f6e3cf26c6879937c31f7b2775393
  defaultFuncs173 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs180, Main.defaultFuncs174)) -}
6164cc76aefbfa0649acee6a59c26d4c
  defaultFuncs174 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs178
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs175) -}
f80fcda646af2cd10cc91b3ac37b21f7
  defaultFuncs175 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs176
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
97212adc9241e2b5352319a37e574527
  defaultFuncs176 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs177) -}
3567f23c16bb18d831ed9f3d5733bd6e
  defaultFuncs177 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[-br] COMMAND [ARG]... LIST"#) -}
735a4c67ecad679d997eeaebd6492584
  defaultFuncs178 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Unfolding: (Main.defaultFuncs179
                   Data.Text.Internal.empty_
                   GHC.Types.False
                   GHC.Types.False) -}
f6086c19147c9443103c600d5539311e
  defaultFuncs179 ::
    Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U> -}
5852357d4e35cc5bdb1616791692072a
  defaultFuncs18 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs259
                   Main.defaultFuncs19) -}
6ab9f3d320e86a9d3d4c09df5e3d185d
  defaultFuncs180 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs181) -}
1999785a8ffccab49b1c48167b36677f
  defaultFuncs181 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("map"#) -}
d8b48fb6dd380f4be7359ec5d84e6ca1
  defaultFuncs182 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs188, Main.defaultFuncs183)) -}
6af85dc63fe61d1aa152dfca5282b5af
  defaultFuncs183 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs187
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs184) -}
f8a4769b677c54bfc67b4637ee0baf7c
  defaultFuncs184 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs185
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
cba6dfffb9a7a19235dcd2ef028cd9d2
  defaultFuncs185 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs186) -}
93d0afa64a37005a2e405dfd156156d5
  defaultFuncs186 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NAME STRING"#) -}
bf0177e56a92863b07c72e45ca16fc66
  defaultFuncs187 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
8d18158d7cb1682e09abd1249ef19999
  defaultFuncs188 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs189) -}
a8d3b4da74f33d77b8580bc5f932881f
  defaultFuncs189 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("setenv"#) -}
2866ec4c381604abbfa0e59898acc793
  defaultFuncs19 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs247
                   Main.defaultFuncs20) -}
e774f433b474409637f78da38e59dd92
  defaultFuncs190 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs201, Main.defaultFuncs191)) -}
88d1f070865a5b04769d756865c983a1
  defaultFuncs191 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs195
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs192) -}
983eaa705c721f85a0e121026d823e9f
  defaultFuncs192 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs193
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
0346e6074ab5b851eab2a23e4006c854
  defaultFuncs193 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs194) -}
54f73ad6c644b573edd2d36b79cae174
  defaultFuncs194 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NAME"#) -}
3b9a669ca081807b29225be467f7f534
  defaultFuncs195 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   [] -> (# eta, Main.defaultFuncs198 #)
                   : x3 ds1
                   -> case ds1 of wild1 {
                        []
                        -> case Main.$wexpand env1 x3 eta of ds2 { (#,#) ipv14 ipv15 ->
                           case ipv15 of wild2 {
                             Data.Either.Left e1
                             -> (# ipv14,
                                   Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                             Data.Either.Right x4
                             -> case (GHC.Magic.noinline
                                        @ (GHC.Types.IO GHC.IO.Encoding.Types.TextEncoding)
                                        GHC.IO.Encoding.getForeignEncoding)
                                       `cast`
                                     (GHC.Types.N:IO[0] <GHC.IO.Encoding.Types.TextEncoding>_R)
                                       ipv14 of ds3 { (#,#) ipv16 ipv17 ->
                                let {
                                  name1 :: GHC.Base.String
                                  = case x4 of wild3 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                                    let {
                                      end :: GHC.Prim.Int# = GHC.Prim.+# dt62 dt63
                                    } in
                                    letrec {
                                      $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                                        {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                                      = \ (ww :: GHC.Prim.Int#) ->
                                        case GHC.Prim.>=# ww end of lwild {
                                          DEFAULT
                                          -> case GHC.Prim.indexWord16Array#
                                                    dt61
                                                    ww of r# { DEFAULT ->
                                             case GHC.Prim.geWord# r# 55296## of lwild1 {
                                               DEFAULT
                                               -> GHC.Types.:
                                                    @ GHC.Types.Char
                                                    (GHC.Types.C#
                                                       (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                    ($wunfold (GHC.Prim.+# ww 1#))
                                               1#
                                               -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                                    DEFAULT
                                                    -> GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Types.C#
                                                            (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                                         ($wunfold (GHC.Prim.+# ww 1#))
                                                    1#
                                                    -> case GHC.Prim.indexWord16Array#
                                                              dt61
                                                              (GHC.Prim.+#
                                                                 ww
                                                                 1#) of r#1 { DEFAULT ->
                                                       GHC.Types.:
                                                         @ GHC.Types.Char
                                                         (GHC.Types.C#
                                                            (GHC.Prim.chr#
                                                               (GHC.Prim.+#
                                                                  (GHC.Prim.+#
                                                                     (GHC.Prim.uncheckedIShiftL#
                                                                        (GHC.Prim.-#
                                                                           (GHC.Prim.word2Int# r#)
                                                                           55296#)
                                                                        10#)
                                                                     (GHC.Prim.-#
                                                                        (GHC.Prim.word2Int# r#1)
                                                                        56320#))
                                                                  65536#)))
                                                         ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                                          1# -> GHC.Types.[] @ GHC.Types.Char }
                                    } in
                                    $wunfold dt62 }
                                } in
                                case GHC.Foreign.charIsRepresentable3
                                       @ (GHC.Base.Maybe GHC.Base.String)
                                       ipv17
                                       name1
                                       System.Environment.getEnv3
                                         `cast`
                                       (<Foreign.C.String.CString>_R
                                        ->_R Sym (GHC.Types.N:IO[0]
                                                      <GHC.Base.Maybe GHC.Base.String>_R))
                                       ipv16 of ds4 { (#,#) ipv18 ipv19 ->
                                case ipv19 of wild3 {
                                  GHC.Base.Nothing
                                  -> case System.Environment.getEnv2 ipv18 name1
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.Either.Either
                                                 ([Main.Val], Main.ShError) Main.Env #)
                                     of {}
                                  GHC.Base.Just x5
                                  -> case x5 of y { DEFAULT ->
                                     (# ipv18,
                                        Data.Either.Right
                                          @ ([Main.Val], Main.ShError)
                                          @ Main.Env
                                          (Main.Env
                                             GHC.Types.True
                                             (GHC.Types.:
                                                @ Main.Val
                                                (case GHC.Magic.runRW#
                                                        @ ('GHC.Types.TupleRep
                                                             '['GHC.Types.TupleRep '[],
                                                               'GHC.Types.LiftedRep])
                                                        @ (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                             Data.Text.Internal.Text #)
                                                        (\ (s1 :: GHC.Prim.State#
                                                                    GHC.Prim.RealWorld)[OneShot] ->
                                                         case GHC.Prim.newByteArray#
                                                                @ GHC.Prim.RealWorld
                                                                10#
                                                                s1 of ds5 { (#,#) ipv20 ipv21 ->
                                                         Main.$wouter2
                                                           ipv21
                                                           4#
                                                           y
                                                           0#
                                                           ipv20 }) of ds5 { (#,#) ipv20 ipv21 ->
                                                 case ipv21 of dt61 { Data.Text.Internal.Text ipv22 ipv23 ipv24 ->
                                                 Main.Str
                                                   (GHC.Base.Nothing @ (GHC.IORef.IORef Main.Cache))
                                                   dt61 } })
                                                (GHC.Types.[] @ Main.Val))
                                             ipv2
                                             ipv3
                                             ipv4
                                             ipv5
                                             ipv6
                                             ipv7
                                             ipv8
                                             ipv9
                                             ipv10
                                             ipv11
                                             ipv12
                                             ipv13) #) } } } } } }
                        : ipv14 ipv15
                        -> (# eta,
                              Data.Either.Left
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.def5,
                                 case GHC.List.$wlenAcc @ Main.Val wild 0# of ww2 { DEFAULT ->
                                 Main.NumArgs Main.defaultFuncs196 ww2 }) #) } } }) -}
8d15de98aead576d8dfb53058527d0fa
  defaultFuncs196 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs197) -}
f305b04418ff83db59ae36ccee4a1edb
  defaultFuncs197 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("1"#) -}
4d601cafa8cbdbc7386b4cd608926a6c
  defaultFuncs198 ::
    Data.Either.Either ([Main.Val], Main.ShError) Main.Env
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ ([Main.Val], Main.ShError)
                   @ Main.Env
                   Main.defaultFuncs199) -}
2648ad1496089f2325e4bcc6283fd116
  defaultFuncs199 :: ([Main.Val], Main.ShError)
  {- Strictness: m, Unfolding: ((Main.def5, Main.defaultFuncs200)) -}
6f77958a98539e3ba0c5445054e6df7e
  defaultFuncs2 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs363
                   Main.defaultFuncs3) -}
a43fe2ad4c94da39e3c7115b4e4b88b5
  defaultFuncs20 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs244
                   Main.defaultFuncs21) -}
4e77bcb24d42b735359f2a2c24bb4e66
  defaultFuncs200 :: Main.ShError
  {- Unfolding: (case GHC.List.$wlenAcc
                        @ Main.Val
                        (GHC.Types.[] @ Main.Val)
                        0# of ww2 { DEFAULT ->
                 Main.NumArgs Main.defaultFuncs196 ww2 }) -}
caa8dbaec0a8a18645afc279b16f6876
  defaultFuncs201 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs202) -}
8a7e0007249bff16a1873efa801cf971
  defaultFuncs202 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("getenv"#) -}
44cfdaf016eed0b050a480716ba51b66
  defaultFuncs203 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs209, Main.defaultFuncs204)) -}
c7139c155ab6c2d15754578142d6008d
  defaultFuncs204 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs208
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs205) -}
8c12f7faaf3f6f62c0c38e84761f0387
  defaultFuncs205 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs206
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
8231cb407bc37b7a763e637af5a16190
  defaultFuncs206 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs207) -}
565ffefe45ccafc092b0eb9b096f60e4
  defaultFuncs207 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("REGEXP REPLACEMENT STRING"#) -}
d4c315ec9feceb0a759180d8f0438821
  defaultFuncs208 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
0d071f5489172701a12f2d5abf0ef338
  defaultFuncs209 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs210) -}
35ce30a481eff9133b19ad4b8578eb7d
  defaultFuncs21 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs234
                   Main.defaultFuncs22) -}
82181227f520fbbf2d81352195c3c9b4
  defaultFuncs210 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("sub"#) -}
f2cfcd791a66ce19d137b1031c77457d
  defaultFuncs211 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs217, Main.defaultFuncs212)) -}
9d7a3538e1a8187477629fed0f14f2b0
  defaultFuncs212 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs216
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs213) -}
29d275272871b78266a4e06fa8a117ac
  defaultFuncs213 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs214
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
44b7f027aed65098f48a5495a2f70e45
  defaultFuncs214 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs215) -}
09a4a2fee456bcfcb55b393fcfccc327
  defaultFuncs215 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[SEPARATOR] STRING"#) -}
6a02c626b11da9d33b1f2202bbda376f
  defaultFuncs216 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
7633098d7d3a2f9f5d56eb320cff49da
  defaultFuncs217 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs218) -}
dfb816326c90b48ac8af76cbc358a77f
  defaultFuncs218 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("sep"#) -}
73ef153f1d6a1e9388648592e57cded0
  defaultFuncs219 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs225, Main.defaultFuncs220)) -}
809f2af55a0942de0fc2e93354809cad
  defaultFuncs22 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs227
                   Main.defaultFuncs23) -}
fa7b65cf1cde8fee603106513f6f10cc
  defaultFuncs220 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs224
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs221) -}
66e7410aaf1b300e53a3447ffec73707
  defaultFuncs221 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs222
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
7265dce1ecd92bc1f1a4a39588c6d38a
  defaultFuncs222 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs223) -}
74aa132d79ecbf0f3301ab7d1f2f174d
  defaultFuncs223 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[-f] EXPRESSION..."#) -}
7e16f64faec25208cd6f806bd8a8496f
  defaultFuncs224 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
ac2b3ce973bbbe1329122812d84b8c9f
  defaultFuncs225 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs226) -}
2ff4b836637ed45aa50edf0dc1ce5fea
  defaultFuncs226 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("glob"#) -}
7aafd43efa48100a335e7c34ec68ab0f
  defaultFuncs227 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs232, Main.defaultFuncs228)) -}
7d1fd17547985a82ca3e0d8f704691e7
  defaultFuncs228 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs229
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs151) -}
2684c5f02449c7565ebdc269aac6ae11
  defaultFuncs229 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (eta :: Main.Env)
                   (eta1 :: [Main.Val])
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of env { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case eta1 of xs { DEFAULT ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv5
                        (case Main.defaultFuncs_go xs of wild {
                           [] -> GHC.Types.[] @ GHC.Types.Char : ds1 xs1 -> xs1 })
                        GHC.Types.True
                        eta2 of ds1 { (#,#) ipv14 ipv15 ->
                 (# ipv14,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (Main.Env
                         GHC.Types.True
                         Main.defaultFuncs230
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13) #) } } }) -}
1a3cb55a5051b251e6e5567b95d92057
  defaultFuncs23 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs219
                   Main.defaultFuncs24) -}
e790f08deb078d7ce1313d99e6c26883
  defaultFuncs230 :: [Main.Val]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Val
                   Main.defaultFuncs231
                   (GHC.Types.[] @ Main.Val)) -}
3a3e4e57dd37719efb9aca019569e676
  defaultFuncs231 :: Main.Val
  {- HasNoCafRefs, Strictness: m1, Unfolding: (Main.Float 0.0##) -}
e770be341cc357976e2a5935e63cfa86
  defaultFuncs232 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs233) -}
21c75f2fe7e23e76d3e91ffd50b1733a
  defaultFuncs233 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("show"#) -}
fd4a924d82f8388d54eade5ca29a7c1f
  defaultFuncs234 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs242, Main.defaultFuncs235)) -}
99bbd0182168f88ebb78eaeacc8fb5a5
  defaultFuncs235 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs239
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs236) -}
f66e41db0deed339dc781cffccf2047f
  defaultFuncs236 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs237
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
6db8c82bb04ebe68e0b760bdd4f1fe96
  defaultFuncs237 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs238) -}
4e8601ae09130b2c0feb2400d6685ff4
  defaultFuncs238 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[VALUE]..."#) -}
04613c3c70e6cf6abde56a5bc3d80d1e
  defaultFuncs239 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 letrec {
                   go16 :: [Main.Val]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.Either.Either
                                   ([Main.Val], Main.ShError) [Data.Text.Internal.Text] #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [Main.Val])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ds of wild {
                       [] -> (# eta1, Main.defaultFuncs241 #)
                       : y ys
                       -> case Main.$wexpand env1 y eta1 of ds1 { (#,#) ipv14 ipv15 ->
                          case ipv15 of wild1 {
                            Data.Either.Left x3
                            -> (# ipv14,
                                  Data.Either.Left
                                    @ ([Main.Val], Main.ShError)
                                    @ [Data.Text.Internal.Text]
                                    x3 #)
                            Data.Either.Right y1
                            -> case go16 ys ipv14 of ds2 { (#,#) ipv16 ipv17 ->
                               case ipv17 of wild2 {
                                 Data.Either.Left e1 -> ds2
                                 Data.Either.Right x3
                                 -> (# ipv16,
                                       Data.Either.Right
                                         @ ([Main.Val], Main.ShError)
                                         @ [Data.Text.Internal.Text]
                                         (GHC.Types.: @ Data.Text.Internal.Text y1 x3) #) } } } } }
                 } in
                 case go16 xs eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left e1
                   -> (# ipv14,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                   Data.Either.Right x3
                   -> case x3 of x4 { DEFAULT ->
                      case Data.Text.IO.appendFile2
                             ipv5
                             (case x4 of wild1 {
                                [] -> Main.defaultFuncs240
                                : x5 xs1
                                -> Data.Text.concat
                                     (GHC.Types.:
                                        @ Data.Text.Internal.Text
                                        x5
                                        (Main.defaultFuncs_go2 xs1)) })
                             ipv14 of ds2 { (#,#) ipv16 ipv17 ->
                      case GHC.IO.Handle.Text.$whPutChar
                             ipv5
                             '\n'#
                             ipv16 of ds3 { (#,#) ipv18 ipv19 ->
                      (# ipv18,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.True
                              Main.defaultFuncs230
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) } } } } } }) -}
8807050f0f7d11623264d225977764bf
  defaultFuncs24 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs211
                   Main.defaultFuncs25) -}
f0d6735a5097027f0dfeb702ec022bb5
  defaultFuncs240 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.concat
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
e8381b7cc85efa3d1b8d17aac71c4777
  defaultFuncs241 ::
    Data.Either.Either
      ([Main.Val], Main.ShError) [Data.Text.Internal.Text]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Data.Either.Right
                   @ ([Main.Val], Main.ShError)
                   @ [Data.Text.Internal.Text]
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
3a59387bd77168808fad887b7cb4c0e2
  defaultFuncs242 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs243) -}
53816e3f8601e725a8dc3c6080126cd8
  defaultFuncs243 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("print"#) -}
e64e6b69aa92d5130cff4af53fea1bbc
  defaultFuncs244 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs245, Main.defaultFuncs235)) -}
8d2667876e84b8c053919e8542a4626a
  defaultFuncs245 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs246) -}
6e00e8657268f681dc2c78d0b55481d2
  defaultFuncs246 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("echo"#) -}
152b1a63aaf476e4cee24bb7aa81a61b
  defaultFuncs247 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs257, Main.defaultFuncs248)) -}
df8877a0ecb1e1ffff15031bf017aa96
  defaultFuncs248 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs252
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs249) -}
cecb13c5c941a50c3c6bf6897cf0dc87
  defaultFuncs249 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs250
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
33bc67f53e844a16e9162aceef4f16d1
  defaultFuncs25 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs203
                   Main.defaultFuncs26) -}
f3ef2a01c0c32458fe810373e099ee42
  defaultFuncs250 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs251) -}
031e9066862cc80163e2fbfcb284aa85
  defaultFuncs251 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[-i] [-n COUNT]"#) -}
26d85fe0b526fb251411e131a23f3eef
  defaultFuncs252 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 Main.defaultFuncs256
                   Data.Text.Internal.empty_
                   GHC.Types.False
                   GHC.Types.True
                   Main.defaultFuncs255
                   Main.defaultFuncs253
                   env1
                   xs1
                   eta } }) -}
b5de3d8e450d94c953a6ffb5441ae430
  defaultFuncs253 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs254) -}
386bd6f1f58e18ec3e0adceee86cfc83
  defaultFuncs254 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("\n"#) -}
db195fd0cf60957c1980f58c9713d0f0
  defaultFuncs255 :: GHC.Types.Int
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.I# -1#) -}
849cec2a570399ca51bc2d1f3dd095d4
  defaultFuncs256 ::
    Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Base.String
    -> Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 8,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S,1*U(U)><S,1*U><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U> -}
eec516e0700a2b65f618b8f631fca200
  defaultFuncs257 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs258) -}
5ff893b5791645fff1b8c0ada23864fc
  defaultFuncs258 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("read"#) -}
6a38f1c6aa26d03bb6dce30ecfec6e45
  defaultFuncs259 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs263, Main.defaultFuncs260)) -}
e0617e7cdad64f6211b0e44320fba441
  defaultFuncs26 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs190
                   Main.defaultFuncs27) -}
094d29543ae76501f387d13ae3fa15fa
  defaultFuncs260 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs261
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs46) -}
29405b934f018370d674df849960610b
  defaultFuncs261 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   []
                   -> case Main.defaultFuncs262
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                      of {}
                   : ds1 xs
                   -> case ds1 of wild1 {
                        DEFAULT
                        -> case Main.defaultFuncs262
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                           of {}
                        Main.Bool b
                        -> (# eta,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (case xs of dt61 { DEFAULT ->
                                 Main.Env
                                   b
                                   dt61
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv7
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13 }) #) } } }) -}
84b3bafc2790eae91f1f9523c0ed3cbf
  defaultFuncs262 :: Main.Eval Main.Env
  {- Strictness: x -}
d354355e93b74524d1e188e6192d5ee3
  defaultFuncs263 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs264) -}
1916cb2bf15824b9ab2044741a9337b5
  defaultFuncs264 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ubool"#) -}
bcf92c046746969a9e956166ef52e1b0
  defaultFuncs265 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs267, Main.defaultFuncs266)) -}
b58bc02c5e4805f653c47fe9b29ba120
  defaultFuncs266 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.bool1
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs46) -}
a1a83cdcb9a1b75e04af9a4f9f697c67
  defaultFuncs267 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs268) -}
1f60ad1134d749163b792be6e35d5c0e
  defaultFuncs268 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("bool"#) -}
646319af861b4a2274bde66cb32c793a
  defaultFuncs269 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs272, Main.defaultFuncs270)) -}
9bc53c6656cc7ada78129b4393bacd85
  defaultFuncs27 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs182
                   Main.defaultFuncs28) -}
0262f6323ac302e2e62d57332f5703bd
  defaultFuncs270 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs271
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs46) -}
b0f2c55cd51ef08ee2e28ab830e419cc
  defaultFuncs271 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,U><L,U> -}
17736e67765565ba57ac61fade8222ee
  defaultFuncs272 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs273) -}
fc4d31294e3d8db4b118d0d3df89e606
  defaultFuncs273 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("loop"#) -}
0fdbf2199598932276d4538533447346
  defaultFuncs274 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs285, Main.defaultFuncs275)) -}
f35f953dfdbe1c91741bf39b726936f7
  defaultFuncs275 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.defaultFuncs279 @ Main.Env @ [Main.Val] @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs276) -}
fa948b6b5af4c6f1d79e7e51eb411463
  defaultFuncs276 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs277
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
18b9f0cb49defef75c6032d6374e40d3
  defaultFuncs277 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs278) -}
9e5b02b4220d4c811b3a843643147f53
  defaultFuncs278 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("FILE"#) -}
b2289ad2c4a7e2cf219554ceb0ba3f10
  defaultFuncs279 ::
    p1
    -> p2
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ p6
                   @ p7
                   @ a
                   (env :: p6)
                   (xs :: p7)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { DEFAULT ->
                 case xs of xs1 { DEFAULT ->
                 (# eta, Main.defaultFuncs280 @ a #) } }) -}
0186344414440983c399b5ab640cd4d8
  defaultFuncs28 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs173
                   Main.defaultFuncs29) -}
b58adf1adb74d6776b87f36907d9aa23
  defaultFuncs280 :: Data.Either.Either ([Main.Val], Main.ShError) a
  {- Strictness: m1,
     Unfolding: (\ @ a ->
                 Data.Either.Left
                   @ ([Main.Val], Main.ShError)
                   @ a
                   Main.defaultFuncs281) -}
0272fa6b4a1b7d0dc949679f1218295c
  defaultFuncs281 :: ([Main.Val], Main.ShError)
  {- Strictness: m,
     Unfolding: ((GHC.Types.[] @ Main.Val, Main.defaultFuncs282)) -}
b40feb43075c8a3ec2dd8ea3d5b05467
  defaultFuncs282 :: Main.ShError
  {- Strictness: m4,
     Unfolding: (Main.SomeError Main.defaultFuncs283) -}
2c3bd9f6a64cd920525eb46d7b1c1573
  defaultFuncs283 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs284) -}
cd7708c22b3368f02e0df7b2e9e7a4dc
  defaultFuncs284 :: GHC.Prim.Addr#
  {- HasNoCafRefs,
     Unfolding: ("cannot call special functions pia variable"#) -}
78fe27ce779a5a1ec647e50a9f959408
  defaultFuncs285 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs286) -}
a50969cdfacff2067fc8cfbe720e469b
  defaultFuncs286 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("load"#) -}
a597c8c6a49bf43f283421916a78bb7e
  defaultFuncs287 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs290, Main.defaultFuncs288)) -}
7fea3fa6a3996d44ff3273a1b4138672
  defaultFuncs288 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs289
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs192) -}
c48677d251b805f522f0e911a6ef80d3
  defaultFuncs289 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   [] -> (# eta, Main.defaultFuncs198 #)
                   : x3 ds1
                   -> case ds1 of wild1 {
                        []
                        -> case Main.$wexpand env1 x3 eta of ds2 { (#,#) ipv14 ipv15 ->
                           case ipv15 of wild2 {
                             Data.Either.Left e1
                             -> (# ipv14,
                                   Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                             Data.Either.Right x4
                             -> case x4 of n13 { Data.Text.Internal.Text ipv16 ipv17 ipv18 ->
                                case GHC.IO.Handle.Text.hPutStr2
                                       ipv6
                                       (Main.$wusageShow ipv16 ipv17 ipv18)
                                       GHC.Types.True
                                       ipv14 of ds3 { (#,#) ipv19 ipv20 ->
                                (# ipv19,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (Main.Env
                                        GHC.Types.True
                                        (GHC.Types.[] @ Main.Val)
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        ipv7
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13) #) } } } }
                        : ipv14 ipv15
                        -> (# eta,
                              Data.Either.Left
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.def5,
                                 case GHC.List.$wlenAcc @ Main.Val wild 0# of ww2 { DEFAULT ->
                                 Main.NumArgs Main.defaultFuncs196 ww2 }) #) } } }) -}
17e7e0bc98a07a2dd5f61e0a6cff8e24
  defaultFuncs29 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs164
                   Main.defaultFuncs30) -}
277bbdec487599e67c03f41ec2932396
  defaultFuncs290 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs291) -}
c294316c4b4b8762d428378226b0747b
  defaultFuncs291 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("usage"#) -}
97e9755de6105be4559765388e07ec49
  defaultFuncs292 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs297, Main.defaultFuncs293)) -}
7d905bbad56b95bfb627f495f9027a45
  defaultFuncs293 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.cd1
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs294) -}
7b79c0d15190a365ce5d4d3a59b49091
  defaultFuncs294 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs295
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
ed03ff5efd05987761e5f492527ef85f
  defaultFuncs295 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs296) -}
85a412706fb3cb51e9b8806d66f530c4
  defaultFuncs296 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[DIR]"#) -}
6ea91cfa72c2f80d9a58c5aa70160e44
  defaultFuncs297 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs298) -}
952a95d08796d8031eb0b2c606e49935
  defaultFuncs298 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("cd"#) -}
3a6e93d71c63f219dfc6af60660ec6e7
  defaultFuncs299 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs305, Main.defaultFuncs300)) -}
e0e648540e5bf4800016b451c9aab226
  defaultFuncs3 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs358
                   Main.defaultFuncs4) -}
df8978251b56868289a498390ee7d2cb
  defaultFuncs30 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs158
                   Main.defaultFuncs31) -}
969d25bdcc697e60beed9c9607ec6b2b
  defaultFuncs300 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs304
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs301) -}
b6ef7a720caca715d47f0bbe92c756dc
  defaultFuncs301 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs302
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
8c68b0309b277d897aa75bfcc6319c58
  defaultFuncs302 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs303) -}
e6b146d59bedd99c6bf27604f262cd30
  defaultFuncs303 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("COMMAND SIGNAL..."#) -}
6c3931d10892a80e328127c2c08bddba
  defaultFuncs304 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U> -}
232a96a5f1bc574fe1565e10185bb4da
  defaultFuncs305 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs306) -}
320158ee718cc1aa84f1589a9a26e7bc
  defaultFuncs306 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("trap"#) -}
da5d9efad147ff0a045cc1bb541cc50b
  defaultFuncs307 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs312, Main.defaultFuncs308)) -}
a7e58ceb3ee8305832011255a045c5a8
  defaultFuncs308 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.defaultFuncs279 @ Main.Env @ [Main.Val] @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs309) -}
ddfd1eb67d12447484c2198d4a7c716a
  defaultFuncs309 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs310
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
a5ed5d037b8ccb250e121eb436dc1262
  defaultFuncs31 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs149
                   Main.defaultFuncs32) -}
4fcd5aafb359912f7bff6cceba406eb2
  defaultFuncs310 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs311) -}
16ca7624ec43167aa2643002b4fa4f48
  defaultFuncs311 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NAME {COMMAND|VALUE}"#) -}
39cdcd06c1d11cb335dbc553dcd2b53b
  defaultFuncs312 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs313) -}
235f5d2aaa49e5978ef2efebed6b1597
  defaultFuncs313 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("def"#) -}
1f6f2c782e3cac8bc179bdad7fdc62a1
  defaultFuncs314 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs322, Main.defaultFuncs315)) -}
71c8944bcd91ae7ea4e6abfd2ce418bf
  defaultFuncs315 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.defaultFuncs279 @ Main.Env @ [Main.Val] @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs316) -}
38baddcda6b070c42c03e5041a599620
  defaultFuncs316 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs320
                   Main.defaultFuncs317) -}
da3e703a12fa00a33b871b6c9e8b8aad
  defaultFuncs317 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs318
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
97706c585a9bd201a20acf238f1e5bda
  defaultFuncs318 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs319) -}
a2f58dbce9a56bab8e3e095478c8cecd
  defaultFuncs319 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NAME... VALUE"#) -}
497618d4345672cda899b6f49f0a96a2
  defaultFuncs32 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs141
                   Main.defaultFuncs33) -}
3fabbd4dd033adfb76a276de6abd4907
  defaultFuncs320 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs321) -}
419db769227da56bae5e3c8463d29a68
  defaultFuncs321 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("-r NAME... COMMAND"#) -}
eb2b78cd4281732c9f168732ef0b61bf
  defaultFuncs322 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs323) -}
de8c31574b37d05ad09dc99f0c3cba2e
  defaultFuncs323 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("let"#) -}
03e8641bae6fd2712e3ae3f8f16409a1
  defaultFuncs324 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs326, Main.defaultFuncs325)) -}
5d08c0ab625993285db122816149f01b
  defaultFuncs325 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.breakF1 @ Main.Env @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs236) -}
4436437d3dbc47543884875b24101943
  defaultFuncs326 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs327) -}
2468f46f00e02956007caf7e5f0d24f5
  defaultFuncs327 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("breakF"#) -}
5c53ffee06b8e11017913407f011377b
  defaultFuncs328 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs330, Main.defaultFuncs329)) -}
7a2477bc8b2a11a851559d2b42e01751
  defaultFuncs329 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.breakT1 @ Main.Env @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs236) -}
cecacca70a1d09fd1b3d94ab3b282f0d
  defaultFuncs33 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs133
                   Main.defaultFuncs34) -}
db749ee2006a0bd811dc73df9aa852ed
  defaultFuncs330 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs331) -}
3cde2a155e3f9ac4a5aaaca738ca7085
  defaultFuncs331 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("breakT"#) -}
e36da1b237ef93bd22670228dd21dd64
  defaultFuncs332 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs334, Main.defaultFuncs333)) -}
20dbef4156994cda853d06b9585b6831
  defaultFuncs333 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.break'1 @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs236) -}
c14f6311868d9a903700233297c95f18
  defaultFuncs334 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs335) -}
b4289387ad545a7807a0046170a3f510
  defaultFuncs335 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("break"#) -}
9117a7057528ec1300b0e063563daad1
  defaultFuncs336 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs348, Main.defaultFuncs337)) -}
0591c9232ec3150b307b114c0e38e4b4
  defaultFuncs337 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.defaultFuncs341 @ Main.Env @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs338) -}
773221fb6f1542590f53da82e423cf23
  defaultFuncs338 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs339
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
d105633b5b914043966a56440acf6239
  defaultFuncs339 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs340) -}
cf80549fa2ba1cc91fdc6cf783227749
  defaultFuncs34 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs116
                   Main.defaultFuncs35) -}
93b8714c9c890ef4d2217bef282386a7
  defaultFuncs340 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[NUMBER]..."#) -}
58b5f9d45725aa3ae021e8afec6905da
  defaultFuncs341 ::
    p
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: (\ @ p6
                   @ a
                   (env :: p6)
                   (ds :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { DEFAULT ->
                 case ds of wild {
                   [] -> (# eta, Main.defaultFuncs345 @ a #)
                   : x3 ds1
                   -> case Main.defaultFuncs127 x3 eta of ds2 { (#,#) ipv ipv1 ->
                      case ipv1 of wild1 {
                        Data.Either.Left e1
                        -> (# ipv, Data.Either.Left @ ([Main.Val], Main.ShError) @ a e1 #)
                        Data.Either.Right x4
                        -> case x4 of n13 { GHC.Types.D# ipv2 ->
                           case GHC.Prim.==## ipv2 0.0## of lwild {
                             DEFAULT
                             -> case GHC.Prim.>## ipv2 0.0## of lwild1 {
                                  DEFAULT
                                  -> (# ipv,
                                        Data.Either.Left
                                          @ ([Main.Val], Main.ShError)
                                          @ a
                                          (Main.def5,
                                           case GHC.Base.++
                                                  @ GHC.Types.Char
                                                  (GHC.Float.$w$sshowSignedFloat
                                                     GHC.Float.$fShowDouble2
                                                     GHC.Float.minExpt
                                                     ipv2
                                                     (GHC.Types.[] @ GHC.Types.Char))
                                                  Main.defaultFuncs343 of dt61 { DEFAULT ->
                                           Main.SomeError dt61 }) #)
                                  1#
                                  -> (# ipv,
                                        Data.Either.Left
                                          @ ([Main.Val], Main.ShError)
                                          @ a
                                          (GHC.Types.:
                                             @ Main.Val
                                             (Main.Float ipv2)
                                             (GHC.Types.[] @ Main.Val),
                                           Main.defaultFuncs342) #) }
                             1# -> (# ipv, Main.defaultFuncs345 @ a #) } } } } } }) -}
3b3df56176d5f3acf504eb468def1fc7
  defaultFuncs342 :: Main.ShError
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.Exited GHC.Types.False) -}
11db6804ee338dcf5695255c488e6608
  defaultFuncs343 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs344) -}
4e362a26fcd35a720cbf454a5cbdf764
  defaultFuncs344 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: (" is not natural number"#) -}
e88db3483bc3c0d6742e73e01bf28d0f
  defaultFuncs345 :: Data.Either.Either ([Main.Val], Main.ShError) a
  {- HasNoCafRefs, Strictness: m1,
     Unfolding: (\ @ a ->
                 Data.Either.Left
                   @ ([Main.Val], Main.ShError)
                   @ a
                   Main.defaultFuncs346) -}
638d0eeb3bd45e2ed11091d5c77c2190
  defaultFuncs346 :: ([Main.Val], Main.ShError)
  {- HasNoCafRefs, Strictness: m,
     Unfolding: ((Main.defaultFuncs230, Main.defaultFuncs347)) -}
2f5c91b449224c5b83ac41d8e4281ace
  defaultFuncs347 :: Main.ShError
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (Main.Exited GHC.Types.True) -}
b0ff8e1c125e1a8fbca2d3efedfc08ce
  defaultFuncs348 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs349) -}
d95ebc6cf4e7d9f5f1940094bced22f8
  defaultFuncs349 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("exit"#) -}
4c7f4f26f5cc5d10e71c4eebf515ae1d
  defaultFuncs35 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs109
                   Main.defaultFuncs36) -}
2d26ef620e6c0192df4d369a0c5fb6c4
  defaultFuncs350 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs353, Main.defaultFuncs351)) -}
e29677c3910306d73de5d34b116a0a9e
  defaultFuncs351 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs352
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs236) -}
08d5dbf8f049b9544cec12863d3b154f
  defaultFuncs352 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (Main.Env
                         GHC.Types.False
                         xs1
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13) #) } }) -}
dcce17a1c15dd4f6933549235977eed9
  defaultFuncs353 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs354) -}
c6811d3e3e705e0c0130916a559b3db5
  defaultFuncs354 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("false"#) -}
843a30c6ca3f8b6cb34468971322fa41
  defaultFuncs355 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs357, Main.defaultFuncs356)) -}
f917617601cab172bfe4e8cc63e5c28d
  defaultFuncs356 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.colon1
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs151) -}
2c51776d61c9cd22d850db6457445301
  defaultFuncs357 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.completeFn3) -}
6f78f4e1337e827d1696a5d52670bd3b
  defaultFuncs358 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs361, Main.defaultFuncs359)) -}
dceecf9b86812a2650420e56fff55ca0
  defaultFuncs359 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs360
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs236) -}
d82239df6b702b9cf7478eb62688e579
  defaultFuncs36 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs104
                   Main.defaultFuncs37) -}
a35a05a49e2b927c54426478619c2771
  defaultFuncs360 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (Main.Env
                         GHC.Types.True
                         xs1
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13) #) } }) -}
1e4b51c2c47af1b73d88817a0d9f6205
  defaultFuncs361 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs362) -}
629e75c4d4739fca4d63eb946e85f603
  defaultFuncs362 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("true"#) -}
3584aaf09cdff56a715a988a86740d02
  defaultFuncs363 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs366, Main.defaultFuncs364)) -}
3a64e1ac6d31b1191510ffc82885ecb6
  defaultFuncs364 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs_$splus''
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs236) -}
4b7959f66733b4a485da429abce16c8b
  defaultFuncs365 ::
    [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) [GHC.Types.Double] #)
  {- Arity: 2, Strictness: <S,1*U><S,U> -}
b5627a496e0307cb5ec99a89ea0850b9
  defaultFuncs366 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs367) -}
6d425c8ad13fffb5b1c090c545746e38
  defaultFuncs367 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("+"#) -}
7382c47df719493f04e8a955d0c48d8d
  defaultFuncs368 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs374, Main.defaultFuncs369)) -}
b2627011e4a11a9d845ffbeef82d65db
  defaultFuncs369 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   (Main.defaultFuncs373 @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs370) -}
d933812c2240268d21f779b2af8d588c
  defaultFuncs37 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs99
                   Main.defaultFuncs38) -}
3b72a3aab3de0801c0a7a2411ff73be5
  defaultFuncs370 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs371
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
6afeb8bbf2914acea2eee39dcc40a277
  defaultFuncs371 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs372) -}
08344394c4d16813690ea1b6d0997611
  defaultFuncs372 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[COMMAND]..."#) -}
b3c85bb09239dc492b4b7fdead83f049
  defaultFuncs373 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) b #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ @ b
                   (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.defaultFuncs51
                        Main.defaultFuncs50
                          `cast`
                        (<Main.Env>_R
                         ->_R <[Main.Val]>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.Either.Either
                                          ([Main.Val], Main.ShError)
                                          Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                   <([Main.Val], Main.ShError)>_N
                                                                   <GHC.Types.IO>_R
                                                                   <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                        xs
                        env
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv, Data.Either.Left @ ([Main.Val], Main.ShError) @ b e1 #)
                   Data.Either.Right x3
                   -> case x3 of renv { Main.Env ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      (# ipv,
                         Data.Either.Left
                           @ ([Main.Val], Main.ShError)
                           @ b
                           (ipv3, Main.Returned ipv2) #) } } }) -}
5335f1458a1602024128f18cdbae255c
  defaultFuncs374 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs375) -}
f44797df014cd515a18a0323b39fbff0
  defaultFuncs375 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ret"#) -}
72be2794cfb6295ee31a67d4695f2ea5
  defaultFuncs38 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs91
                   Main.defaultFuncs39) -}
0b27e59c65eae4f01467f87f9a0a0330
  defaultFuncs39 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs83
                   Main.defaultFuncs40) -}
61707bff82d6805ee4986b0fa4b5c562
  defaultFuncs4 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs355
                   Main.defaultFuncs5) -}
eb08c4d85e7ad817387a107e0b8df0c2
  defaultFuncs40 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs71
                   Main.defaultFuncs41) -}
41d2b7c559683cb0a41d730ebd420ee3
  defaultFuncs41 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs65
                   Main.defaultFuncs42) -}
7f29b600642bc4ff0971b632bcfa75b5
  defaultFuncs42 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs54
                   Main.defaultFuncs43) -}
dda3e2cfb5fd40a60d67e503f875fece
  defaultFuncs43 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs44
                   (GHC.Types.[] @ (Data.Text.Internal.Text, Main.Val))) -}
87e67c93694e4af488854c7a6ba69a43
  defaultFuncs44 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs52, Main.defaultFuncs45)) -}
debf010e8c36048fa1130d8e4c9b9f67
  defaultFuncs45 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs49
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs46) -}
d06d6ed1fc7b742ffdd619036aac5c11
  defaultFuncs46 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs47
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
d6e5df360de5cb1462fb95f62980eac2
  defaultFuncs47 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs48) -}
2fb61ec1c382272859b83a5506459dd6
  defaultFuncs48 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("COMMAND [ARG]..."#) -}
e5e8942d88e7b8b8cfec6519108dc136
  defaultFuncs49 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ipv7 of wild { Main.Flags ds ds1 ->
                 case Main.defaultFuncs51
                        Main.defaultFuncs50
                          `cast`
                        (<Main.Env>_R
                         ->_R <[Main.Val]>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.Either.Either
                                          ([Main.Val], Main.ShError)
                                          Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                   <([Main.Val], Main.ShError)>_N
                                                                   <GHC.Types.IO>_R
                                                                   <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                        xs
                        env1
                        eta of ds2 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild1 {
                   Data.Either.Left l
                   -> case l of wild2 { (,) v ds3 ->
                      case ds3 of wild3 {
                        DEFAULT
                        -> case ds1 of wild4 {
                             GHC.Types.False -> ds2
                             GHC.Types.True
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       ipv6
                                       (case wild3 of wild5 {
                                          Main.SomeError s -> s
                                          Main.NumArgs s dt61
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError7
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError6
                                                     (case GHC.Show.$wshowSignedInt
                                                             0#
                                                             dt61
                                                             (GHC.Types.[]
                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                      GHC.Types.: @ GHC.Types.Char ww5 ww6 })))
                                          Main.TypeMismatch s v1
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError5
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError4
                                                     (Main.$fShowShError_$cshow1 v1)))
                                          Main.UnboundVar t
                                          -> GHC.CString.unpackAppendCString# Main.$fShowShError3 t
                                          Main.Internal s
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError2
                                               s })
                                       GHC.Types.True
                                       ipv14 of ds4 { (#,#) ipv16 ipv17 ->
                                (# ipv16,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (case v of dt61 { DEFAULT ->
                                      Main.Env
                                        GHC.Types.False
                                        dt61
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        wild
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13 }) #) } }
                        Main.Returned s -> ds2
                        Main.Exited s -> ds2
                        Main.Broken s
                        -> (# ipv14,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (case v of dt61 { DEFAULT ->
                                 Main.Env
                                   s
                                   dt61
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   wild
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13 }) #) } }
                   Data.Either.Right r -> ds2 } } } }) -}
ae79e86539a6a8a116fdfbaf2fa21a80
  defaultFuncs5 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs350
                   Main.defaultFuncs6) -}
80ad1f825fcfc27e43e5fa1de32f55f6
  defaultFuncs50 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U> -}
844d0fb0a642f1c19973a60be2f494a1
  defaultFuncs51 ::
    (Main.Env -> [Main.Val] -> Main.Eval Main.Env)
    -> [Main.Val]
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <S,1*U><S,1*U><S(SSSSSSSSSLSLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (d :: Main.Env -> [Main.Val] -> Main.Eval Main.Env)
                   (xs :: [Main.Val])
                   (env :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case d of d1 { DEFAULT ->
                 case Main.boolDispatch_$svalExpandInc
                        eta
                        xs
                        env of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1
                   -> (# ipv,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                   Data.Either.Right x3
                   -> case x3 of wild1 { (,) ys zs ->
                      case ys of wild2 {
                        []
                        -> (# ipv,
                              Data.Either.Right @ ([Main.Val], Main.ShError) @ Main.Env env #)
                        : f4 ys1
                        -> let {
                             fail :: GHC.Prim.Void#
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                               <join 1> {- Arity: 1, Strictness: <L,A> -}
                             = \ (ds :: GHC.Prim.Void#)[OneShot] ->
                               case Main.boolDispatch4 env zs ipv of ds2 { (#,#) ipv2 ipv3 ->
                               case ipv3 of wild3 {
                                 Data.Either.Left e1
                                 -> (# ipv2,
                                       Data.Either.Left
                                         @ ([Main.Val], Main.ShError)
                                         @ Main.Env
                                         e1 #)
                                 Data.Either.Right x4
                                 -> (d1 env (GHC.Base.++_$s++ @ Main.Val x4 f4 ys1))
                                      `cast`
                                    (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                        <([Main.Val],
                                                                          Main.ShError)>_N
                                                                        <GHC.Types.IO>_R
                                                                        <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                           <Data.Either.Either
                                                                                              ([Main.Val],
                                                                                               Main.ShError)
                                                                                              Main.Env>_R))
                                      ipv2 } }
                           } in
                           case f4 of wild3 {
                             DEFAULT -> fail GHC.Prim.void#
                             Main.Bool b -> Main.boolDispatch1 env b ys1 zs ipv
                             Main.Lambda ds ds2 ds3 ds4
                             -> case ds of wild4 {
                                  DEFAULT -> fail GHC.Prim.void#
                                  Main.Expand
                                  -> case (d1
                                             env
                                             (GHC.Types.:
                                                @ Main.Val
                                                wild3
                                                (GHC.Types.[] @ Main.Val)))
                                            `cast`
                                          (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                              <([Main.Val],
                                                                                Main.ShError)>_N
                                                                              <GHC.Types.IO>_R
                                                                              <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                                 <Data.Either.Either
                                                                                                    ([Main.Val],
                                                                                                     Main.ShError)
                                                                                                    Main.Env>_R))
                                            ipv of ds5 { (#,#) ipv2 ipv3 ->
                                     case ipv3 of wild5 {
                                       Data.Either.Left e1 -> ds5
                                       Data.Either.Right x4
                                       -> case x4 of renv { Main.Env ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ipv16 ipv17 ->
                                          Main.boolDispatch1
                                            renv
                                            ipv4
                                            ys1
                                            zs
                                            ipv2 } } } } } } } } } }) -}
c6a3f355fdb4bfd56b0ef342c72a71c7
  defaultFuncs52 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs53) -}
8f0f00620fa5b67bd8d95f020c803af1
  defaultFuncs53 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("keep"#) -}
13dfaebe9b660da89bc32a1771c363cc
  defaultFuncs54 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs63, Main.defaultFuncs55)) -}
e55629a5eb5c77b1f71a797f155a6564
  defaultFuncs55 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs59
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs56) -}
19dd72c654a7caa2efbd86066c726b68
  defaultFuncs56 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs57
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
8f156c79885fe6c4ecb98610746044e9
  defaultFuncs57 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs58) -}
76714de7c935e33717c5afa2e9b81c72
  defaultFuncs58 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("[-d DIR] [-p PREFIX] COMMAND"#) -}
149264bcc073f74f81547da4db60d975
  defaultFuncs59 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Unfolding: (Main.defaultFuncs62
                   Data.Text.Internal.empty_
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.defaultFuncs60) -}
8b9caa43cbbb6316cb148b92d4c7b77c
  defaultFuncs6 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs336
                   Main.defaultFuncs7) -}
b69ba1e5e94b45a5b23a7826ab7d8dea
  defaultFuncs60 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs61) -}
9c11822eba989f5e7d3f0deebdefeae8
  defaultFuncs61 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("snale"#) -}
260ddb5faed12d6f798167dffa864534
  defaultFuncs62 ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><L,U> -}
cb5aec73f79d0110203c9b308216dd13
  defaultFuncs63 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs64) -}
a6a7fd9ed2cc1b2ff08adcdef99547c3
  defaultFuncs64 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tmpd"#) -}
5145505068a26ee79420e2b7ada18d97
  defaultFuncs65 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs69, Main.defaultFuncs66)) -}
ba2a8c502a8b8f3c7c7f624bdb2414e3
  defaultFuncs66 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs67
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs56) -}
d486c3ec71af0e7c5207acadce317f57
  defaultFuncs67 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Unfolding: (Main.defaultFuncs68
                   Data.Text.Internal.empty_
                   (GHC.Base.Nothing @ GHC.Base.String)
                   Main.defaultFuncs60) -}
d2318f0a71c33a3875fa747ceefa481a
  defaultFuncs68 ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><L,U> -}
e348a295260a9d5a248630d5399ff5ed
  defaultFuncs69 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs70) -}
81fd07ecf42ef8267125bfd8cfd530e8
  defaultFuncs7 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs332
                   Main.defaultFuncs8) -}
4d697b6a254c8b71114a62f5b6820208
  defaultFuncs70 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("tmpf"#) -}
a4d3e6d49ada62b752e8dc4784e59776
  defaultFuncs71 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs81, Main.defaultFuncs72)) -}
4d167fa6c528b74abf3e7bca044258b2
  defaultFuncs72 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs73
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs46) -}
4c336a9f3fd563537deaca3bf6b78740
  defaultFuncs73 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 case GHC.Prim.getMaskingState# eta of ds { (#,#) ipv14 ipv15 ->
                 let {
                   io :: GHC.Prim.State# GHC.Prim.RealWorld
                         -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
                     {- Arity: 1, Strictness: <S,U> -}
                   = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case Main.defaultFuncs79 s of ds1 { (#,#) ipv16 ipv17 ->
                     case ipv17 of hs5 { DEFAULT ->
                     case System.Posix.Process.Common.forkProcess1
                            (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                             case {__pkg_ccall unix-2.7.2.2 GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Int# #)}
                                    s1 of wild { (#,#) ds2 ds3 ->
                             case {__pkg_ccall unix-2.7.2.2 GHC.Prim.Int#
                                                            -> GHC.Prim.Int#
                                                            -> GHC.Prim.State# GHC.Prim.RealWorld
                                                            -> (# GHC.Prim.State#
                                                                    GHC.Prim.RealWorld,
                                                                  GHC.Prim.Int# #)}
                                    (GHC.Prim.narrow32Int# ds3)
                                    0#
                                    ds2 of wild1 { (#,#) ds4 ds5 ->
                             case GHC.Prim.narrow32Int# ds5 of wild2 {
                               DEFAULT
                               -> case GHC.Prim.myThreadId# ds4 of ds6 { (#,#) ipv18 ipv19 ->
                                  case GHC.Prim.newMVar#
                                         @ GHC.Prim.RealWorld
                                         @ Main.Env
                                         ipv18 of ds7 { (#,#) ipv20 ipv21 ->
                                  case GHC.Prim.newMutVar#
                                         @ Main.ThreadInfo
                                         @ GHC.Prim.RealWorld
                                         (Main.ThreadInfo
                                            ipv19
                                            ipv21
                                            (GHC.Base.Nothing @ (GHC.MVar.MVar ()))
                                            Main.defaultFuncs78)
                                         ipv20 of ds8 { (#,#) ipv22 ipv23 ->
                                  case Main.defaultFuncs77
                                         (Main.Env
                                            ipv
                                            ipv1
                                            ipv2
                                            ipv3
                                            ipv4
                                            ipv5
                                            ipv6
                                            ipv7
                                            ipv8
                                            ipv9
                                            ipv10
                                            ipv11
                                            ipv23
                                            ipv13)
                                         (Main.defaultFuncs51
                                            Main.defaultFuncs50
                                              `cast`
                                            (<Main.Env>_R
                                             ->_R <[Main.Val]>_R
                                             ->_R Sym (GHC.Types.N:IO[0]
                                                           <Data.Either.Either
                                                              ([Main.Val], Main.ShError)
                                                              Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                       <([Main.Val],
                                                                                         Main.ShError)>_N
                                                                                       <GHC.Types.IO>_R
                                                                                       <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                            xs1
                                            (Main.Env
                                               ipv
                                               ipv1
                                               ipv2
                                               ipv3
                                               ipv4
                                               ipv5
                                               ipv6
                                               ipv7
                                               ipv8
                                               ipv9
                                               ipv10
                                               ipv11
                                               ipv23
                                               ipv13))
                                           `cast`
                                         (Sym (GHC.Types.N:IO[0]
                                                   <Data.Either.Either
                                                      ([Main.Val], Main.ShError)
                                                      Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                               <([Main.Val],
                                                                                 Main.ShError)>_N
                                                                               <GHC.Types.IO>_R
                                                                               <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                         ipv22 of ds9 { (#,#) ipv24 ipv25 ->
                                  Main.defaultFuncs76 ipv25 ipv24 } } } }
                               -1#
                               -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.State#
                                                                    GHC.Prim.RealWorld
                                                                  -> (# GHC.Prim.State#
                                                                          GHC.Prim.RealWorld,
                                                                        GHC.Prim.Int# #)}
                                         ds4 of wild3 { (#,#) ds6 ds7 ->
                                  case System.Posix.Process.Common.createProcessGroupFor2 ds6 ds7
                                  ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                  of {} } } } })
                              `cast`
                            (Sym (GHC.Types.N:IO[0] <()>_R))
                            ipv16 of ds2 { (#,#) ipv18 ipv19 ->
                     case ipv19
                            `cast`
                          (System.Posix.Types.N:CPid[0]) of nt { GHC.Int.I32# ipv20 ->
                     case Main.defaultFuncs75
                            hs5
                            Main.defaultFuncs74
                            ipv18 of ds3 { (#,#) ipv21 ipv22 ->
                     (# ipv21,
                        Main.Env
                          GHC.Types.True
                          (GHC.Types.[] @ Main.Val)
                          ipv2
                          ipv3
                          ipv4
                          ipv5
                          ipv6
                          ipv7
                          ipv8
                          ipv9
                          ipv10
                          ipv11
                          ipv12
                          ipv13 #) } } } } }
                 } in
                 case ipv15 of ds1 {
                   DEFAULT
                   -> case io ipv14 of ds2 { (#,#) ipv16 ipv17 ->
                      (# ipv16,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           ipv17 #) }
                   0#
                   -> case GHC.Prim.maskAsyncExceptions#
                             @ Main.Env
                             io
                             ipv14 of ds2 { (#,#) ipv16 ipv17 ->
                      (# ipv16,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           ipv17 #) } } } } }) -}
caf7f55fcb709db4d6e1e17229ab1791
  defaultFuncs74 :: [Foreign.C.Types.CInt]
  {- Unfolding: (Main.defaultFuncs_go1
                   (GHC.Types.[] @ Foreign.C.Types.CInt)
                   LinuxSignal.signalMap) -}
dea04a2d0a2bc43b3331607400f1dbae
  defaultFuncs75 ::
    [System.Posix.Signals.Handler]
    -> [Foreign.C.Types.CInt]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Posix.Signals.Handler] #)
  {- Arity: 3, Strictness: <S,1*U><L,1*U><S,U> -}
7e741acb1be284bc13ce1a4cc44420c5
  defaultFuncs76 ::
    Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 2,
     Strictness: <S(SSSSSSSSSLSLSL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ThreadInfo
                        ipv12
                        eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of tinfo { Main.ThreadInfo ipv16 ipv17 ipv18 ipv19 ->
                 case Main.defaultFuncs77
                        env1
                        (Main.defaultFuncs51
                           Main.defaultFuncs50
                             `cast`
                           (<Main.Env>_R
                            ->_R <[Main.Val]>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <Data.Either.Either
                                             ([Main.Val], Main.ShError)
                                             Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                      <([Main.Val], Main.ShError)>_N
                                                                      <GHC.Types.IO>_R
                                                                      <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                           (GHC.Types.: @ Main.Val ipv19 ipv1)
                           env1)
                          `cast`
                        (Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                        ipv14 of ds2 { (#,#) ipv20 ipv21 ->
                 case ipv21 of renv { Main.Env ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ipv33 ipv34 ipv35 ->
                 case ipv22 of wild {
                   GHC.Types.False
                   -> case ipv23 of wild1 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                           of {}
                        : x3 ds3
                        -> case Main.readInt x3 of wild2 {
                             GHC.Base.Nothing
                             -> case {__pkg_ccall unix-2.7.2.2 GHC.Prim.Int#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld #)}
                                       1#
                                       ipv20 of wild3 { Unit# ds ->
                                (# ds, GHC.Tuple.() #) }
                             GHC.Base.Just n13
                             -> case n13 of wild3 { GHC.Types.I# x4 ->
                                case x4 of wild4 {
                                  DEFAULT
                                  -> case GHC.Prim.<=# wild4 0# of lwild {
                                       DEFAULT
                                       -> case {__pkg_ccall unix-2.7.2.2 GHC.Prim.Int#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld #)}
                                                 (GHC.Prim.narrow32Int# wild4)
                                                 ipv20 of wild5 { Unit# ds ->
                                          (# ds, GHC.Tuple.() #) }
                                       1#
                                       -> case {__pkg_ccall unix-2.7.2.2 GHC.Prim.Int#
                                                                         -> GHC.Prim.State#
                                                                              GHC.Prim.RealWorld
                                                                         -> (# GHC.Prim.State#
                                                                                 GHC.Prim.RealWorld #)}
                                                 130#
                                                 ipv20 of wild5 { Unit# ds ->
                                          (# ds, GHC.Tuple.() #) } }
                                  0#
                                  -> case {__pkg_ccall unix-2.7.2.2 GHC.Prim.Int#
                                                                    -> GHC.Prim.State#
                                                                         GHC.Prim.RealWorld
                                                                    -> (# GHC.Prim.State#
                                                                            GHC.Prim.RealWorld #)}
                                            1#
                                            ipv20 of wild5 { Unit# ds ->
                                     (# ds, GHC.Tuple.() #) } } } } }
                   GHC.Types.True
                   -> case {__pkg_ccall unix-2.7.2.2 GHC.Prim.Int#
                                                     -> GHC.Prim.State# GHC.Prim.RealWorld
                                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld #)}
                             0#
                             ipv20 of wild1 { Unit# ds ->
                      (# ds, GHC.Tuple.() #) } } } } } } }) -}
224dab657f7a51cfd829597740bdd43d
  defaultFuncs77 ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><C(S(SS)),1*C1(U(U,1*U))><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: Main.Eval Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left l
                   -> case l of wild1 { (,) v ds2 ->
                      case ds2 of wild2 {
                        DEFAULT
                        -> case GHC.IO.Handle.Text.hPutStr2
                                  ipv6
                                  (case wild2 of wild3 {
                                     Main.SomeError s -> s
                                     Main.NumArgs s dt61
                                     -> GHC.CString.unpackAppendCString#
                                          Main.$fShowShError7
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             s
                                             (GHC.CString.unpackAppendCString#
                                                Main.$fShowShError6
                                                (case GHC.Show.$wshowSignedInt
                                                        0#
                                                        dt61
                                                        (GHC.Types.[]
                                                           @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                 GHC.Types.: @ GHC.Types.Char ww5 ww6 })))
                                     Main.TypeMismatch s v1
                                     -> GHC.CString.unpackAppendCString#
                                          Main.$fShowShError5
                                          (GHC.Base.++
                                             @ GHC.Types.Char
                                             s
                                             (GHC.CString.unpackAppendCString#
                                                Main.$fShowShError4
                                                (Main.$fShowShError_$cshow1 v1)))
                                     Main.UnboundVar t
                                     -> GHC.CString.unpackAppendCString# Main.$fShowShError3 t
                                     Main.Internal s
                                     -> GHC.CString.unpackAppendCString# Main.$fShowShError2 s })
                                  GHC.Types.True
                                  ipv14 of ds3 { (#,#) ipv16 ipv17 ->
                           (# ipv16,
                              case v of dt61 { DEFAULT ->
                              Main.Env
                                GHC.Types.False
                                dt61
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                                ipv10
                                ipv11
                                ipv12
                                ipv13 } #) }
                        Main.Returned s
                        -> (# ipv14,
                              case v of dt61 { DEFAULT ->
                              Main.Env
                                s
                                dt61
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                                ipv10
                                ipv11
                                ipv12
                                ipv13 } #)
                        Main.Exited s
                        -> (# ipv14,
                              case v of dt61 { DEFAULT ->
                              Main.Env
                                s
                                dt61
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                                ipv10
                                ipv11
                                ipv12
                                ipv13 } #)
                        Main.Broken s
                        -> (# ipv14,
                              case v of dt61 { DEFAULT ->
                              Main.Env
                                s
                                dt61
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                                ipv10
                                ipv11
                                ipv12
                                ipv13 } #) } }
                   Data.Either.Right r -> (# ipv14, r #) } } }) -}
0668990b0f1bb24f756b022904bc866d
  defaultFuncs78 :: Main.Val
  {- HasNoCafRefs, Strictness: m8,
     Unfolding: (Main.Lambda
                   Main.NoArgs
                   Main.defaultParseEnv
                   (GHC.Base.Nothing @ Main.Env)
                   (Main.$fMonadEval2 @ Main.Env)
                     `cast`
                   (<Main.Env>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))) -}
2a73b8dedcf439010b1949d5acc96fd2
  defaultFuncs79 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Posix.Signals.Handler] #)
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case LinuxSignal.signalMap of wild {
                   Data.HashMap.Base.Empty
                   -> (# eta, GHC.Types.[] @ System.Posix.Signals.Handler #)
                   Data.HashMap.Base.BitmapIndexed dt61 dt62
                   -> Main.$wgo3
                        (Data.HashMap.Array.Array
                           @ (Data.HashMap.Base.HashMap
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt62)
                        (GHC.Prim.sizeofSmallArray#
                           @ (Data.HashMap.Base.HashMap
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt62)
                        0#
                        Main.defaultFuncs80
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <[System.Posix.Signals.Handler]>_R))
                        eta
                   Data.HashMap.Base.Leaf dt61 dt62 dt63
                   -> case dt63
                             `cast`
                           (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv ->
                      case ipv of wild1 {
                        DEFAULT
                        -> case System.Posix.Signals.fullSignalSet
                                  `cast`
                                (System.Posix.Signals.N:SignalSet[0]) of ww2 { GHC.ForeignPtr.ForeignPtr ww3 ww4 ->
                           case System.Posix.Signals.$winSignalSet wild1 ww3 ww4 of wild2 {
                             GHC.Types.False
                             -> (# eta, GHC.Types.[] @ System.Posix.Signals.Handler #)
                             GHC.Types.True
                             -> case System.Posix.Signals.$winstallHandler
                                       nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                       System.Posix.Signals.Default
                                       eta of ds { (#,#) ipv1 ipv2 ->
                                (# ipv1,
                                   GHC.Types.:
                                     @ System.Posix.Signals.Handler
                                     ipv2
                                     (GHC.Types.[] @ System.Posix.Signals.Handler) #) } } }
                        0# -> (# eta, GHC.Types.[] @ System.Posix.Signals.Handler #)
                        9# -> (# eta, GHC.Types.[] @ System.Posix.Signals.Handler #)
                        19# -> (# eta, GHC.Types.[] @ System.Posix.Signals.Handler #) } }
                   Data.HashMap.Base.Full dt61
                   -> Main.$wgo2
                        (Data.HashMap.Array.Array
                           @ (Data.HashMap.Base.HashMap
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt61)
                        (GHC.Prim.sizeofSmallArray#
                           @ (Data.HashMap.Base.HashMap
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt61)
                        0#
                        Main.defaultFuncs80
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <[System.Posix.Signals.Handler]>_R))
                        eta
                   Data.HashMap.Base.Collision dt61 dt62
                   -> Main.defaultFuncs_$s$wgo4
                        eta
                        Main.defaultFuncs80
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <[System.Posix.Signals.Handler]>_R))
                        0#
                        (GHC.Prim.sizeofSmallArray#
                           @ (Data.HashMap.Base.Leaf
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt62)
                        dt62 }) -}
ddb908bfe96f2620645b3b856188bc36
  defaultFuncs8 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs328
                   Main.defaultFuncs9) -}
17caaa69772704f80b4436c4493d1601
  defaultFuncs80 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Posix.Signals.Handler] #)
  {- Arity: 1, HasNoCafRefs, Strictness: <S,U>,
     Unfolding: InlineRule (1, True, False)
                (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 (# s, GHC.Types.[] @ System.Posix.Signals.Handler #)) -}
bba25f173074914d6ed767febab4f43d
  defaultFuncs81 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs82) -}
fab2064630200a12663439fa22c95e7c
  defaultFuncs82 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("fork"#) -}
f3a056510f71e5e7b46df692699eccf4
  defaultFuncs83 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs89, Main.defaultFuncs84)) -}
b3ff13ae4dcbc4638bd68b5a1122c9e3
  defaultFuncs84 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Purely
                   Main.defaultFuncs88
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs85) -}
876a440e878c7703e51948a15b27a5c0
  defaultFuncs85 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs86
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
6c49fa7f330428caf0b2067aff85f1f9
  defaultFuncs86 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs87) -}
ed777f30f533287f25375f992ba1b95c
  defaultFuncs87 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("value..."#) -}
adcc5f1b3bb1a9e7ec3f7a05510b2b3c
  defaultFuncs88 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 (# eta,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (case Main.defaultFuncs_ulist' xs1 of dt61 { DEFAULT ->
                       Main.Env
                         ipv
                         dt61
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13 }) #) } }) -}
bfa8e4d3b70c74153ab1f7f3730c15ae
  defaultFuncs89 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs90) -}
aab7b98c2e36d8d0259fb83e3100ad98
  defaultFuncs9 :: [(Data.Text.Internal.Text, Main.Val)]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (Data.Text.Internal.Text, Main.Val)
                   Main.defaultFuncs324
                   Main.defaultFuncs10) -}
2967971111655b0defcf2301b2e32601
  defaultFuncs90 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("ulist"#) -}
340455c24f50322c111e9a2b9bba6897
  defaultFuncs91 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs97, Main.defaultFuncs92)) -}
09879a78b17362a006e73a5a9a3630e6
  defaultFuncs92 :: Main.Val
  {- Strictness: m10,
     Unfolding: (Main.Prim
                   Main.Normal
                   Main.defaultFuncs96
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   Main.defaultFuncs93) -}
9cbfb61c78532f5ec3bc6322e494572f
  defaultFuncs93 :: [Data.Text.Internal.Text]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Data.Text.Internal.Text
                   Main.defaultFuncs94
                   (GHC.Types.[] @ Data.Text.Internal.Text)) -}
a86c1f77a43abcca5f4bb78ae761d34b
  defaultFuncs94 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs95) -}
f1155c1a804f870e040332085d5b416b
  defaultFuncs95 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("NUMBER"#) -}
daad525b9f4f42e1e9cb1fd1452e5594
  defaultFuncs96 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
d9a4fed241f484ce9eae6e42a94f2ce8
  defaultFuncs97 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString#
                   Main.defaultFuncs98) -}
1a35b86fdc86ef3675be4085ed02fe1d
  defaultFuncs98 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("shift"#) -}
ed22b6b57c6e348e2d5b93303c9fe037
  defaultFuncs99 :: (Data.Text.Internal.Text, Main.Val)
  {- Strictness: m,
     Unfolding: ((Main.defaultFuncs102, Main.defaultFuncs100)) -}
5dcba487d11775688451605f6308132d
  defaultFuncs_$s$wgo1 ::
    [Foreign.C.Types.CInt]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Foreign.C.Types.CInt)
    -> [Foreign.C.Types.CInt]
  {- Arity: 4, Strictness: <L,1*U><S,U><S,U><L,U> -}
c2505d659c45a2f04f81b303c3eedfa3
  defaultFuncs_$s$wgo2 ::
    [Foreign.C.Types.CInt]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Foreign.C.Types.CInt)
    -> [Foreign.C.Types.CInt]
  {- Arity: 4, Strictness: <L,1*U><S,U><S,U><L,U> -}
9d17906feeefd6bad28646b3335709be
  defaultFuncs_$s$wgo3 ::
    [Foreign.C.Types.CInt]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.HashMap
            Data.Text.Internal.Text Foreign.C.Types.CInt)
    -> [Foreign.C.Types.CInt]
  {- Arity: 4, Strictness: <L,1*U><S,U><S,U><L,U> -}
8dadb00905b5a29af46fcd1f933763f9
  defaultFuncs_$s$wgo4 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> GHC.Types.IO [System.Posix.Signals.Handler]
    -> GHC.Prim.Int#
    -> GHC.Prim.Int#
    -> GHC.Prim.SmallArray#
         (Data.HashMap.Base.Leaf
            Data.Text.Internal.Text Foreign.C.Types.CInt)
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Posix.Signals.Handler] #)
  {- Arity: 5, Strictness: <S,U><L,1*C1(U(U,U))><S,U><S,U><L,U> -}
8ea3ce0a94740cadb86d0678dc647032
  defaultFuncs_$sgo1 ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 2, Strictness: <L,U><L,1*U>m2 -}
6fb1c248feb787cfbd435673e0ba7186
  defaultFuncs_$sisList' :: Main.Val -> [Main.Val] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
8ef0396b336dd9ef4e985b4725eee526
  defaultFuncs_$splus'' ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (eta :: Main.Env)
                   (eta1 :: [Main.Val])
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of env { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case Main.defaultFuncs365 eta1 eta2 of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left e1
                   -> (# ipv14,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                   Data.Either.Right x3
                   -> case x3 of ys { DEFAULT ->
                      (# ipv14,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.True
                              (GHC.Types.:
                                 @ Main.Val
                                 (Main.$wgo4 ys 0.0##)
                                 (GHC.Types.[] @ Main.Val))
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) } } } }) -}
8965f81272f5bb7de8d8fc2374c54525
  defaultFuncs_go :: [Main.Val] -> [GHC.Types.Char]
  {- Arity: 1, Strictness: <S,1*U> -}
77c1253b5ec66229806eb93fec93132c
  defaultFuncs_go1 ::
    [Foreign.C.Types.CInt]
    -> Data.HashMap.Base.HashMap
         Data.Text.Internal.Text Foreign.C.Types.CInt
    -> [Foreign.C.Types.CInt]
  {- Arity: 2, Strictness: <L,U><S,1*U>,
     Unfolding: (\ (z :: [Foreign.C.Types.CInt])
                   (ds :: Data.HashMap.Base.HashMap
                            Data.Text.Internal.Text Foreign.C.Types.CInt) ->
                 case ds of wild {
                   Data.HashMap.Base.Empty -> z
                   Data.HashMap.Base.BitmapIndexed dt61 dt62
                   -> Main.defaultFuncs_$s$wgo3
                        z
                        0#
                        (GHC.Prim.sizeofSmallArray#
                           @ (Data.HashMap.Base.HashMap
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt62)
                        dt62
                   Data.HashMap.Base.Leaf dt61 dt62 dt63
                   -> case dt63
                             `cast`
                           (Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv ->
                      case ipv of wild1 {
                        DEFAULT
                        -> case System.Posix.Signals.fullSignalSet
                                  `cast`
                                (System.Posix.Signals.N:SignalSet[0]) of ww2 { GHC.ForeignPtr.ForeignPtr ww3 ww4 ->
                           case System.Posix.Signals.$winSignalSet wild1 ww3 ww4 of wild2 {
                             GHC.Types.False -> z
                             GHC.Types.True
                             -> GHC.Types.:
                                  @ Foreign.C.Types.CInt
                                  nt `cast` (Sym (Foreign.C.Types.N:CInt[0]))
                                  z } }
                        0# -> z
                        9# -> z
                        19# -> z } }
                   Data.HashMap.Base.Full dt61
                   -> Main.defaultFuncs_$s$wgo1
                        z
                        0#
                        (GHC.Prim.sizeofSmallArray#
                           @ (Data.HashMap.Base.HashMap
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt61)
                        dt61
                   Data.HashMap.Base.Collision dt61 dt62
                   -> Main.defaultFuncs_$s$wgo2
                        z
                        0#
                        (GHC.Prim.sizeofSmallArray#
                           @ (Data.HashMap.Base.Leaf
                                Data.Text.Internal.Text Foreign.C.Types.CInt)
                           dt62)
                        dt62 }) -}
9fbff812db13db7a6f6316b893603ee3
  defaultFuncs_go2 ::
    [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
2323c9b4ebdc0806f5f4830b1ddbd747
  defaultFuncs_go3 ::
    [(Data.Text.Internal.Text, Main.Val)]
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
  {- Arity: 2, Strictness: <S,1*U><L,1*U> -}
5f75084d7b16948a7422eeccddba288a
  defaultFuncs_ulist' :: [Main.Val] -> [Main.Val]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
618b40790af8168a05a3fde3d7276769
  defaultParseEnv :: Main.ParseEnv
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.ParseEnv
                   0#
                   (GHC.Base.Nothing @ Main.Val)
                   (Data.HashMap.Base.Empty @ Data.Text.Internal.Text @ ())
                     `cast`
                   (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                   (Data.HashMap.Base.Empty @ Data.Text.Internal.Text @ ())
                     `cast`
                   (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                   (Data.HashMap.Base.Empty @ Data.Text.Internal.Text @ ())
                     `cast`
                   (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                   (Data.HashMap.Base.Empty @ Data.Text.Internal.Text @ ())
                     `cast`
                   (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                   (GHC.Base.Nothing @ Main.Custom)
                   Main.defaultParseEnv1) -}
8cb6ab41eaa7d3fc6884ac49f61458f7
  defaultParseEnv1 :: Main.Flags
  {- HasNoCafRefs, Strictness: m,
     Unfolding: (Main.Flags GHC.Types.False GHC.Types.False) -}
da4666f875a915ff627847a5b96530ad
  defaultVars ::
    Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
  {- Unfolding: (case Data.Text.Show.unpackCString#
                        Main.defaultVars4 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Main.$w$sunsafeInsert
                        @ Main.Val
                        ww1
                        ww2
                        ww3
                        Main.defaultVars3
                        (Data.HashMap.Base.Empty
                           @ Data.Text.Internal.Text
                           @ Main.Val) of z { DEFAULT ->
                 case Data.Text.Show.unpackCString#
                        Main.defaultVars2 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 Main.$w$sunsafeInsert
                   @ Main.Val
                   ww5
                   ww6
                   ww7
                   Main.defaultVars1
                   z } } }) -}
c3f1ada5424182eec8094e18065f2548
  defaultVars1 :: Main.Val
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Main.Bool GHC.Types.False) -}
cad4956122abdda4ecdba3cb9b0031b4
  defaultVars2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("F"#) -}
1d3cf6514a72bef70582353162e73e84
  defaultVars3 :: Main.Val
  {- HasNoCafRefs, Strictness: m3,
     Unfolding: (Main.Bool GHC.Types.True) -}
c44aa8dec08df0269752428f6207c04a
  defaultVars4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("T"#) -}
61d9aba738a7367b1479d90fc7413189
  dir :: Main.Env -> GHC.Base.String
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLSLLL),1*U(A,A,A,A,A,A,A,A,A,A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds10 }) -}
706b3481901ab31bfc0e168d94105e81
  div' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.div'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
8bdf5d3ee8058a53bcf1e29179d2bda8
  div'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.div'2 GHC.Float.divideDouble) -}
12d40ee80e63afa3b1580c11645c7ad6
  div'2 ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
    -> (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 5,
     Strictness: <S,1*U><C(C(S(SS))),1*C1(C1(U(U,1*U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (f4 :: GHC.Types.Double
                          -> GHC.Types.Double -> GHC.Types.Double)
                   (x3 :: Main.Env -> Main.Eval Main.Env)
                   (y :: Main.Env -> Main.Eval Main.Env)
                   (e :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case f4 of f5 { DEFAULT ->
                 case y of y1 { DEFAULT ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (x3 e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left x4
                   -> (# ipv14,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env x4 #)
                   Data.Either.Right y2
                   -> case y2 of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                      case ds2 of wild2 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                           of {}
                        : x4 ds11
                        -> case Main.defaultFuncs127
                                  x4
                                  ipv14 of ds12 { (#,#) ipv16 ipv17 ->
                           case ipv17 of wild3 {
                             Data.Either.Left e2
                             -> (# ipv16,
                                   Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e2 #)
                             Data.Either.Right x5
                             -> case x5 of n13 { GHC.Types.D# ipv18 ->
                                case (y1 e1)
                                       `cast`
                                     (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                         <([Main.Val],
                                                                           Main.ShError)>_N
                                                                         <GHC.Types.IO>_R
                                                                         <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                            <Data.Either.Either
                                                                                               ([Main.Val],
                                                                                                Main.ShError)
                                                                                               Main.Env>_R))
                                       ipv16 of ds13 { (#,#) ipv19 ipv20 ->
                                case ipv20 of wild4 {
                                  Data.Either.Left x6 -> ds13
                                  Data.Either.Right y3
                                  -> case y3 of wild5 { Main.Env ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 dt65 ds23 dt66 dt67 dt68 ->
                                     case ds15 of wild6 {
                                       []
                                       -> case GHC.List.badHead
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.Either.Either
                                                      ([Main.Val], Main.ShError) Main.Env #)
                                          of {}
                                       : x6 ds24
                                       -> case Main.defaultFuncs127
                                                 x6
                                                 ipv19 of ds25 { (#,#) ipv21 ipv22 ->
                                          case ipv22 of wild7 {
                                            Data.Either.Left e2
                                            -> (# ipv21,
                                                  Data.Either.Left
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    e2 #)
                                            Data.Either.Right x7
                                            -> case x7 of m { GHC.Types.D# ipv23 ->
                                               (# ipv21,
                                                  Data.Either.Right
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    (Main.Env
                                                       GHC.Types.True
                                                       (GHC.Types.:
                                                          @ Main.Val
                                                          (case f5
                                                                  n13
                                                                  m of dt69 { GHC.Types.D# dt70 ->
                                                           Main.Float dt70 })
                                                          (GHC.Types.[] @ Main.Val))
                                                       ipv2
                                                       ipv3
                                                       ipv4
                                                       ipv5
                                                       ipv6
                                                       ipv7
                                                       ipv8
                                                       ipv9
                                                       ipv10
                                                       ipv11
                                                       ipv12
                                                       ipv13) #) } } } } } } } } } } } } } } } } }) -}
a5a41504397efd47e4dc9755fe24cd55
  echo :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs239
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
30f7b40cc753853b5db5c990d50d2c59
  eq' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.eq'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
0b6759886419b500b51d29f02c9cb2b6
  eq'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.eq'2 Main.$fEqVal_$c==) -}
e4db7ec06a3537b5628ad8b35ecc1f6f
  eq'2 ::
    (Main.Val -> Main.Val -> GHC.Types.Bool)
    -> (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 5,
     Strictness: <S,1*U><C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (eta :: Main.Val -> Main.Val -> GHC.Types.Bool)
                   (eta1 :: Main.Env -> Main.Eval Main.Env)
                   (eta2 :: Main.Env -> Main.Eval Main.Env)
                   (eta3 :: Main.Env)
                   (eta4 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of f4 { DEFAULT ->
                 case eta2 of y { DEFAULT ->
                 case eta3 of e { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (eta1 e)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta4 of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left x3 -> ds
                   Data.Either.Right y1
                   -> case y1 of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                      case ds2 of wild2 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                           of {}
                        : x3 ds11
                        -> case x3 of n13 { DEFAULT ->
                           case (y e)
                                  `cast`
                                (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                    <([Main.Val], Main.ShError)>_N
                                                                    <GHC.Types.IO>_R
                                                                    <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                       <Data.Either.Either
                                                                                          ([Main.Val],
                                                                                           Main.ShError)
                                                                                          Main.Env>_R))
                                  ipv14 of ds12 { (#,#) ipv16 ipv17 ->
                           case ipv17 of wild3 {
                             Data.Either.Left e1 -> ds12
                             Data.Either.Right x4
                             -> case x4 of m { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                                (# ipv16,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (case f4
                                             n13
                                             (case ipv19 of wild4 {
                                                [] -> GHC.List.badHead @ Main.Val
                                                : x5 ds13 -> x5 }) of dt65 { DEFAULT ->
                                      Main.Env
                                        dt65
                                        ipv19
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        ipv7
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13 }) #) } } } } } } } } } } }) -}
61d9aba738a7367b1479d90fc7413189
  err :: Main.Env -> GHC.IO.Handle.Types.Handle
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds7 }) -}
71c7ddabe7de37736c64da887e33ffb5
  errHandlerIO ::
    Main.Env -> GHC.IO.Exception.IOException -> GHC.Types.IO Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(1*U,1*U,1*U,1*U,A,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.errHandlerIO1
                  `cast`
                (<Main.Env>_R
                 ->_R <GHC.IO.Exception.IOException>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Env>_R)) -}
4c85fe0217ccfe5e282c6fe3581180ff
  errHandlerIO' ::
    GHC.Show.Show a =>
    GHC.Types.Bool
    -> (Main.Env -> b) -> Main.Env -> a -> GHC.Types.IO b
  {- Arity: 6,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U><S,1*U><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.errHandlerIO'1
                  `cast`
                (forall (a :: <*>_N) (b :: <*>_N).
                 <GHC.Show.Show a>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <Main.Env -> b>_R
                 ->_R <Main.Env>_R
                 ->_R <a>_R
                 ->_R Sym (GHC.Types.N:IO[0] <b>_R)) -}
a6d0df9c409f6b1b74e98c2d08271147
  errHandlerIO'1 ::
    GHC.Show.Show a =>
    GHC.Types.Bool
    -> (Main.Env -> b)
    -> Main.Env
    -> a
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, b #)
  {- Arity: 6,
     Strictness: <L,1*U(A,1*C1(U),A)><S,1*U><S,1*U><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ @ a
                   @ b
                   ($dShow :: GHC.Show.Show a)
                   (printMsg :: GHC.Types.Bool)
                   (f4 :: Main.Env -> b)
                   (env :: Main.Env)
                   (e :: a)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case f4 of f5 { DEFAULT ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case e of e1 { DEFAULT ->
                 case printMsg of wild {
                   GHC.Types.False
                   -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.State#
                                                        GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Int# #)}
                             eta of wild1 { (#,#) ds ds1 ->
                      (# ds,
                         f5
                           (Main.Env
                              GHC.Types.False
                              (GHC.Types.:
                                 @ Main.Val
                                 (Main.Float (GHC.Prim.int2Double# (GHC.Prim.narrow32Int# ds1)))
                                 (GHC.Types.[] @ Main.Val))
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) }
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             ipv6
                             (GHC.Show.show @ a $dShow e1)
                             GHC.Types.True
                             eta of ds1 { (#,#) ipv14 ipv15 ->
                      case {__pkg_ccall base-4.11.1.0 GHC.Prim.State# GHC.Prim.RealWorld
                                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                            GHC.Prim.Int# #)}
                             ipv14 of wild1 { (#,#) ds ds2 ->
                      (# ds,
                         f5
                           (Main.Env
                              GHC.Types.False
                              (GHC.Types.:
                                 @ Main.Val
                                 (Main.Float (GHC.Prim.int2Double# (GHC.Prim.narrow32Int# ds2)))
                                 (GHC.Types.[] @ Main.Val))
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) } } } } } }) -}
03c00672916b3e40658cc9b38e91f091
  errHandlerIO1 ::
    Main.Env
    -> GHC.IO.Exception.IOException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U(1*U,1*U,1*U,1*U,A,1*U)><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (e :: GHC.IO.Exception.IOException)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case e of e1 { GHC.IO.Exception.IOError ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ipv6
                        (GHC.IO.Exception.$w$cshowsPrec3
                           ipv14
                           ipv15
                           ipv16
                           ipv17
                           ipv19
                           (GHC.Types.[] @ GHC.Types.Char))
                        GHC.Types.True
                        eta of ds1 { (#,#) ipv20 ipv21 ->
                 case {__pkg_ccall base-4.11.1.0 GHC.Prim.State# GHC.Prim.RealWorld
                                                 -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                       GHC.Prim.Int# #)}
                        ipv20 of wild { (#,#) ds ds2 ->
                 (# ds,
                    Main.Env
                      GHC.Types.False
                      (GHC.Types.:
                         @ Main.Val
                         (Main.Float (GHC.Prim.int2Double# (GHC.Prim.narrow32Int# ds2)))
                         (GHC.Types.[] @ Main.Val))
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13 #) } } } }) -}
89aae9b503b95ba1d09431d7840447c7
  eval :: [Main.Val] -> Main.Env -> Main.Eval Main.Env
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Main.eval1
                  `cast`
                (<[Main.Val]>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
ecf42ea12b923ea3cb90d21daabecc60
  eval' ::
    (Main.Env -> [Main.Val] -> Main.Eval Main.Env)
    -> [Main.Val] -> Main.Env -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <S,1*U><S,1*U><S(SSSSSSSSSLSLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs51
                  `cast`
                (<Main.Env -> [Main.Val] -> Main.Eval Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
bba22a5541e7c51a5e7561353cd2a389
  eval1 ::
    [Main.Val]
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Unfolding: (Main.defaultFuncs51
                   Main.defaultFuncs50
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))) -}
e38b8d704cb20f10edff9f8ef59cb992
  evalElse ::
    GHC.Base.Monad m =>
    (t -> m Main.Env) -> (Main.Env -> m Main.Env) -> t -> m Main.Env
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),1*C1(C1(U)),A,C(U),A)><S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   @ t
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: t -> m Main.Env)
                   (eta1 :: Main.Env -> m Main.Env)
                   (eta2 :: t) ->
                 case eta of f4 { DEFAULT ->
                 case eta1 of g { DEFAULT ->
                 case eta2 of e { DEFAULT ->
                 let {
                   $dFunctor :: GHC.Base.Applicative m = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dFunctor
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ Main.Env
                   @ Main.Env
                   (f4 e)
                   (\ (re :: Main.Env) ->
                    case re of re1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                    case ipv of wild {
                      GHC.Types.False
                      -> GHC.Base.fmap
                           @ m
                           $dFunctor1
                           @ Main.Env
                           @ Main.Env
                           (\ (renv :: Main.Env) ->
                            case renv of renv1 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                            Main.Env
                              ipv14
                              ipv15
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13 })
                           (g re1)
                      GHC.Types.True
                      -> GHC.Base.return @ m $dMonad @ Main.Env re1 } }) } } }) -}
6b8609af382d08c71faaae06fbe917b3
  evalElse1 ::
    (t -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> t
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S,1*U><S,U>,
     Unfolding: (\ @ t
                   (eta :: t -> Main.Eval Main.Env)
                   (eta1 :: Main.Env -> Main.Eval Main.Env)
                   (eta2 :: t)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta1 of g { DEFAULT ->
                 case eta2 of e { DEFAULT ->
                 case (eta e)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> ds1
                   Data.Either.Right x3
                   -> case x3 of re { Main.Env ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      case ipv2 of wild1 {
                        GHC.Types.False
                        -> case (g re)
                                  `cast`
                                (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                    <([Main.Val], Main.ShError)>_N
                                                                    <GHC.Types.IO>_R
                                                                    <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                       <Data.Either.Either
                                                                                          ([Main.Val],
                                                                                           Main.ShError)
                                                                                          Main.Env>_R))
                                  ipv of ds { (#,#) ipv16 ipv17 ->
                           (# ipv16,
                              case ipv17 of wild2 {
                                Data.Either.Left x4 -> wild2
                                Data.Either.Right y
                                -> Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (case y of renv { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                                      Main.Env
                                        ipv18
                                        ipv19
                                        ipv4
                                        ipv5
                                        ipv6
                                        ipv7
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13
                                        ipv14
                                        ipv15 }) } #) }
                        GHC.Types.True -> ds1 } } } } } }) -}
719b0c88f43b2968455ae3687bcd168f
  evalFn :: Main.Env -> Main.Val -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.evalFn1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Val>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
30c375e6600b7a6d320ccb8035a3b90b
  evalFn1 ::
    Main.Env
    -> Main.Val
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,1*U><S,U> -}
1d26379c7812d2072cf8bc7a5218be3b
  evalIf ::
    GHC.Base.Monad m =>
    (t -> m Main.Env) -> (Main.Env -> m Main.Env) -> t -> m Main.Env
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),1*C1(C1(U)),A,C(U),A)><S,1*U><S,1*U><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   @ t
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: t -> m Main.Env)
                   (eta1 :: Main.Env -> m Main.Env)
                   (eta2 :: t) ->
                 case eta of f4 { DEFAULT ->
                 case eta1 of g { DEFAULT ->
                 case eta2 of e { DEFAULT ->
                 let {
                   $dFunctor :: GHC.Base.Applicative m = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dFunctor
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ Main.Env
                   @ Main.Env
                   (f4 e)
                   (\ (re :: Main.Env) ->
                    case re of re1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                    case ipv of wild {
                      GHC.Types.False -> GHC.Base.return @ m $dMonad @ Main.Env re1
                      GHC.Types.True
                      -> GHC.Base.fmap
                           @ m
                           $dFunctor1
                           @ Main.Env
                           @ Main.Env
                           (\ (renv :: Main.Env) ->
                            case renv of renv1 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                            Main.Env
                              ipv14
                              ipv15
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13 })
                           (g re1) } }) } } }) -}
cdaf78a01d35e1fcb3dc95ae6dc23e61
  evalIf1 ::
    (t -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> t
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S,1*U><S,U>,
     Unfolding: (\ @ t
                   (eta :: t -> Main.Eval Main.Env)
                   (eta1 :: Main.Env -> Main.Eval Main.Env)
                   (eta2 :: t)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta1 of g { DEFAULT ->
                 case eta2 of e { DEFAULT ->
                 case (eta e)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta3 of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> ds1
                   Data.Either.Right x3
                   -> case x3 of re { Main.Env ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      case ipv2 of wild1 {
                        GHC.Types.False -> ds1
                        GHC.Types.True
                        -> case (g re)
                                  `cast`
                                (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                    <([Main.Val], Main.ShError)>_N
                                                                    <GHC.Types.IO>_R
                                                                    <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                       <Data.Either.Either
                                                                                          ([Main.Val],
                                                                                           Main.ShError)
                                                                                          Main.Env>_R))
                                  ipv of ds { (#,#) ipv16 ipv17 ->
                           (# ipv16,
                              case ipv17 of wild2 {
                                Data.Either.Left x4 -> wild2
                                Data.Either.Right y
                                -> Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (case y of renv { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                                      Main.Env
                                        ipv18
                                        ipv19
                                        ipv4
                                        ipv5
                                        ipv6
                                        ipv7
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13
                                        ipv14
                                        ipv15 }) } #) } } } } } } }) -}
8ecf1be2e785678a19c1cf41e7548254
  evalPure :: [Main.Val] -> Main.Env -> Main.Eval Main.Env
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Main.evalPure1
                  `cast`
                (<[Main.Val]>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
71e440edfbe9c397e5d102e31c62db14
  evalPure1 ::
    [Main.Val]
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Unfolding: (Main.defaultFuncs51
                   Main.evalPure2
                     `cast`
                   (<Main.Env>_R
                    ->_R <[Main.Val]>_R
                    ->_R Sym (GHC.Types.N:IO[0]
                                  <Data.Either.Either
                                     ([Main.Val], Main.ShError)
                                     Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                              <([Main.Val], Main.ShError)>_N
                                                              <GHC.Types.IO>_R
                                                              <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))) -}
236195f82379ae8cc2c195c24490f860
  evalPure2 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U> -}
f1d28f5bddfe02ef48322be299429dee
  evalScript :: Main.Env -> [[Main.Val]] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.evalScript1
                  `cast`
                (<Main.Env>_R
                 ->_R <[[Main.Val]]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
a40f6be582f38f1bc34dce4eb873c1fb
  evalScript1 ::
    Main.Env
    -> [[Main.Val]]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (z0 :: Main.Env)
                   (xs :: [[Main.Val]])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.evalScript2 xs z0 eta) -}
9d1d80c1413981acbd5050780336bac3
  evalScript2 ::
    [[Main.Val]]
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S,1*U><L,U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U> -}
c999e1ce553bff2680a3d73a2b496e16
  exit' :: p -> [Main.Val] -> Main.Eval a
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs341
                  `cast`
                (forall (p6 :: <*>_N) (a :: <*>_N).
                 <p6>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
da11b80166e2c2b384476a5b639313df
  exitEval :: Main.Env -> GHC.Types.IO ()
  {- Arity: 2,
     Strictness: <S(SSSSSSSSSLSLSL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs76
                  `cast`
                (<Main.Env>_R ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
61d9aba738a7367b1479d90fc7413189
  exitMvar :: Main.ThreadInfo -> GHC.MVar.MVar Main.Env
  RecSel Left Main.ThreadInfo
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LSLL),1*U(A,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ThreadInfo) ->
                 case ds of wild { Main.ThreadInfo dt61 dt62 ds1 ds2 ->
                 GHC.MVar.MVar @ Main.Env dt62 }) -}
61d9aba738a7367b1479d90fc7413189
  exitTrap :: Main.ThreadInfo -> Main.Val
  RecSel Left Main.ThreadInfo
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LLLS),1*U(A,A,A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ThreadInfo) ->
                 case ds of wild { Main.ThreadInfo dt61 dt62 ds1 ds2 -> ds2 }) -}
e96107b0bc458d3ba1e010f1b24c56d4
  expand :: Main.Env -> Main.Val -> Main.Eval Data.Text.Internal.Text
  {- Arity: 3, Strictness: <S,1*H><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.expand1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Data.Text.Internal.Text>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                          <([Main.Val],
                                                                            Main.ShError)>_N
                                                                          <GHC.Types.IO>_R
                                                                          <Data.Text.Internal.Text>_N) ; Sym (Main.N:Eval[0]) <Data.Text.Internal.Text>_N)) -}
24f4879ee3affc90ec43dc7186db1aef
  expand1 ::
    Main.Env
    -> Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) Data.Text.Internal.Text #)
  {- Arity: 3, Strictness: <S,1*H><S,1*U><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Env)
                   (w1 :: Main.Val)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of w3 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 Main.$wexpand w3 w1 w2 }) -}
0909319f520fa880ec79f02afa970cb4
  expandL ::
    Main.Env -> Main.Val -> Main.Eval [Data.Text.Internal.Text]
  {- Arity: 3, Strictness: <S,1*H><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.expandL1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  [Data.Text.Internal.Text]>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                            <([Main.Val],
                                                                              Main.ShError)>_N
                                                                            <GHC.Types.IO>_R
                                                                            <[Data.Text.Internal.Text]>_N) ; Sym (Main.N:Eval[0]) <[Data.Text.Internal.Text]>_N)) -}
e670c50a84dcab1e8d7463f0ab92d976
  expandL1 ::
    Main.Env
    -> Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) [Data.Text.Internal.Text] #)
  {- Arity: 3, Strictness: <S,1*H><S,1*U><S,U>, Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Env)
                   (w1 :: Main.Val)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of w3 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 Main.$wexpandL w3 w1 w2 }) -}
505005e415e2af55246320356cbdc9c1
  false :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ Main.Env
                   (Main.Env
                      GHC.Types.False
                      xs1
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13) } }) -}
61d9aba738a7367b1479d90fc7413189
  flags :: Main.Env -> Main.Flags
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLSLLLLLL),1*U(A,A,A,A,A,A,A,U(U,U),A,A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds8 }) -}
8094b2e1695990779206cba8266a1a53
  fold' :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs169
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
5ce9b09c11fa9b6f49e2bc74ba1a4058
  fold'' ::
    Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Main.Env
    -> [Main.Val]
    -> Main.Eval Main.Env
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs170
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
dedb3c017616b2e9755d500131ccff02
  fork ::
    Control.Monad.IO.Class.MonadIO m =>
    Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3,
     Strictness: <S(LC(S)),1*U(A,1*C1(U))><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 Control.Monad.IO.Class.liftIO
                   @ m
                   $dMonadIO
                   @ Main.Env
                   (\ (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                    case GHC.Prim.getMaskingState# eta of ds { (#,#) ipv14 ipv15 ->
                    let {
                      io :: GHC.Prim.State# GHC.Prim.RealWorld
                            -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
                        {- Arity: 1, Strictness: <S,U> -}
                      = \ (s :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                        case Main.defaultFuncs79 s of ds1 { (#,#) ipv16 ipv17 ->
                        case ipv17 of hs5 { DEFAULT ->
                        case System.Posix.Process.Common.forkProcess1
                               (\ (s1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                                case {__pkg_ccall unix-2.7.2.2 GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       s1 of wild { (#,#) ds2 ds3 ->
                                case {__pkg_ccall unix-2.7.2.2 GHC.Prim.Int#
                                                               -> GHC.Prim.Int#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       (GHC.Prim.narrow32Int# ds3)
                                       0#
                                       ds2 of wild1 { (#,#) ds4 ds5 ->
                                case GHC.Prim.narrow32Int# ds5 of wild2 {
                                  DEFAULT
                                  -> case GHC.Prim.myThreadId# ds4 of ds6 { (#,#) ipv18 ipv19 ->
                                     case GHC.Prim.newMVar#
                                            @ GHC.Prim.RealWorld
                                            @ Main.Env
                                            ipv18 of ds7 { (#,#) ipv20 ipv21 ->
                                     case GHC.Prim.newMutVar#
                                            @ Main.ThreadInfo
                                            @ GHC.Prim.RealWorld
                                            (Main.ThreadInfo
                                               ipv19
                                               ipv21
                                               (GHC.Base.Nothing @ (GHC.MVar.MVar ()))
                                               Main.defaultFuncs78)
                                            ipv20 of ds8 { (#,#) ipv22 ipv23 ->
                                     case Main.defaultFuncs77
                                            (Main.Env
                                               ipv
                                               ipv1
                                               ipv2
                                               ipv3
                                               ipv4
                                               ipv5
                                               ipv6
                                               ipv7
                                               ipv8
                                               ipv9
                                               ipv10
                                               ipv11
                                               ipv23
                                               ipv13)
                                            (Main.defaultFuncs51
                                               Main.defaultFuncs50
                                                 `cast`
                                               (<Main.Env>_R
                                                ->_R <[Main.Val]>_R
                                                ->_R Sym (GHC.Types.N:IO[0]
                                                              <Data.Either.Either
                                                                 ([Main.Val], Main.ShError)
                                                                 Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                          <([Main.Val],
                                                                                            Main.ShError)>_N
                                                                                          <GHC.Types.IO>_R
                                                                                          <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                               xs1
                                               (Main.Env
                                                  ipv
                                                  ipv1
                                                  ipv2
                                                  ipv3
                                                  ipv4
                                                  ipv5
                                                  ipv6
                                                  ipv7
                                                  ipv8
                                                  ipv9
                                                  ipv10
                                                  ipv11
                                                  ipv23
                                                  ipv13))
                                              `cast`
                                            (Sym (GHC.Types.N:IO[0]
                                                      <Data.Either.Either
                                                         ([Main.Val], Main.ShError)
                                                         Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                                  <([Main.Val],
                                                                                    Main.ShError)>_N
                                                                                  <GHC.Types.IO>_R
                                                                                  <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                            ipv22 of ds9 { (#,#) ipv24 ipv25 ->
                                     Main.defaultFuncs76 ipv25 ipv24 } } } }
                                  -1#
                                  -> case {__pkg_ccall base-4.11.1.0 GHC.Prim.State#
                                                                       GHC.Prim.RealWorld
                                                                     -> (# GHC.Prim.State#
                                                                             GHC.Prim.RealWorld,
                                                                           GHC.Prim.Int# #)}
                                            ds4 of wild3 { (#,#) ds6 ds7 ->
                                     case System.Posix.Process.Common.createProcessGroupFor2 ds6 ds7
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
                                     of {} } } } })
                                 `cast`
                               (Sym (GHC.Types.N:IO[0] <()>_R))
                               ipv16 of ds2 { (#,#) ipv18 ipv19 ->
                        case ipv19
                               `cast`
                             (System.Posix.Types.N:CPid[0]) of nt { GHC.Int.I32# ipv20 ->
                        case Main.defaultFuncs75
                               hs5
                               Main.defaultFuncs74
                               ipv18 of ds3 { (#,#) ipv21 ipv22 ->
                        (# ipv21,
                           Main.Env
                             GHC.Types.True
                             (GHC.Types.[] @ Main.Val)
                             ipv2
                             ipv3
                             ipv4
                             ipv5
                             ipv6
                             ipv7
                             ipv8
                             ipv9
                             ipv10
                             ipv11
                             ipv12
                             ipv13 #) } } } } }
                    } in
                    case ipv15 of ds1 {
                      DEFAULT -> io ipv14
                      0# -> GHC.Prim.maskAsyncExceptions# @ Main.Env io ipv14 } })
                     `cast`
                   (Sym (GHC.Types.N:IO[0] <Main.Env>_R)) } }) -}
aa68e0407874f098840ec74ade3e2493
  formatUsage ::
    Data.Text.Internal.Text
    -> [Data.Text.Internal.Text] -> Data.Text.Internal.Text
  {- Arity: 2, Strictness: <S(SSS),1*U(U,U,U)><S,1*U>, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: [Data.Text.Internal.Text]) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wformatUsage ww1 ww2 ww3 w1 }) -}
1509767cff01373e3e29dee2d6fe7c7c
  formatUsage1 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.formatUsage2) -}
9252c9767b6d237f3b56d8686b7fb8a2
  formatUsage2 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("      "#) -}
a0a8d19195aed22658992043731d581b
  formatUsage3 :: Data.Text.Internal.Text
  {- Unfolding: (Data.Text.Show.unpackCString# Main.formatUsage4) -}
8f5632b0d657491557d812e12a3014c2
  formatUsage4 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Usage:"#) -}
6225cfae2558abede8f8af0453110a4f
  formatUsage5 :: Data.Text.Internal.Text
  {- Strictness: x -}
97aa427d0498850c1eb0be827887cf05
  formatUsage_go1 ::
    [Data.Text.Internal.Text] -> [Data.Text.Internal.Text]
  {- Arity: 1, Strictness: <S,1*U> -}
7818aa007b7d9d75f85bbc709e115123
  fromEno :: Foreign.C.Error.Errno -> Main.Val
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m1,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Foreign.C.Error.Errno) ->
                 case ds
                        `cast`
                      (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv ->
                 Main.Float (GHC.Prim.int2Double# ipv) }) -}
61d9aba738a7367b1479d90fc7413189
  funID :: Main.Env -> GHC.Types.Int
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLSLLLL),1*U(A,A,A,A,A,A,A,A,A,U,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 GHC.Types.I# dt61 }) -}
61d9aba738a7367b1479d90fc7413189
  funcs ::
    Main.Env
    -> GHC.IORef.IORef
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLSLL),1*U(A,A,A,A,A,A,A,A,A,A,A,U,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 (GHC.STRef.STRef
                    @ GHC.Prim.RealWorld
                    @ (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                    dt62)
                   `cast`
                 (Sym (GHC.IORef.N:IORef[0]) <Data.HashMap.Base.HashMap
                                                Data.Text.Internal.Text Main.Val>_N) }) -}
0320e28cd3c0309638a2b06541c39d5f
  ge' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.ge'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
6593482b5a62cdb1988eb5c47d4fe465
  ge'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.ge'2 GHC.Classes.$fOrdDouble_$c>=) -}
4e66fe2f2874aeb913a28b48af9114f8
  ge'2 ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool)
    -> (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 5,
     Strictness: <S,1*U><C(C(S(SS))),1*C1(C1(U(U,1*U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (f4 :: GHC.Types.Double
                          -> GHC.Types.Double -> GHC.Types.Bool)
                   (x3 :: Main.Env -> Main.Eval Main.Env)
                   (y :: Main.Env -> Main.Eval Main.Env)
                   (e :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case f4 of f5 { DEFAULT ->
                 case y of y1 { DEFAULT ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (x3 e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left x4
                   -> (# ipv14,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env x4 #)
                   Data.Either.Right y2
                   -> case y2 of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                      case ds2 of wild2 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                           of {}
                        : x4 ds11
                        -> case Main.defaultFuncs127
                                  x4
                                  ipv14 of ds12 { (#,#) ipv16 ipv17 ->
                           case ipv17 of wild3 {
                             Data.Either.Left e2
                             -> (# ipv16,
                                   Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e2 #)
                             Data.Either.Right x5
                             -> case x5 of n13 { GHC.Types.D# ipv18 ->
                                case (y1 e1)
                                       `cast`
                                     (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                         <([Main.Val],
                                                                           Main.ShError)>_N
                                                                         <GHC.Types.IO>_R
                                                                         <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                            <Data.Either.Either
                                                                                               ([Main.Val],
                                                                                                Main.ShError)
                                                                                               Main.Env>_R))
                                       ipv16 of ds13 { (#,#) ipv19 ipv20 ->
                                case ipv20 of wild4 {
                                  Data.Either.Left x6 -> ds13
                                  Data.Either.Right y3
                                  -> case y3 of wild5 { Main.Env ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 ds22 dt65 ds23 dt66 dt67 dt68 ->
                                     case ds15 of wild6 {
                                       []
                                       -> case GHC.List.badHead
                                          ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                                    Data.Either.Either
                                                      ([Main.Val], Main.ShError) Main.Env #)
                                          of {}
                                       : x6 ds24
                                       -> case Main.defaultFuncs127
                                                 x6
                                                 ipv19 of ds25 { (#,#) ipv21 ipv22 ->
                                          case ipv22 of wild7 {
                                            Data.Either.Left e2
                                            -> (# ipv21,
                                                  Data.Either.Left
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    e2 #)
                                            Data.Either.Right x7
                                            -> case x7 of m { GHC.Types.D# ipv23 ->
                                               (# ipv21,
                                                  Data.Either.Right
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    (case f5 n13 m of dt69 { DEFAULT ->
                                                     Main.Env
                                                       dt69
                                                       (GHC.Types.:
                                                          @ Main.Val
                                                          (Main.Float ipv23)
                                                          (GHC.Types.[] @ Main.Val))
                                                       ipv2
                                                       ipv3
                                                       ipv4
                                                       ipv5
                                                       ipv6
                                                       ipv7
                                                       ipv8
                                                       ipv9
                                                       ipv10
                                                       ipv11
                                                       ipv12
                                                       ipv13 }) #) } } } } } } } } } } } } } } } } }) -}
a4e5a5e0900f455e0f1448b34c029373
  genCmd :: Main.Parser (Main.Env -> Main.Eval Main.Env)
  {- Arity: 7,
     Strictness: <L,U(U,U(U(U,U,U),U),U,U)><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.genCmd1
                  `cast`
                ((forall (b1 :: <*>_N).
                  <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                  ->_R <(Main.Env -> Main.Eval Main.Env)
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Text.Megaparsec.Internal.Hints
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <Text.Megaparsec.Error.ParseError
                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <(Main.Env -> Main.Eval Main.Env)
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Text.Megaparsec.Internal.Hints
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <Text.Megaparsec.Error.ParseError
                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R (<Main.ParseEnv>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(b1,
                                        Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Main.ParseEnv>_N
                                                                       <GHC.Types.IO>_R
                                                                       <b1>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                           <Main.Custom>_N
                                                                                           <Data.Text.Internal.Text>_N
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              Main.ParseEnv
                                                                                              GHC.Types.IO>_R
                                                                                           <Main.Env
                                                                                            -> Main.Eval
                                                                                                 Main.Env>_R)) -}
1c427b7084a27c1902e7a374d68ce02e
  genCmd' ::
    [Main.Val] -> Main.Parser (Main.Env -> Main.Eval Main.Env)
  {- Arity: 1, Strictness: <S,1*U> -}
df2fb50ba522fb5f91fbae174ec6421d
  genCmd1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> ((Main.Env -> Main.Eval Main.Env)
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> ((Main.Env -> Main.Eval Main.Env)
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Main.ParseEnv
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b1, Main.ParseEnv) #)
  {- Arity: 7,
     Strictness: <L,U(U,U(U(U,U,U),U),U,U)><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U> -}
e5ebd9919a031a7422c4c484145f2ba8
  genEval :: Main.Parser (Main.Env -> Main.Eval Main.Env)
  {- Arity: 7,
     Strictness: <L,U><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.genEval1
                  `cast`
                ((forall (b1 :: <*>_N).
                  <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                  ->_R <(Main.Env -> Main.Eval Main.Env)
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Text.Megaparsec.Internal.Hints
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <Text.Megaparsec.Error.ParseError
                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <(Main.Env -> Main.Eval Main.Env)
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Text.Megaparsec.Internal.Hints
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R <Text.Megaparsec.Error.ParseError
                          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                        -> Text.Megaparsec.State.State Data.Text.Internal.Text
                        -> Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO b1>_R
                  ->_R (<Main.ParseEnv>_R
                        ->_R Sym (GHC.Types.N:IO[0]
                                      <(b1,
                                        Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                       <Main.ParseEnv>_N
                                                                       <GHC.Types.IO>_R
                                                                       <b1>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                           <Main.Custom>_N
                                                                                           <Data.Text.Internal.Text>_N
                                                                                           <Control.Monad.Trans.State.Lazy.StateT
                                                                                              Main.ParseEnv
                                                                                              GHC.Types.IO>_R
                                                                                           <Main.Env
                                                                                            -> Main.Eval
                                                                                                 Main.Env>_R)) -}
38b0fd202469e2a50018fc6a689cde7d
  genEval1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> ((Main.Env -> Main.Eval Main.Env)
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> ((Main.Env -> Main.Eval Main.Env)
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Main.ParseEnv
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b1, Main.ParseEnv) #)
  {- Arity: 7,
     Strictness: <L,U><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U> -}
3d3483ffefb8484f53693f6e0612b5c8
  genExpr :: Main.Parser (Main.Env -> Main.Eval Main.Env)
  {- Arity: 5, Strictness: <L,U><L,U><L,A><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.genExpr1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Env -> Main.Eval Main.Env>_R)) -}
34dfe4e09165bce715f8b020a00f8c33
  genExpr' ::
    [Main.Val] -> Main.Parser (Main.Env -> Main.Eval Main.Env)
  {- Arity: 1, Strictness: <S,1*U> -}
f762665bba1d7a618ce3edd384a29c5f
  genExpr1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> ((Main.Env -> Main.Eval Main.Env)
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> ((Main.Env -> Main.Eval Main.Env)
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5, Strictness: <L,U><L,U><L,A><L,U><L,C(C1(U))>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: (Main.Env -> Main.Eval Main.Env)
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (eok :: (Main.Env -> Main.Eval Main.Env)
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 let {
                   eerr' :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b
                     {- Arity: 2 -}
                   = \ (err1 :: Text.Megaparsec.Error.ParseError
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                  Main.Custom)
                       (ds1 :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                     eerr err1 s1
                 } in
                 Main.genExpr_p
                   `cast`
                 (Text.Megaparsec.Internal.N:ParsecT[0]
                      <Main.Custom>_N
                      <Data.Text.Internal.Text>_N
                      <Control.Monad.Trans.State.Lazy.StateT
                         Main.ParseEnv GHC.Types.IO>_R
                      <Main.Env -> Main.Eval Main.Env>_R)
                   @ b
                   s1
                   cok
                   eerr'
                   eok
                   eerr') -}
6d32a817ba0ffc005399ad4b2dab1af5
  genExpr_p ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      (Main.Env -> Main.Eval Main.Env)
b7ae70aca79ed079f2b8e661175c376a
  genFuncEnv ::
    Main.Env
    -> Main.ParseEnv -> GHC.Base.Maybe Main.Env -> Main.Eval Main.Env
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LSSSSSSSLLSLLL),1*U(A,U,U,U,U,U,U,U,A,U,U,U,U,U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.genFuncEnv1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.ParseEnv>_R
                 ->_R <GHC.Base.Maybe Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
8f3ea9bb47616f5d86af7e996d1ed4f8
  genFuncEnv1 ::
    Main.Env
    -> Main.ParseEnv
    -> GHC.Base.Maybe Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LSSSSSSSLLSLLL),1*U(A,U,U,U,U,U,U,U,A,U,U,U,U,U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (env :: Main.Env)
                   (penv :: Main.ParseEnv)
                   (ds :: GHC.Base.Maybe Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case penv of penv1 { Main.ParseEnv ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ->
                 case ds of wild {
                   GHC.Base.Nothing
                   -> (# eta,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.True
                              ipv1
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              penv1
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #)
                   GHC.Base.Just fenv
                   -> (# eta,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (case fenv of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                            Main.Env
                              GHC.Types.True
                              ds2
                              ipv2
                              ds4
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              penv1
                              ipv9
                              ipv10
                              dt62
                              ipv12
                              ipv13 }) #) } } }) -}
13babacaa4fec3d61870c5dcf08e14bf
  genFuncSpace ::
    (Main.Env -> Main.Eval Main.Env) -> Main.Env -> Main.Eval Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSSLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.genFuncSpace1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
44b413e4ebd2dc71559a58d9a5af7979
  genFuncSpace1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S)),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSSLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (3, True, False)
                (\ (f4 :: Main.Env -> Main.Eval Main.Env)
                   (env :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case f4 of f5 { DEFAULT ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                        ipv11
                        eta of ds1 { (#,#) ipv14 ipv15 ->
                 case GHC.Prim.newMutVar#
                        @ (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                        @ GHC.Prim.RealWorld
                        ipv15
                        ipv14 of ds { (#,#) ipv16 ipv17 ->
                 (f5
                    (Main.Env
                       ipv
                       ipv1
                       ipv2
                       ipv3
                       ipv4
                       ipv5
                       ipv6
                       ipv7
                       ipv8
                       ipv9
                       ipv10
                       ipv17
                       ipv12
                       ipv13))
                   `cast`
                 (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                     <([Main.Val], Main.ShError)>_N
                                                     <GHC.Types.IO>_R
                                                     <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                        <Data.Either.Either
                                                                           ([Main.Val],
                                                                            Main.ShError)
                                                                           Main.Env>_R))
                   ipv16 } } } }) -}
195baea0dde64f8e70cc47ca0c784d2c
  genLambda ::
    Main.LambdaType
    -> Main.Parser (Main.Env -> Main.Eval Main.Env)
    -> Main.Parser Main.Val
  {- Arity: 9,
     Strictness: <S,1*U><C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U(U,U))))))))><L,U><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.genLambda1
                  `cast`
                (<Main.LambdaType>_R
                 ->_R <Main.Parser (Main.Env -> Main.Eval Main.Env)>_R
                 ->_R (forall (b :: <*>_N).
                       <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                       ->_R <Main.Val
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Main.Val
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R (<Main.ParseEnv>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(b,
                                             Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <Main.ParseEnv>_N
                                                                            <GHC.Types.IO>_R
                                                                            <b>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                               <Main.Custom>_N
                                                                                               <Data.Text.Internal.Text>_N
                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                  Main.ParseEnv
                                                                                                  GHC.Types.IO>_R
                                                                                               <Main.Val>_R)) -}
f41627435aca0ebb469bffb13d59a0eb
  genLambda1 ::
    Main.LambdaType
    -> Main.Parser (Main.Env -> Main.Eval Main.Env)
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (Main.Val
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Main.Val
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Main.ParseEnv
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
  {- Arity: 9,
     Strictness: <S,1*U><C(C(C(C(C(C(C(S))))))),1*C1(C1(C1(C1(C1(C1(C1(U(U,U))))))))><L,U><L,C(C1(C1(C1(C1(U)))))><L,U><L,C(C1(C1(C1(C1(U)))))><L,C(U)><S(LSSSSSSS),1*U(U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (t :: Main.LambdaType)
                   (f4 :: Main.Parser (Main.Env -> Main.Eval Main.Env))
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: Main.Val
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: Main.Val
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta5 :: Main.ParseEnv)
                   (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case t of t3 { DEFAULT ->
                 case eta5 of p6 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 ((f4
                     `cast`
                   (Text.Megaparsec.Internal.N:ParsecT[0]
                        <Main.Custom>_N
                        <Data.Text.Internal.Text>_N
                        <Control.Monad.Trans.State.Lazy.StateT
                           Main.ParseEnv GHC.Types.IO>_R
                        <Main.Env -> Main.Eval Main.Env>_R)
                     @ b
                     eta
                     (\ (x3 :: Main.Env -> Main.Eval Main.Env)
                        (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                        (hs5 :: Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                        (eta7 :: Main.ParseEnv)
                        (eta8 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x3 of x4 { DEFAULT ->
                      case eta7 of p7 { Main.ParseEnv ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      ((eta1
                          (Main.Lambda t3 p7 (GHC.Base.Nothing @ Main.Env) x4)
                          s'
                          (Main.genLambda_go
                             hs5
                               `cast`
                             (Text.Megaparsec.Internal.N:Hints[0]
                                  <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                         (case Main.$wpoly_go3
                                 @ ()
                                 0#
                                 ipv4 `cast` (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N)
                                 ipv12
                                   `cast`
                                 (Data.HashSet.N:HashSet[0]
                                      <Data.Text.Internal.Text>_N) of nt { DEFAULT ->
                          case ipv6 of wild {
                            GHC.Base.Nothing
                            -> Main.ParseEnv
                                 ipv
                                 ipv1
                                 ipv2
                                 ipv3
                                 nt
                                   `cast`
                                 (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                                 ipv5
                                 ipv14
                                 ipv7
                            GHC.Base.Just ds
                            -> Main.ParseEnv
                                 ipv
                                 ipv1
                                 ipv2
                                 ipv3
                                 nt
                                   `cast`
                                 (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                                 ipv5
                                 wild
                                 ipv7 } }))
                        `cast`
                      (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                        eta8 } })
                       `cast`
                     (<Main.Env -> Main.Eval Main.Env>_R
                      ->_R <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                      ->_R <Text.Megaparsec.Internal.Hints
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)>_R
                      ->_R (<Main.ParseEnv>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(b,
                                            Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                           <Main.ParseEnv>_N
                                                                           <GHC.Types.IO>_R
                                                                           <b>_N))
                     eta2
                     (\ (x3 :: Main.Env -> Main.Eval Main.Env)
                        (s' :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                        (hs5 :: Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                        (eta7 :: Main.ParseEnv)
                        (eta8 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                      case x3 of x4 { DEFAULT ->
                      case eta7 of p7 { Main.ParseEnv ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      ((eta3
                          (Main.Lambda t3 p7 (GHC.Base.Nothing @ Main.Env) x4)
                          s'
                          (Main.genLambda_go
                             hs5
                               `cast`
                             (Text.Megaparsec.Internal.N:Hints[0]
                                  <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                            `cast`
                          (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                    <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                         `cast`
                       (Control.Monad.Trans.State.Lazy.N:StateT[0]
                            <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                         (case Main.$wpoly_go3
                                 @ ()
                                 0#
                                 ipv4 `cast` (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N)
                                 ipv12
                                   `cast`
                                 (Data.HashSet.N:HashSet[0]
                                      <Data.Text.Internal.Text>_N) of nt { DEFAULT ->
                          case ipv6 of wild {
                            GHC.Base.Nothing
                            -> Main.ParseEnv
                                 ipv
                                 ipv1
                                 ipv2
                                 ipv3
                                 nt
                                   `cast`
                                 (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                                 ipv5
                                 ipv14
                                 ipv7
                            GHC.Base.Just ds
                            -> Main.ParseEnv
                                 ipv
                                 ipv1
                                 ipv2
                                 ipv3
                                 nt
                                   `cast`
                                 (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                                 ipv5
                                 wild
                                 ipv7 } }))
                        `cast`
                      (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                        eta8 } })
                       `cast`
                     (<Main.Env -> Main.Eval Main.Env>_R
                      ->_R <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                      ->_R <Text.Megaparsec.Internal.Hints
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)>_R
                      ->_R (<Main.ParseEnv>_R
                            ->_R Sym (GHC.Types.N:IO[0]
                                          <(b,
                                            Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                           <Main.ParseEnv>_N
                                                                           <GHC.Types.IO>_R
                                                                           <b>_N))
                     (Main.$s$fAlternativeParsecT_$swithHints
                        @ Main.Custom
                        @ (Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO)
                        @ b
                        (GHC.Types.[]
                           @ (Data.Set.Internal.Set
                                (Text.Megaparsec.Error.ErrorItem
                                   (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                          `cast`
                        (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                  <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                        (Main.$s$fAlternativeParsecT_$swithHints
                           @ Main.Custom
                           @ (Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO)
                           @ b
                           (GHC.Types.[]
                              @ (Data.Set.Internal.Set
                                   (Text.Megaparsec.Error.ErrorItem
                                      (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                             `cast`
                           (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                     <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N))
                           eta4)))
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                    (Main.ParseEnv
                       ipv
                       ipv1
                       ipv2
                       ipv3
                       (Data.HashMap.Base.Empty @ Data.Text.Internal.Text @ ())
                         `cast`
                       (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                       ipv5
                       ipv6
                       ipv7))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                   eta6 } }) -}
678ca5a9a9abf8274beffedcff78c1dc
  genLambda_go ::
    [Data.Set.Internal.Set
       (Text.Megaparsec.Error.ErrorItem
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))]
    -> [Data.Set.Internal.Set
          (Text.Megaparsec.Error.ErrorItem
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))]
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U> -}
06c1e4969a21ce15291cc39ce0fafc87
  genNL :: GHC.Base.Monad m => (t -> m a) -> (a -> m b) -> t -> m b
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),1*U(A,1*C1(C1(U)),A,A,A)><S,1*U><S,1*U><S,1*U>,
     Unfolding: InlineRule (4, True, False)
                (\ @ m :: * -> *
                   @ t
                   @ a
                   @ b
                   ($dMonad :: GHC.Base.Monad m)
                   (f4 :: t -> m a)
                   (g :: a -> m b)
                   (e :: t) ->
                 case f4 of f5 { DEFAULT ->
                 case g of g1 { DEFAULT ->
                 case e of e1 { DEFAULT ->
                 GHC.Base.>>= @ m $dMonad @ a @ b (f5 e1) g1 } } }) -}
57679dc705dac2d43afebb0b5069f23d
  genRd ::
    [Main.Val]
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 2, Strictness: <S,1*U><S,1*U> -}
e339f3bb84ececedb1ac0c07e1e64741
  get' :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.get'1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
b30164fc7aa8065164a4711eef0f3391
  get'1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U> -}
c475d34701beabb41609f70f77f86ade
  getBool :: Main.Val -> Main.Eval GHC.Types.Bool
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getBool1
                  `cast`
                (<Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  GHC.Types.Bool>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                 <([Main.Val], Main.ShError)>_N
                                                                 <GHC.Types.IO>_R
                                                                 <GHC.Types.Bool>_N) ; Sym (Main.N:Eval[0]) <GHC.Types.Bool>_N)) -}
132ac400f7905981d32e67805dfd7fed
  getBool1 ::
    Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) GHC.Types.Bool #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (ds :: Main.Val) (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   DEFAULT
                   -> (# eta,
                         Data.Either.Left
                           @ ([Main.Val], Main.ShError)
                           @ GHC.Types.Bool
                           (Main.def5, Main.TypeMismatch Main.getBool2 wild) #)
                   Main.Bool x3
                   -> (# eta,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ GHC.Types.Bool
                           x3 #) }) -}
ee9e708de37e3088798fad0befe7d491
  getBool2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs268) -}
f00aaf481485637cc48886e9a74509a9
  getFloat :: Main.Val -> Main.Eval GHC.Types.Double
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs127
                  `cast`
                (<Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  GHC.Types.Double>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                   <([Main.Val], Main.ShError)>_N
                                                                   <GHC.Types.IO>_R
                                                                   <GHC.Types.Double>_N) ; Sym (Main.N:Eval[0]) <GHC.Types.Double>_N)) -}
5ce4ef1d39e63c472f266f2ed5920ccd
  getInt :: Main.Val -> Main.Eval GHC.Types.Int
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getInt1
                  `cast`
                (<Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  GHC.Types.Int>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                <([Main.Val], Main.ShError)>_N
                                                                <GHC.Types.IO>_R
                                                                <GHC.Types.Int>_N) ; Sym (Main.N:Eval[0]) <GHC.Types.Int>_N)) -}
bd9667db9814ddb9996cfdfc8fb11a39
  getInt1 ::
    Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) GHC.Types.Int #)
  {- Arity: 2, Strictness: <S,1*U><L,U>,
     Unfolding: (\ (ds :: Main.Val)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of wild {
                   DEFAULT
                   -> (# eta,
                         Data.Either.Left
                           @ ([Main.Val], Main.ShError)
                           @ GHC.Types.Int
                           (Main.def5,
                            case GHC.Base.++
                                   @ GHC.Types.Char
                                   (Main.$fShowShError_$cshow1 wild)
                                   Main.defaultFuncs128 of dt61 { DEFAULT ->
                            Main.SomeError dt61 }) #)
                   Main.Float dt61
                   -> (# eta,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ GHC.Types.Int
                           (let {
                              n13 :: GHC.Prim.Int# = GHC.Prim.double2Int# dt61
                            } in
                            case GHC.Prim.<## dt61 (GHC.Prim.int2Double# n13) of lwild {
                              DEFAULT -> GHC.Types.I# n13
                              1# -> GHC.Types.I# (GHC.Prim.-# n13 1#) }) #)
                   Main.Str ds1 s
                   -> case s of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      let {
                        ds2 :: Data.Either.Either
                                 GHC.Base.String (GHC.Types.Double, Data.Text.Internal.Text)
                        = Data.Text.Read.$wsigna
                            @ GHC.Types.Double
                            GHC.Float.$fNumDouble
                            Data.Text.Read.rational_$srational
                              `cast`
                            (Sym (Data.Text.Internal.Read.N:IParser[0]
                                      <Data.Text.Internal.Text>_R <GHC.Types.Double>_R))
                            ww1
                            ww2
                            ww3
                      } in
                      let {
                        fail :: GHC.Prim.Void#
                                -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                      Data.Either.Either ([Main.Val], Main.ShError) GHC.Types.Int #)
                          <join 1> {- Arity: 1, Strictness: <L,A> -}
                        = \ (ds3 :: GHC.Prim.Void#)[OneShot] ->
                          case ds2 of ds4 { DEFAULT ->
                          let {
                            ds5 :: Data.Either.Either
                                     GHC.Base.String (GHC.Types.Int, Data.Text.Internal.Text)
                            = Data.Text.Read.$wsigna
                                @ GHC.Types.Int
                                GHC.Num.$fNumInt
                                Data.Text.Read.hexadecimal_$shexadecimal10
                                  `cast`
                                (Sym (Data.Text.Internal.Read.N:IParser[0]
                                          <Data.Text.Internal.Text>_R <GHC.Types.Int>_R))
                                ww1
                                ww2
                                ww3
                          } in
                          let {
                            fail1 :: GHC.Prim.Void#
                                     -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                           Data.Either.Either
                                             ([Main.Val], Main.ShError) GHC.Types.Int #)
                              <join 1> {- Arity: 1, Strictness: <L,A> -}
                            = \ (ds6 :: GHC.Prim.Void#)[OneShot] ->
                              case ds5 of ds7 { DEFAULT ->
                              (# eta,
                                 Data.Either.Left
                                   @ ([Main.Val], Main.ShError)
                                   @ GHC.Types.Int
                                   (GHC.Types.[] @ Main.Val,
                                    case Data.Text.Show.$w$cshow ww of ww4 { (#,#) ww5 ww6 ->
                                    case GHC.Base.++_$s++
                                           @ GHC.Types.Char
                                           Main.defaultFuncs128
                                           ww5
                                           ww6 of dt61 { DEFAULT ->
                                    Main.SomeError dt61 } }) #) }
                          } in
                          case ds5 of wild1 {
                            Data.Either.Left ipv -> fail1 GHC.Prim.void#
                            Data.Either.Right ds6
                            -> case ds6 of wild2 { (,) d ds7 ->
                               case ds7 of wild3 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                               case Data.Text.Internal.empty_ of wild4 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                               case GHC.Prim.==# dt63 dt66 of lwild {
                                 DEFAULT -> fail1 GHC.Prim.void#
                                 1#
                                 -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.ByteArray#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.Word#
                                                                   -> GHC.Prim.State#
                                                                        GHC.Prim.RealWorld
                                                                   -> (# GHC.Prim.State#
                                                                           GHC.Prim.RealWorld,
                                                                         GHC.Prim.Int# #)}
                                           dt61
                                           (GHC.Prim.int2Word# dt62)
                                           dt64
                                           (GHC.Prim.int2Word# dt65)
                                           (GHC.Prim.int2Word# dt63)
                                           GHC.Prim.realWorld# of wild5 { (#,#) ds8 ds9 ->
                                    case GHC.Prim.narrow32Int# ds9 of wild6 {
                                      DEFAULT -> fail1 GHC.Prim.void#
                                      0#
                                      -> (# eta,
                                            Data.Either.Right
                                              @ ([Main.Val], Main.ShError)
                                              @ GHC.Types.Int
                                              d #) } } } } } } } }
                      } in
                      case ds2 of wild1 {
                        Data.Either.Left ipv -> fail GHC.Prim.void#
                        Data.Either.Right ds3
                        -> case ds3 of wild2 { (,) f4 ds4 ->
                           case ds4 of wild3 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                           case Data.Text.Internal.empty_ of wild4 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> fail GHC.Prim.void#
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds5 ds6 ->
                                case GHC.Prim.narrow32Int# ds6 of wild6 {
                                  DEFAULT -> fail GHC.Prim.void#
                                  0#
                                  -> (# eta,
                                        Data.Either.Right
                                          @ ([Main.Val], Main.ShError)
                                          @ GHC.Types.Int
                                          (GHC.Float.RealFracMethods.floorDoubleInt
                                             f4) #) } } } } } } } } }) -}
9c1fd05dbfa9ad031819c08fb5ca2902
  getIntForIdx :: [Main.Val] -> Main.Val -> Main.Eval GHC.Types.Int
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getIntForIdx1
                  `cast`
                (<[Main.Val]>_R
                 ->_R <Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  GHC.Types.Int>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                <([Main.Val], Main.ShError)>_N
                                                                <GHC.Types.IO>_R
                                                                <GHC.Types.Int>_N) ; Sym (Main.N:Eval[0]) <GHC.Types.Int>_N)) -}
52664be65e5fee8f07d9800280b7d022
  getIntForIdx1 ::
    [Main.Val]
    -> Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) GHC.Types.Int #)
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: (\ (xs :: [Main.Val])
                   (x3 :: Main.Val)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case xs of xs1 { DEFAULT ->
                 case Main.getInt1 x3 eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> ds1
                   Data.Either.Right x4
                   -> case x4 of n13 { GHC.Types.I# ipv2 ->
                      case ipv2 of ds {
                        DEFAULT
                        -> let {
                             $w$j2 :: GHC.Prim.Int#
                                      -> GHC.Prim.Int#
                                      -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                            Data.Either.Either
                                              ([Main.Val], Main.ShError) GHC.Types.Int #)
                               <join 2> {- Arity: 2, Strictness: <S,U><L,A>, Inline: [0] -}
                             = \ (w :: GHC.Prim.Int#)[OneShot] (ww :: GHC.Prim.Int#)[OneShot] ->
                               case Main.$wgreater @ Main.Val w xs1 of wild1 {
                                 GHC.Types.False -> (# ipv, Main.getIntForIdx7 #)
                                 GHC.Types.True
                                 -> case GHC.Prim.<# ds 0# of lwild {
                                      DEFAULT -> ds1
                                      1#
                                      -> (# ipv,
                                            Data.Either.Right
                                              @ ([Main.Val], Main.ShError)
                                              @ GHC.Types.Int
                                              (case GHC.List.$wlenAcc
                                                      @ Main.Val
                                                      xs1
                                                      0# of ww2 { DEFAULT ->
                                               GHC.Types.I#
                                                 (GHC.Prim.+# (GHC.Prim.+# ww2 ds) 1#) }) #) } }
                           } in
                           case GHC.Prim.>=# ds 0# of lwild {
                             DEFAULT
                             -> let {
                                  ipv3 :: GHC.Prim.Int# = GHC.Prim.negateInt# ds
                                } in
                                $w$j2 ipv3 ipv3
                             1# -> $w$j2 ds ds }
                        0# -> (# ipv, Main.getIntForIdx2 #) } } } } }) -}
910d474a909518c59ab9757ec253034f
  getIntForIdx10 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Main.getIntForIdx11) -}
b03fe5b785cb242266122d7f2223e294
  getIntForIdx11 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("Index too large"#) -}
37aaf30fc9d7ef2bf43261b91bf7a9c5
  getIntForIdx2 ::
    Data.Either.Either ([Main.Val], Main.ShError) GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ ([Main.Val], Main.ShError)
                   @ GHC.Types.Int
                   Main.getIntForIdx3) -}
b6c277e958f4aca8bddd82e4f8798185
  getIntForIdx3 :: ([Main.Val], Main.ShError)
  {- Strictness: m, Unfolding: ((Main.def5, Main.getIntForIdx4)) -}
ba007e523156297d246dbcc021f6a69e
  getIntForIdx4 :: Main.ShError
  {- Strictness: m4,
     Unfolding: (Main.SomeError Main.getIntForIdx5) -}
846a24f814cb7a7d07d54f56dfc9e6a1
  getIntForIdx5 :: GHC.Base.String
  {- Unfolding: (GHC.CString.unpackCString# Main.getIntForIdx6) -}
e4d8c90611e7bcceaa0aea8699728cb0
  getIntForIdx6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("0 cannot be specified"#) -}
12e10b1e48e393eaa9bca14a2a42b9e7
  getIntForIdx7 ::
    Data.Either.Either ([Main.Val], Main.ShError) GHC.Types.Int
  {- Strictness: m1,
     Unfolding: (Data.Either.Left
                   @ ([Main.Val], Main.ShError)
                   @ GHC.Types.Int
                   Main.getIntForIdx8) -}
649e44e1270d8921aa84a9e51bf31320
  getIntForIdx8 :: ([Main.Val], Main.ShError)
  {- Strictness: m, Unfolding: ((Main.def5, Main.getIntForIdx9)) -}
d6ec19989bfa3f4221a20802c48c666a
  getIntForIdx9 :: Main.ShError
  {- Strictness: m4,
     Unfolding: (Main.SomeError Main.getIntForIdx10) -}
da5d4c89245a0614732429fa30380c63
  getStr :: Main.Val -> GHC.Base.String
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (ds :: Main.Val) ->
                 case ds of wild {
                   DEFAULT -> Main.$fShowShError_$cshow1 wild
                   Main.Str ds1 x3
                   -> case x3 of wild1 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                      let {
                        end :: GHC.Prim.Int# = GHC.Prim.+# dt62 dt63
                      } in
                      letrec {
                        $wunfold :: GHC.Prim.Int# -> [GHC.Types.Char]
                          {- Arity: 1, Strictness: <S,U>, Inline: [0] -}
                        = \ (ww :: GHC.Prim.Int#) ->
                          case GHC.Prim.>=# ww end of lwild {
                            DEFAULT
                            -> case GHC.Prim.indexWord16Array# dt61 ww of r# { DEFAULT ->
                               case GHC.Prim.geWord# r# 55296## of lwild1 {
                                 DEFAULT
                                 -> GHC.Types.:
                                      @ GHC.Types.Char
                                      (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                      ($wunfold (GHC.Prim.+# ww 1#))
                                 1#
                                 -> case GHC.Prim.leWord# r# 56319## of lwild2 {
                                      DEFAULT
                                      -> GHC.Types.:
                                           @ GHC.Types.Char
                                           (GHC.Types.C# (GHC.Prim.chr# (GHC.Prim.word2Int# r#)))
                                           ($wunfold (GHC.Prim.+# ww 1#))
                                      1#
                                      -> case GHC.Prim.indexWord16Array#
                                                dt61
                                                (GHC.Prim.+# ww 1#) of r#1 { DEFAULT ->
                                         GHC.Types.:
                                           @ GHC.Types.Char
                                           (GHC.Types.C#
                                              (GHC.Prim.chr#
                                                 (GHC.Prim.+#
                                                    (GHC.Prim.+#
                                                       (GHC.Prim.uncheckedIShiftL#
                                                          (GHC.Prim.-#
                                                             (GHC.Prim.word2Int# r#)
                                                             55296#)
                                                          10#)
                                                       (GHC.Prim.-#
                                                          (GHC.Prim.word2Int# r#1)
                                                          56320#))
                                                    65536#)))
                                           ($wunfold (GHC.Prim.+# ww 2#)) } } } }
                            1# -> GHC.Types.[] @ GHC.Types.Char }
                      } in
                      $wunfold dt62 } }) -}
1ebf7274aa04f6eda982a2aef5e62e2f
  getSubOpt ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> [Main.Val]
    -> Main.Eval (Main.Val, [Main.Val])
  {- Arity: 4,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getSubOpt1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <Data.Text.Internal.Text>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  (Main.Val,
                                   [Main.Val])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                               <([Main.Val], Main.ShError)>_N
                                                               <GHC.Types.IO>_R
                                                               <(Main.Val,
                                                                 [Main.Val])>_N) ; Sym (Main.N:Eval[0]) <(Main.Val,
                                                                                                          [Main.Val])>_N)) -}
607dec99735e82429fa41cee538b811b
  getSubOpt1 ::
    Data.Text.Internal.Text
    -> Data.Text.Internal.Text
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) (Main.Val, [Main.Val]) #)
  {- Arity: 4,
     Strictness: <S(SSS),1*U(U,U,U)><S(SSS),1*U(U,U,U)><L,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (4, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text)
                   (w2 :: [Main.Val])
                   (w3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case w1 of ww4 { Data.Text.Internal.Text ww5 ww6 ww7 ->
                 Main.$wgetSubOpt ww1 ww2 ww3 ww5 ww6 ww7 w2 w3 } }) -}
f10797ce28632728f0c36c6aaa4d1770
  getVar :: Main.Env -> Main.VarT -> Main.Eval Main.Val
  {- Arity: 3,
     Strictness: <S(LSSSLLLLLLLSSS),1*U(A,U,U,U,A,A,A,A,A,A,A,1*U,1*U,1*U)><S,U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.getVar1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.VarT>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Val>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Val>_N) ; Sym (Main.N:Eval[0]) <Main.Val>_N)) -}
b26e03af04e340803ef06d457a9f9b21
  getVar1 ::
    Main.Env
    -> Main.VarT
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Val #)
  {- Arity: 3,
     Strictness: <S(LSSSLLLLLLLSSS),1*U(A,U,U,U,A,A,A,A,A,A,A,1*U,1*U,1*U)><S,U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Env)
                   (w1 :: Main.VarT)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$wgetVar ww2 ww3 ww4 ww12 ww13 ww14 w1 w2 }) -}
a46988566a09887f62eb65ca788f054d
  getVarMaybe :: Main.Env -> Main.VarT -> GHC.Base.Maybe Main.Val
  {- Arity: 2,
     Strictness: <S(LSSSLLLLLLLSSS),1*U(A,U,U,U,A,A,A,A,A,A,A,1*U,1*U,1*U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Env) (w1 :: Main.VarT) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$wgetVarMaybe ww2 ww3 ww4 ww12 ww13 ww14 w1 }) -}
4574b6ffabc58ce1b87e24a0965a05e8
  getVarMaybe_$s$wgetVarMaybe ::
    GHC.Prim.Int#
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int
    -> GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo
    -> GHC.Prim.MutVar#
         GHC.Prim.RealWorld
         (Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
    -> [Main.Val]
    -> [Main.Val]
    -> GHC.Base.Maybe Main.Val
  {- Arity: 7,
     Strictness: <S,1*U><L,1*U><L,1*U><L,1*U><L,A><L,A><L,U> -}
a5bb5c4320bb5e369ba5b45022c22919
  getenv :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs195
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
535cf68fa1359e2a33c29ef1b6a69cdb
  glob :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs224
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
9b94794aa8fed1f2ea67a7a2ce879475
  greater :: GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ @ a (w :: GHC.Types.Int) (w1 :: [a]) ->
                 case w of ww { GHC.Types.I# ww1 -> Main.$wgreater @ a ww1 w1 }) -}
2b9d312359f9693612552742e1c7fd5f
  gt' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.gt'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
7bdf5a7ec23ea2ef269a79caf8dbec7e
  gt'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.ge'2 GHC.Classes.$fOrdDouble_$c>) -}
61d9aba738a7367b1479d90fc7413189
  idSrc :: Main.Env -> GHC.IORef.IORef GHC.Types.Int
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLLS),1*U(A,A,A,A,A,A,A,A,A,A,A,A,A,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 (GHC.STRef.STRef @ GHC.Prim.RealWorld @ GHC.Types.Int dt64)
                   `cast`
                 (Sym (GHC.IORef.N:IORef[0]) <GHC.Types.Int>_N) }) -}
91b0420accebfd140243a3bceb642238
  idx :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs146
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
0b19b51f9a058472a40b26cdffacaf76
  idx' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.idx'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
53c91c98311ffcc316cf0e259afaa770
  idx'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (x3 :: Main.Env -> Main.Eval Main.Env)
                   (y :: Main.Env -> Main.Eval Main.Env)
                   (e :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case y of y1 { DEFAULT ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (x3 e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left x4 -> ds
                   Data.Either.Right y2
                   -> case y2 of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                      case ds2 of wild2 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                           of {}
                        : x4 ds11
                        -> case x4 of l { DEFAULT ->
                           case (y1 e1)
                                  `cast`
                                (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                    <([Main.Val], Main.ShError)>_N
                                                                    <GHC.Types.IO>_R
                                                                    <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                       <Data.Either.Either
                                                                                          ([Main.Val],
                                                                                           Main.ShError)
                                                                                          Main.Env>_R))
                                  ipv14 of ds12 { (#,#) ipv16 ipv17 ->
                           case ipv17 of wild3 {
                             Data.Either.Left x5 -> ds12
                             Data.Either.Right y3
                             -> case y3 of wild4 { Main.Env ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 dt65 ds22 dt66 dt67 dt68 ->
                                case ds14 of wild5 {
                                  []
                                  -> case GHC.List.badHead
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.Either.Either
                                                 ([Main.Val], Main.ShError) Main.Env #)
                                     of {}
                                  : x5 ds23
                                  -> case x5 of n13 { DEFAULT ->
                                     case l of wild6 {
                                       DEFAULT
                                       -> (# ipv16,
                                             Data.Either.Left
                                               @ ([Main.Val], Main.ShError)
                                               @ Main.Env
                                               (Main.def5, Main.TypeMismatch Main.idx'2 wild6) #)
                                       Main.List xs
                                       -> case Main.getIntForIdx1
                                                 xs
                                                 n13
                                                 ipv16 of ds24 { (#,#) ipv18 ipv19 ->
                                          case ipv19 of wild7 {
                                            Data.Either.Left e2
                                            -> (# ipv18,
                                                  Data.Either.Left
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    e2 #)
                                            Data.Either.Right x6
                                            -> case x6 of m { GHC.Types.I# ipv20 ->
                                               (# ipv18,
                                                  Data.Either.Right
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    (Main.Env
                                                       GHC.Types.True
                                                       (GHC.Types.:
                                                          @ Main.Val
                                                          (GHC.List.$w!!
                                                             @ Main.Val
                                                             xs
                                                             (GHC.Prim.-# ipv20 1#))
                                                          (GHC.Types.[] @ Main.Val))
                                                       ipv2
                                                       ipv3
                                                       ipv4
                                                       ipv5
                                                       ipv6
                                                       ipv7
                                                       ipv8
                                                       ipv9
                                                       ipv10
                                                       ipv11
                                                       ipv12
                                                       ipv13) #) } } } } } } } } } } } } } } } }) -}
7ed73b2c1358b263f4c6e0d01a676ec5
  idx'2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.defaultFuncs103) -}
cc1849ebb368eb20ab72f8aca7c73697
  ignoreError ::
    Main.Env
    -> ([Main.Val], Main.ShError)
    -> Control.Monad.Trans.Except.ExceptT
         ([Main.Val], Main.ShError) GHC.Types.IO Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.ignoreError1
                  `cast`
                (<Main.Env>_R
                 ->_R <([Main.Val], Main.ShError)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N)) -}
3dedffcdbc8325d349e3ff9eb200eea1
  ignoreError1 ::
    Main.Env
    -> ([Main.Val], Main.ShError)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U(U,U)><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (e :: ([Main.Val], Main.ShError))
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ipv7 of wild { Main.Flags ds ds1 ->
                 case e of wild1 { (,) v x3 ->
                 case ds1 of wild2 {
                   GHC.Types.False
                   -> (# eta,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env wild1 #)
                   GHC.Types.True
                   -> case GHC.IO.Handle.Text.hPutStr2
                             ipv6
                             (Main.$fShowShError_$cshow x3)
                             GHC.Types.True
                             eta of ds2 { (#,#) ipv14 ipv15 ->
                      (# ipv14,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (case v of dt61 { DEFAULT ->
                            Main.Env
                              GHC.Types.False
                              dt61
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              wild
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13 }) #) } } } } }) -}
6f7631d31603ae03d30f0b14d9f7c2d7
  ignoreInterpreterError :: Main.Flags -> GHC.Types.Bool
  RecSel Left Main.Flags
  {- Arity: 1, HasNoCafRefs, Strictness: <S(LS),1*U(A,U)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Flags) ->
                 case ds of wild { Main.Flags ds1 ds2 -> ds2 }) -}
55c68a0071e1ce1f8cf6f4ca60faa9cc
  incAllocCount ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      ()
  {- Arity: 5,
     Unfolding: InlineRule (0, True, True)
                Main.incAllocCount1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <()>_R)) -}
1db7730d8e52fa98187664a378e314a8
  incAllocCount1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Unfolding: (Text.Megaparsec.Internal.$fMonadStatestParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.ParseEnv
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   @ Main.Custom
                   Text.Megaparsec.Stream.$fStreamText0
                   (Main.$s$fMonadStatesStateT0 @ Main.ParseEnv)
                   @ ()
                   Main.incAllocCount2) -}
0f367ac4f2b3b2d9e872a1970cda3110
  incAllocCount2 :: Main.ParseEnv -> ((), Main.ParseEnv)
  {- Arity: 1, HasNoCafRefs, Strictness: <L,1*U(U,U,U,U,U,U,U,U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (s1 :: Main.ParseEnv) ->
                 (GHC.Tuple.(),
                  case s1 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                  Main.ParseEnv
                    (GHC.Prim.+# ipv 1#)
                    ipv1
                    ipv2
                    ipv3
                    ipv4
                    ipv5
                    ipv6
                    ipv7 })) -}
8a46dfd168db6ed27a022e8c5d6e6b73
  incFunID :: Main.Env -> Main.Eval Main.Env
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSSSSSSSSLSLLS),1*U(U,U,U,U,U,U,U,U,U,A,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.incFunID1
                  `cast`
                (<Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
dba8ca8be69db5e4dc4580acad3e55f3
  incFunID1 ::
    Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSSSSSSSSLSLLS),1*U(U,U,U,U,U,U,U,U,U,A,U,U,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ (env :: Main.Env) (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv13
                        eta of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild1 { GHC.Types.I# y ->
                 let {
                   ipv16 :: GHC.Prim.Int# = GHC.Prim.+# 1# y
                 } in
                 case GHC.Prim.writeMutVar#
                        @ GHC.Prim.RealWorld
                        @ GHC.Types.Int
                        ipv13
                        (GHC.Types.I# ipv16)
                        ipv14 of s2# { DEFAULT ->
                 (# s2#,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ Main.Env
                      (Main.Env
                         ipv
                         ipv1
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv16
                         ipv10
                         ipv11
                         ipv12
                         ipv13) #) } } } }) -}
61d9aba738a7367b1479d90fc7413189
  inn :: Main.Env -> GHC.IO.Handle.Types.Handle
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLLLLLLLL),1*U(A,A,A,A,U,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds5 }) -}
fabcb4dbc59a86b81f8ea0ebe3f022d0
  int :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs138
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
6f7631d31603ae03d30f0b14d9f7c2d7
  interactiveMode :: Main.Flags -> GHC.Types.Bool
  RecSel Left Main.Flags
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SL),1*U(U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Flags) ->
                 case ds of wild { Main.Flags ds1 ds2 -> ds1 }) -}
639550a7a855d5f3de5e04a00c12f38a
  invalidFormat :: GHC.Base.String -> Main.Parser ()
  {- Arity: 6,
     Strictness: <S,1*U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.invalidFormat1
                  `cast`
                (<GHC.Base.String>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <()>_R)) -}
416ac7e06e42948f8be9ce28e0b07d50
  invalidFormat1 ::
    GHC.Base.String
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S,1*U><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ (t :: GHC.Base.String)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 case t of t3 { DEFAULT ->
                 let {
                   lvl531 :: Main.Custom = Main.InvalidFormat t3
                 } in
                 let {
                   lvl532 :: GHC.Base.Maybe Main.Custom
                   = GHC.Base.Just @ Main.Custom lvl531
                 } in
                 Text.Megaparsec.Internal.$fMonadStatestParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.ParseEnv
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   @ Main.Custom
                   Text.Megaparsec.Stream.$fStreamText0
                   (Main.$s$fMonadStatesStateT0 @ Main.ParseEnv)
                   @ ()
                   (\ (s1 :: Main.ParseEnv) ->
                    (GHC.Tuple.(),
                     case s1 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                     Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 lvl532 ipv7 }))
                   @ b
                   eta
                   eta1
                   eta2
                   eta3
                   eta4 }) -}
883e6a746b529519c58be2dd196003bc
  isArg :: GHC.Base.String -> GHC.Types.Bool
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: (\ (s :: GHC.Base.String) ->
                 case Data.OldList.words
                        (Main.completeFn_isArg' (GHC.Types.[] @ GHC.Types.Char) s) of x3 {
                   [] -> GHC.Types.False
                   : ds ds1
                   -> case ds1 of wild {
                        []
                        -> case s of wild1 {
                             [] -> case GHC.List.badHead ret_ty GHC.Types.Bool of {}
                             : x4 ds2
                             -> case x4 of wild2 { GHC.Types.C# ds3 ->
                                case ds3 of ds4 {
                                  DEFAULT -> GHC.Types.False
                                  '\t'# -> GHC.Types.True
                                  ' '# -> GHC.Types.True } } }
                        : ipv ipv1 -> GHC.Types.True } }) -}
61d9aba738a7367b1479d90fc7413189
  isErr :: Main.ParseEnv -> GHC.Base.Maybe Main.Custom
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLSL),1*U(A,A,A,A,A,A,U,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds6 }) -}
9497af141b06fa00e5929c9e13b3b15d
  isList :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (ds :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   []
                   -> GHC.Base.return
                        @ m
                        $dMonad
                        @ Main.Env
                        (Main.Env
                           GHC.Types.False
                           (GHC.Types.[] @ Main.Val)
                           ipv2
                           ipv3
                           ipv4
                           ipv5
                           ipv6
                           ipv7
                           ipv8
                           ipv9
                           ipv10
                           ipv11
                           ipv12
                           ipv13)
                   : x3 ds1
                   -> let {
                        fail :: GHC.Prim.Void# -> m Main.Env
                          <join 1> {- Arity: 1, Strictness: <L,A> -}
                        = \ (ds2 :: GHC.Prim.Void#)[OneShot] ->
                          case ds1 of wild1 {
                            []
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ Main.Env
                                 (Main.Env
                                    GHC.Types.False
                                    (GHC.Types.: @ Main.Val x3 (GHC.Types.[] @ Main.Val))
                                    ipv2
                                    ipv3
                                    ipv4
                                    ipv5
                                    ipv6
                                    ipv7
                                    ipv8
                                    ipv9
                                    ipv10
                                    ipv11
                                    ipv12
                                    ipv13)
                            : ipv14 ipv15
                            -> GHC.Base.return
                                 @ m
                                 $dMonad
                                 @ Main.Env
                                 (case Main.defaultFuncs_$sisList' x3 wild1 of dt61 { DEFAULT ->
                                  Main.Env
                                    dt61
                                    wild
                                    ipv2
                                    ipv3
                                    ipv4
                                    ipv5
                                    ipv6
                                    ipv7
                                    ipv8
                                    ipv9
                                    ipv10
                                    ipv11
                                    ipv12
                                    ipv13 }) }
                      } in
                      case x3 of wild1 {
                        DEFAULT -> fail GHC.Prim.void#
                        Main.List ds2
                        -> case ds1 of wild2 {
                             []
                             -> GHC.Base.return
                                  @ m
                                  $dMonad
                                  @ Main.Env
                                  (Main.Env
                                     GHC.Types.True
                                     (GHC.Types.: @ Main.Val wild1 (GHC.Types.[] @ Main.Val))
                                     ipv2
                                     ipv3
                                     ipv4
                                     ipv5
                                     ipv6
                                     ipv7
                                     ipv8
                                     ipv9
                                     ipv10
                                     ipv11
                                     ipv12
                                     ipv13)
                             : ipv14 ipv15 -> fail GHC.Prim.void# } } } }) -}
9a4199e9a25b76487fe9d0c5c9888bad
  keep' :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs49
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
42d338aa57dff8afe631237da236db82
  killThreadHandler ::
    Main.Env
    -> GHC.IO.Exception.AsyncException -> GHC.Types.IO Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLSL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.killThreadHandler1
                  `cast`
                (<Main.Env>_R
                 ->_R <GHC.IO.Exception.AsyncException>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Env>_R)) -}
a4f0b97ea6eafa89a0b5cf4d2ed480fe
  killThreadHandler1 ::
    Main.Env
    -> GHC.IO.Exception.AsyncException
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLSL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: GHC.IO.Exception.AsyncException)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   DEFAULT
                   -> case Main.killThreadHandler4 wild
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
                      of {}
                   GHC.IO.Exception.ThreadKilled
                   -> case GHC.Prim.readMutVar#
                             @ GHC.Prim.RealWorld
                             @ Main.ThreadInfo
                             ipv12
                             eta of ds1 { (#,#) ipv14 ipv15 ->
                      case ipv15 of tinfo { Main.ThreadInfo ipv16 ipv17 ipv18 ipv19 ->
                      case GHC.Prim.tryReadMVar#
                             @ GHC.Prim.RealWorld
                             @ Main.Env
                             ipv17
                             ipv14 of ds2 { (#,,#) ipv20 ipv21 ipv22 ->
                      case ipv21 of ds3 {
                        DEFAULT -> (# ipv20, ipv22 #)
                        0#
                        -> (# ipv20,
                              Main.Env
                                GHC.Types.False
                                Main.killThreadHandler2
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                                ipv10
                                ipv11
                                ipv12
                                ipv13 #) } } } } } }) -}
8c093c09f58bef927909de434171af7f
  killThreadHandler2 :: [Main.Val]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ Main.Val
                   Main.killThreadHandler3
                   (GHC.Types.[] @ Main.Val)) -}
5e62312be76d5598990a916038994003
  killThreadHandler3 :: Main.Val
  {- HasNoCafRefs, Strictness: m1, Unfolding: (Main.Float 130.0##) -}
89c2e30c4a367b875f89fe72b0cb4710
  killThreadHandler4 ::
    GHC.IO.Exception.AsyncException -> GHC.Types.IO Main.Env
  {- Arity: 1, Strictness: <B,U>x -}
2865092afdc13195d06417919f2cf9ca
  le' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.le'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
9530133b842c301b4bab137ef587b805
  le'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.ge'2 GHC.Classes.$fOrdDouble_$c<=) -}
4bcf6cc7ae2fed4aa74da2eeb9edb7ed
  len' :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ Main.Env
                   (case GHC.Base.build
                           @ Main.Val
                           (\ @ b1
                              (c :: Main.Val -> b1 -> b1)[OneShot]
                              (n13 :: b1)[OneShot] ->
                            GHC.Base.foldr
                              @ Main.Val
                              @ b1
                              (GHC.Base.mapFB @ Main.Val @ b1 @ Main.Val c Main.defaultFuncs161)
                              n13
                              xs1) of dt61 { DEFAULT ->
                    Main.Env
                      GHC.Types.True
                      dt61
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13 }) } }) -}
b2bc8e47bd702fc8ca5b013db23500ca
  lenc :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs154
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
8a8b8aeee0f3889be1b8e8798986a0fa
  less :: GHC.Types.Int -> [a] -> GHC.Types.Bool
  {- Arity: 2, HasNoCafRefs, Strictness: <S(S),1*U(U)><S,1*U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a (x3 :: GHC.Types.Int) (y :: [a]) ->
                 case x3 of x4 { GHC.Types.I# ipv ->
                 case y of y1 { DEFAULT ->
                 case Main.greater @ a x4 y1 of wild {
                   GHC.Types.False -> GHC.Types.True
                   GHC.Types.True -> GHC.Types.False } } }) -}
e263d95beeb417b0d8ca3b4e406efcb5
  list :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ Main.Env
                   (Main.Env
                      ipv
                      (GHC.Types.: @ Main.Val (Main.List xs1) (GHC.Types.[] @ Main.Val))
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13) } }) -}
e06b6631d0fe2e1ae877f3d44dab750a
  load :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U(U,U,U,U,U,U,U,U),U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.load1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
c7f00d4d67d397743a8f885de766c230
  load1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U(U,U,U,U,U,U,U,U),U,U,U,U,U)><S,1*U><S,U> -}
20f9b7bad262c6a75bea26b165c03a47
  loop :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs271
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
0dfa977f3be74f9b1bb64298244da44b
  loop' :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(LS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.loop'1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
e19c1297e787fc53491525ef5f5cd16c
  loop'1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(LS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (x3 :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ipv7 of wild { Main.Flags ds ds1 ->
                 case x3 of wild1 {
                   []
                   -> case Main.loop'2
                      ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                      of {}
                   : cmd arg
                   -> case Main.defaultFuncs51
                             Main.defaultFuncs50
                               `cast`
                             (<Main.Env>_R
                              ->_R <[Main.Val]>_R
                              ->_R Sym (GHC.Types.N:IO[0]
                                            <Data.Either.Either
                                               ([Main.Val], Main.ShError)
                                               Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                        <([Main.Val],
                                                                          Main.ShError)>_N
                                                                        <GHC.Types.IO>_R
                                                                        <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                             wild1
                             env1
                             eta of ds2 { (#,#) ipv14 ipv15 ->
                      case ipv15 of wild2 {
                        Data.Either.Left l
                        -> case l of wild3 { (,) v ds3 ->
                           case ds3 of wild4 {
                             DEFAULT
                             -> case ds1 of wild5 {
                                  GHC.Types.False -> ds2
                                  GHC.Types.True
                                  -> case GHC.IO.Handle.Text.hPutStr2
                                            ipv6
                                            (case wild4 of wild6 {
                                               Main.SomeError s -> s
                                               Main.NumArgs s dt61
                                               -> GHC.CString.unpackAppendCString#
                                                    Main.$fShowShError7
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       s
                                                       (GHC.CString.unpackAppendCString#
                                                          Main.$fShowShError6
                                                          (case GHC.Show.$wshowSignedInt
                                                                  0#
                                                                  dt61
                                                                  (GHC.Types.[]
                                                                     @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                           GHC.Types.: @ GHC.Types.Char ww5 ww6 })))
                                               Main.TypeMismatch s v1
                                               -> GHC.CString.unpackAppendCString#
                                                    Main.$fShowShError5
                                                    (GHC.Base.++
                                                       @ GHC.Types.Char
                                                       s
                                                       (GHC.CString.unpackAppendCString#
                                                          Main.$fShowShError4
                                                          (Main.$fShowShError_$cshow1 v1)))
                                               Main.UnboundVar t
                                               -> GHC.CString.unpackAppendCString#
                                                    Main.$fShowShError3
                                                    t
                                               Main.Internal s
                                               -> GHC.CString.unpackAppendCString#
                                                    Main.$fShowShError2
                                                    s })
                                            GHC.Types.True
                                            ipv14 of ds4 { (#,#) ipv16 ipv17 ->
                                     Main.defaultFuncs271
                                       env1
                                       (GHC.Types.: @ Main.Val cmd v)
                                       ipv16 } }
                             Main.Returned s
                             -> Main.defaultFuncs271 env1 (GHC.Types.: @ Main.Val cmd v) ipv14
                             Main.Exited s -> ds2
                             Main.Broken s -> ds2 } }
                        Data.Either.Right r
                        -> Main.defaultFuncs271
                             env1
                             (GHC.Types.:
                                @ Main.Val
                                cmd
                                (case r of wild3 { Main.Env ds3 ds4 ds5 ds6 ds7 ds8 ds9 ds10 ds11 dt61 ds12 dt62 dt63 dt64 ->
                                 ds4 }))
                             ipv14 } } } } }) -}
265b768412ca0c1ddbac74fea83de141
  loop'2 :: Main.Eval Main.Env
  {- Strictness: x -}
46508f246b299e4c91b1f3201c4e31c8
  lt' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.lt'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
a84d9ca0953f9bebe6f94e70099b6809
  lt'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.ge'2 GHC.Classes.$fOrdDouble_$c<) -}
b4f9ae97a091b232a88173a93240314d
  main :: GHC.Types.IO ()
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R)) -}
529073e95d7e97cca9b9c5c633464b51
  main1 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1, Strictness: <S,U> -}
2ae627898cff160a4ab35ad5461925fa
  main2 ::
    GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 1,
     Unfolding: (GHC.TopHandler.runMainIO1
                   @ ()
                   Main.main1 `cast` (Sym (GHC.Types.N:IO[0] <()>_R))) -}
8032f934a581027135b1270e0d7dc8dc
  map' :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs178
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
2ca6151a0e00e0881a62f9596a0b2946
  map'' ::
    Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> Main.Env
    -> [Main.Val]
    -> Main.Eval Main.Env
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs179
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
6fe4cca27bf8b01faca5f51a3bab3f34
  match' ::
    GHC.Base.Monad m =>
    (Main.Env -> m Main.Env)
    -> (Main.Env -> m Main.Env) -> Main.Env -> m Main.Env
  {- Arity: 4,
     Strictness: <S(LC(C(S))LLL),U(1*U(1*U(C(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Main.Env -> m Main.Env)
                   (eta1 :: Main.Env -> m Main.Env)
                   (eta2 :: Main.Env) ->
                 case eta of x3 { DEFAULT ->
                 case eta1 of y { DEFAULT ->
                 case eta2 of e { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 let {
                   $dFunctor :: GHC.Base.Applicative m = GHC.Base.$p1Monad @ m $dMonad
                 } in
                 let {
                   $dFunctor1 :: GHC.Base.Functor m
                   = GHC.Base.$p1Applicative @ m $dFunctor
                 } in
                 let {
                   lvl531 :: m Main.Val
                   = GHC.Base.fmap
                       @ m
                       $dFunctor1
                       @ Main.Env
                       @ Main.Val
                       Main.match'2
                       (y e)
                 } in
                 let {
                   lvl532 :: m Main.Env
                   = GHC.Base.return
                       @ m
                       $dMonad
                       @ Main.Env
                       (Main.Env
                          GHC.Types.False
                          (GHC.Types.[] @ Main.Val)
                          ipv2
                          ipv3
                          ipv4
                          ipv5
                          ipv6
                          ipv7
                          ipv8
                          ipv9
                          ipv10
                          ipv11
                          ipv12
                          ipv13)
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ Main.Val
                   @ Main.Env
                   (GHC.Base.fmap
                      @ m
                      $dFunctor1
                      @ Main.Env
                      @ Main.Val
                      Main.match'2
                      (x3 e))
                   (\ (n13 :: Main.Val) ->
                    case n13 of n14 { DEFAULT ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ Main.Val
                      @ Main.Env
                      lvl531
                      (\ (m7 :: Main.Val) ->
                       case Main.match'_match''1 n14 m7 of wild {
                         []
                         -> GHC.Base.return
                              @ m
                              $dMonad
                              @ Main.Env
                              (Main.Env
                                 GHC.Types.True
                                 (GHC.Types.[] @ Main.Val)
                                 ipv2
                                 ipv3
                                 ipv4
                                 ipv5
                                 ipv6
                                 ipv7
                                 ipv8
                                 ipv9
                                 ipv10
                                 ipv11
                                 ipv12
                                 ipv13)
                         : ds ds1
                         -> case ds of wild1 {
                              []
                              -> case ds1 of wild2 {
                                   [] -> lvl532
                                   : ipv14 ipv15
                                   -> GHC.Base.return
                                        @ m
                                        $dMonad
                                        @ Main.Env
                                        (case Main.match'_$sgo
                                                (GHC.Types.[] @ Main.Val)
                                                wild2 of dt61 { DEFAULT ->
                                         Main.Env
                                           GHC.Types.True
                                           dt61
                                           ipv2
                                           ipv3
                                           ipv4
                                           ipv5
                                           ipv6
                                           ipv7
                                           ipv8
                                           ipv9
                                           ipv10
                                           ipv11
                                           ipv12
                                           ipv13 }) }
                              : ipv14 ipv15
                              -> GHC.Base.return
                                   @ m
                                   $dMonad
                                   @ Main.Env
                                   (case Main.match'_$sgo wild1 ds1 of dt61 { DEFAULT ->
                                    Main.Env
                                      GHC.Types.True
                                      dt61
                                      ipv2
                                      ipv3
                                      ipv4
                                      ipv5
                                      ipv6
                                      ipv7
                                      ipv8
                                      ipv9
                                      ipv10
                                      ipv11
                                      ipv12
                                      ipv13 }) } }) }) } } }) -}
47bf2760c0abb8645f4b6a34d985520c
  match'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (eta :: Main.Env -> Main.Eval Main.Env)
                   (eta1 :: Main.Env -> Main.Eval Main.Env)
                   (eta2 :: Main.Env)
                   (eta3 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta1 of y { DEFAULT ->
                 case eta2 of e { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (eta e)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta3 of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left x3 -> ds
                   Data.Either.Right y1
                   -> case y1 of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                      case ds2 of wild2 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                           of {}
                        : x3 ds11
                        -> case x3 of n13 { DEFAULT ->
                           case (y e)
                                  `cast`
                                (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                    <([Main.Val], Main.ShError)>_N
                                                                    <GHC.Types.IO>_R
                                                                    <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                       <Data.Either.Either
                                                                                          ([Main.Val],
                                                                                           Main.ShError)
                                                                                          Main.Env>_R))
                                  ipv14 of ds12 { (#,#) ipv16 ipv17 ->
                           case ipv17 of wild3 {
                             Data.Either.Left x4 -> ds12
                             Data.Either.Right y2
                             -> case y2 of wild4 { Main.Env ds13 ds14 ds15 ds16 ds17 ds18 ds19 ds20 ds21 dt65 ds22 dt66 dt67 dt68 ->
                                case ds14 of wild5 {
                                  []
                                  -> case GHC.List.badHead
                                     ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                               Data.Either.Either
                                                 ([Main.Val], Main.ShError) Main.Env #)
                                     of {}
                                  : x4 ds23
                                  -> case Main.match'_match'' n13 x4 of wild6 {
                                       []
                                       -> (# ipv16,
                                             Data.Either.Right
                                               @ ([Main.Val], Main.ShError)
                                               @ Main.Env
                                               (Main.Env
                                                  GHC.Types.True
                                                  (GHC.Types.[] @ Main.Val)
                                                  ipv2
                                                  ipv3
                                                  ipv4
                                                  ipv5
                                                  ipv6
                                                  ipv7
                                                  ipv8
                                                  ipv9
                                                  ipv10
                                                  ipv11
                                                  ipv12
                                                  ipv13) #)
                                       : ds24 ds25
                                       -> case ds24 of wild7 {
                                            []
                                            -> case ds25 of wild8 {
                                                 []
                                                 -> (# ipv16,
                                                       Data.Either.Right
                                                         @ ([Main.Val], Main.ShError)
                                                         @ Main.Env
                                                         (Main.Env
                                                            GHC.Types.False
                                                            (GHC.Types.[] @ Main.Val)
                                                            ipv2
                                                            ipv3
                                                            ipv4
                                                            ipv5
                                                            ipv6
                                                            ipv7
                                                            ipv8
                                                            ipv9
                                                            ipv10
                                                            ipv11
                                                            ipv12
                                                            ipv13) #)
                                                 : ipv18 ipv19
                                                 -> (# ipv16,
                                                       Data.Either.Right
                                                         @ ([Main.Val], Main.ShError)
                                                         @ Main.Env
                                                         (case Main.match'_$sgo
                                                                 (GHC.Types.[] @ Main.Val)
                                                                 wild8 of dt69 { DEFAULT ->
                                                          Main.Env
                                                            GHC.Types.True
                                                            dt69
                                                            ipv2
                                                            ipv3
                                                            ipv4
                                                            ipv5
                                                            ipv6
                                                            ipv7
                                                            ipv8
                                                            ipv9
                                                            ipv10
                                                            ipv11
                                                            ipv12
                                                            ipv13 }) #) }
                                            : ipv18 ipv19
                                            -> (# ipv16,
                                                  Data.Either.Right
                                                    @ ([Main.Val], Main.ShError)
                                                    @ Main.Env
                                                    (case Main.match'_$sgo
                                                            wild7
                                                            ds25 of dt69 { DEFAULT ->
                                                     Main.Env
                                                       GHC.Types.True
                                                       dt69
                                                       ipv2
                                                       ipv3
                                                       ipv4
                                                       ipv5
                                                       ipv6
                                                       ipv7
                                                       ipv8
                                                       ipv9
                                                       ipv10
                                                       ipv11
                                                       ipv12
                                                       ipv13 }) #) } } } } } } } } } } } } }) -}
b7c1bef8f9a5cb78364ca1704ea70ed3
  match'2 :: Main.Env -> Main.Val
  {- Arity: 1,
     Strictness: <S(LSLLLLLLLLLLLL),1*U(A,U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (x3 :: Main.Env) ->
                 case x3 of wild { Main.Env ds ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 dt61 ds9 dt62 dt63 dt64 ->
                 case ds1 of wild1 {
                   [] -> GHC.List.badHead @ Main.Val : x4 ds10 -> x4 } }) -}
50aedc177274bc84701d38eaa31f4a87
  match'_$sgo :: [Main.Val] -> [[Main.Val]] -> [Main.Val]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><L,1*U> -}
02f1f5df46bb521baad8287daab8e75a
  match'_match'' :: Main.Val -> Main.Val -> [[Main.Val]]
  {- Arity: 2, Strictness: <S,U><S,U> -}
042bd2005e0191126b57c466482eaa57
  match'_match''1 :: Main.Val -> Main.Val -> [[Main.Val]]
  {- Arity: 2, Strictness: <S,U><S,U> -}
1fe5a53c521d2ac8344fd09207ff6751
  minus' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.minus'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
f90258b450376165f06203337cc59c98
  minus'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.div'2 GHC.Float.minusDouble) -}
129fa81e78235d025a2990618013ac51
  mkPath :: Main.Env -> Data.Text.Internal.Text -> GHC.Base.String
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLLSSSS),1*U(A,A,A,A,A,A,A,A,A,A,U,1*U,1*U,1*U)><S(SSS),1*U(U,U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Env) (w1 :: Data.Text.Internal.Text) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case w1 of ww15 { Data.Text.Internal.Text ww16 ww17 ww18 ->
                 Main.$wmkPath ww11 ww12 ww13 ww14 ww16 ww17 ww18 } }) -}
9be4003fad07182896c1477eb7365617
  mod' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.mod'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
17cca0b06a95d35a28c4c4083caf34d6
  mod'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.div'2 Main.mod'2) -}
0dcbb993f2c08729ea8192d0fb1f92fa
  mod'2 :: GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double
  {- Arity: 2, Strictness: <S(S),1*U(U)><S(S),1*U(U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: GHC.Types.Double) (w1 :: GHC.Types.Double) ->
                 case w of ww { GHC.Types.D# ww1 ->
                 case w1 of ww2 { GHC.Types.D# ww3 ->
                 case Main.$wmod' ww1 ww3 of ww4 { DEFAULT ->
                 GHC.Types.D# ww4 } } }) -}
25a0085a4ecff585395e45ebeaab2278
  mod'3 :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (-1) -}
adc13ede233e5f073b17f519bb64c623
  mod'_f :: GHC.Integer.Type.Integer
  {- HasNoCafRefs, Unfolding: (0) -}
5121add3a11519844d93f1a0d2668796
  mul' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.mul'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
4cd40f025e894334ce793b91dcb75233
  mul'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.div'2 GHC.Float.timesDouble) -}
ee6c3c1e4912d23a1dee57f2434b1a82
  multiDefine :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.multiDefine1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <()>_R)) -}
45ad323b78a5c5dc36f61cb5cb1b9689
  multiDefine1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   @ b
                   (w1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w2 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wmultiDefine ww1 ww2 ww3 @ b w1 w2 w3 w4 w5 }) -}
a2760055a7ab3d81482493e608f7c3f2
  neg ::
    (Main.Env -> Main.Eval Main.Env) -> Main.Env -> Main.Eval Main.Env
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Main.neg1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
b4ae0361657334b1f3a8e067d60b51d4
  neg1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, Unfolding: (Main.neg3 Main.neg2) -}
8f3e16f846c0c35f7b36893b43ee9b35
  neg2 :: GHC.Types.Double -> GHC.Types.Double
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds1 :: GHC.Types.Double) ->
                 case ds1 of wild1 { GHC.Types.D# y ->
                 GHC.Types.D# (GHC.Prim.*## -1.0## y) }) -}
f1efb22b52dc68f6374bf5de61c6826e
  neg3 ::
    (GHC.Types.Double -> GHC.Types.Double)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <S,1*U><C(C(S(LS))),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (f4 :: GHC.Types.Double -> GHC.Types.Double)
                   (x3 :: Main.Env -> Main.Eval Main.Env)
                   (e :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case f4 of f5 { DEFAULT ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (x3 e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left x4 -> ds
                   Data.Either.Right y
                   -> case y of wild1 { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                      case ds2 of wild2 {
                        []
                        -> case GHC.List.badHead
                           ret_ty (# GHC.Prim.State# GHC.Prim.RealWorld,
                                     Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
                           of {}
                        : x4 ds11
                        -> case Main.defaultFuncs127
                                  x4
                                  ipv14 of ds12 { (#,#) ipv16 ipv17 ->
                           case ipv17 of wild3 {
                             Data.Either.Left e2
                             -> (# ipv16,
                                   Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e2 #)
                             Data.Either.Right x5
                             -> case x5 of n13 { GHC.Types.D# ipv18 ->
                                (# ipv16,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (Main.Env
                                        GHC.Types.True
                                        (GHC.Types.:
                                           @ Main.Val
                                           (case f5 n13 of dt65 { GHC.Types.D# dt66 ->
                                            Main.Float dt66 })
                                           (GHC.Types.[] @ Main.Val))
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        ipv7
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13) #) } } } } } } } } }) -}
ec6817b14291fef2a9db02226f0ebdf5
  normalDispatch :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs50
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
c3c73ebdca524e3bffae5195873061e0
  not' :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.not'1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
eb2f9e505edcd5a6aafe87b2783a30ed
  not'' :: GHC.Base.Monad m => (t -> m Main.Env) -> t -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(A,1*C1(C1(U)),A,C(U),A)><S,1*U><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   @ t
                   ($dMonad :: GHC.Base.Monad m)
                   (f4 :: t -> m Main.Env)
                   (e :: t) ->
                 case f4 of f5 { DEFAULT ->
                 case e of e1 { DEFAULT ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ Main.Env
                   @ Main.Env
                   (f5 e1)
                   (\ (e2 :: Main.Env) ->
                    case e2 of e3 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Main.Env
                      (case ipv of wild {
                         GHC.Types.False
                         -> Main.Env
                              GHC.Types.True
                              ipv1
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13
                         GHC.Types.True
                         -> Main.Env
                              GHC.Types.False
                              ipv1
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13 }) }) } }) -}
22b726f58f135fee165d838a084aa3e1
  not''' ::
    (Main.Env -> Main.Eval Main.Env) -> Main.Env -> Main.Eval Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.not'''1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
5ab46e0af6e07bbce440857b249ac14c
  not'''1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3, HasNoCafRefs,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (x3 :: Main.Env -> Main.Eval Main.Env)
                   (e :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case (x3 e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left e2 -> ds1
                   Data.Either.Right x4
                   -> case x4 of n13 { Main.Env ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ->
                      (# ipv14,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (case ipv16 of wild1 {
                              GHC.Types.False
                              -> Main.Env
                                   GHC.Types.True
                                   ipv17
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv7
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13
                              GHC.Types.True
                              -> Main.Env
                                   GHC.Types.False
                                   ipv17
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv7
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13 }) #) } } } }) -}
991924abdb3ed277daba0e3f94dc7527
  not'1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (x3 :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case Main.defaultFuncs51
                        Main.defaultFuncs50
                          `cast`
                        (<Main.Env>_R
                         ->_R <[Main.Val]>_R
                         ->_R Sym (GHC.Types.N:IO[0]
                                       <Data.Either.Either
                                          ([Main.Val], Main.ShError)
                                          Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                   <([Main.Val], Main.ShError)>_N
                                                                   <GHC.Types.IO>_R
                                                                   <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                        x3
                        env
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e1 -> ds1
                   Data.Either.Right x4
                   -> case x4 of renv { Main.Env ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      case ipv2 of wild1 {
                        GHC.Types.False
                        -> (# ipv,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.Env
                                   GHC.Types.True
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv7
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13
                                   ipv14
                                   ipv15) #)
                        GHC.Types.True
                        -> (# ipv,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.Env
                                   GHC.Types.False
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv7
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13
                                   ipv14
                                   ipv15) #) } } } }) -}
339a6747015d29933be6f95b1fae921a
  notDefined :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.notDefined1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <()>_R)) -}
d291b3dcfaa126471098f2a06473f586
  notDefined1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   @ b
                   (w1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w2 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wnotDefined ww1 ww2 ww3 @ b w1 w2 w3 w4 w5 }) -}
79ce4adf8d1324cdc48507cb18c40a34
  notLiteral :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.notLiteral1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <()>_R)) -}
7cf063ba0e12df980454d057ce25dd70
  notLiteral1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   @ b
                   (w1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w2 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wnotLiteral ww1 ww2 ww3 @ b w1 w2 w3 w4 w5 }) -}
9b0c33ee77408ab6dc381e0fb9a30422
  notPureFunc :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.notPureFunc1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <()>_R)) -}
7bb794f82cba4a5517eda8d2672a07ed
  notPureFunc1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   @ b
                   (w1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w2 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wnotPureFunc ww1 ww2 ww3 @ b w1 w2 w3 w4 w5 }) -}
5abf4b7de892e5d972c21841970cce9f
  optHead ::
    [Main.Val]
    -> Data.Text.Internal.Text
    -> (Data.Text.Internal.Text, Data.Text.Internal.Text, [Main.Val])
  {- Arity: 2, Strictness: <S,1*U><S(SSS),1*U(U,U,U)>m, Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: [Main.Val]) (w1 :: Data.Text.Internal.Text) ->
                 case w1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 case Main.$woptHead w ww1 ww2 ww3 of ww4 { (#,,#) ww5 ww6 ww7 ->
                 (ww5, ww6, ww7) } }) -}
12a9bd41b1485378daa060086721836c
  options :: [System.Console.GetOpt.OptDescr GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ (System.Console.GetOpt.OptDescr GHC.Base.String)
                   Main.options1
                   (GHC.Types.[]
                      @ (System.Console.GetOpt.OptDescr GHC.Base.String))) -}
78b73b2130b43bdca01c095bc710cf4e
  options1 :: System.Console.GetOpt.OptDescr GHC.Base.String
  {- Strictness: m,
     Unfolding: (System.Console.GetOpt.Option
                   @ GHC.Base.String
                   Main.options10
                   Main.options7
                   Main.options4
                   Main.options2) -}
99562a7655034c8f63fb114eeaa21b40
  options10 :: [GHC.Types.Char]
  {- HasNoCafRefs, Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Types.Char
                   Main.options11
                   (GHC.Types.[] @ GHC.Types.Char)) -}
92b748e79c21f6ee58d7048ae7d0f9d7
  options11 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# 'c'#) -}
f1bf3ef967a6f0a870abd23dff1ff0ae
  options2 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.options3) -}
905671fd730c86601040914a36e6c588
  options3 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("command line"#) -}
f4b0229cf129409795a6ebd77af684c5
  options4 :: System.Console.GetOpt.ArgDescr GHC.Base.String
  {- Strictness: m2,
     Unfolding: (System.Console.GetOpt.ReqArg
                   @ GHC.Base.String
                   (GHC.Base.id @ GHC.Base.String)
                   Main.options5) -}
f7a5928a280e0930293d0b29173f3faa
  options5 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.options6) -}
b1ccda07bb12160e6d4b99bbfb366b29
  options6 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("COMMAND..."#) -}
e24946031277a03c0469db26a4991de1
  options7 :: [GHC.Base.String]
  {- Strictness: m2,
     Unfolding: (GHC.Types.:
                   @ GHC.Base.String
                   Main.options8
                   (GHC.Types.[] @ GHC.Base.String)) -}
7791c7943b3248d05b38f01a271fb675
  options8 :: [GHC.Types.Char]
  {- Unfolding: (GHC.CString.unpackCString# Main.options9) -}
82c70ff1a1b8fd18d03cdca811c0e463
  options9 :: GHC.Prim.Addr#
  {- HasNoCafRefs, Unfolding: ("command"#) -}
e734b6508076d3dac4d3736e4c32f04d
  or' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4, HasNoCafRefs,
     Unfolding: InlineRule (0, True, True)
                Main.or'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
3b5f5634fd19fc00f7570b1c2cb1acb1
  or'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, HasNoCafRefs,
     Unfolding: (Main.and'2 GHC.Classes.||) -}
61d9aba738a7367b1479d90fc7413189
  out :: Main.Env -> GHC.IO.Handle.Types.Handle
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLSLLLLLLLL),1*U(A,A,A,A,A,U,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds6 }) -}
a48f14364bda5f82a3d7cd1b4b8110c0
  para ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <S,1*U><C(C(S(LS))),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.para1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
bc924750f88d92bdce33eed21f1b1a4c
  para1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <S,1*U><C(C(S(LS))),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (f4 :: Main.Env -> Main.Eval Main.Env)
                   (g :: Main.Env -> Main.Eval Main.Env)
                   (e :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case f4 of f5 { DEFAULT ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Env
                        eta of ds { (#,#) ipv14 ipv15 ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case Main.defaultFuncs77
                                   e1
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case (f5 e1)
                                           `cast`
                                         (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                             <([Main.Val],
                                                                               Main.ShError)>_N
                                                                             <GHC.Types.IO>_R
                                                                             <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                                <Data.Either.Either
                                                                                                   ([Main.Val],
                                                                                                    Main.ShError)
                                                                                                   Main.Env>_R))
                                           eta2 of ds1 { (#,#) ipv16 ipv17 ->
                                    case ipv17 of wild {
                                      Data.Either.Left e2 -> ds1
                                      Data.Either.Right x3
                                      -> case x3 of re { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                                         ds1 } } })
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0]
                                             <Data.Either.Either
                                                ([Main.Val], Main.ShError)
                                                Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                         <([Main.Val],
                                                                           Main.ShError)>_N
                                                                         <GHC.Types.IO>_R
                                                                         <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                   s of ds1 { (#,#) ipv16 ipv17 ->
                            case ipv17 of renv { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                            case GHC.Prim.putMVar#
                                   @ GHC.Prim.RealWorld
                                   @ Main.Env
                                   ipv15
                                   renv
                                   ipv16 of s2# { DEFAULT ->
                            (# s2#, GHC.Tuple.() #) } } })
                           GHC.Conc.Sync.forkIO2
                           eta1)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv14 of ds1 { (#,#) ipv16 ipv17 ->
                 case (g e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        ipv16 of ds2 { (#,#) ipv18 ipv19 ->
                 case ipv19 of wild {
                   Data.Either.Left e2 -> ds2
                   Data.Either.Right x3
                   -> case x3 of re2 { Main.Env ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ipv33 ->
                      case GHC.Prim.readMVar#
                             @ GHC.Prim.RealWorld
                             @ Main.Env
                             ipv15
                             ipv18 of ds3 { (#,#) ipv34 ipv35 ->
                      case ipv35 of re1 { Main.Env ipv36 ipv37 ipv38 ipv39 ipv40 ipv41 ipv42 ipv43 ipv44 ipv45 ipv46 ipv47 ipv48 ipv49 ->
                      case GHC.Base.++ @ Main.Val ipv37 ipv21 of x4 { DEFAULT ->
                      case ipv36 of wild1 {
                        GHC.Types.False
                        -> (# ipv34,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.Env
                                   GHC.Types.False
                                   x4
                                   ipv22
                                   ipv23
                                   ipv24
                                   ipv25
                                   ipv26
                                   ipv27
                                   ipv28
                                   ipv29
                                   ipv30
                                   ipv31
                                   ipv32
                                   ipv33) #)
                        GHC.Types.True
                        -> (# ipv34,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.Env
                                   ipv20
                                   x4
                                   ipv22
                                   ipv23
                                   ipv24
                                   ipv25
                                   ipv26
                                   ipv27
                                   ipv28
                                   ipv29
                                   ipv30
                                   ipv31
                                   ipv32
                                   ipv33) #) } } } } } } } } } } }) -}
bbf39bdc2a5ee5d886a41a4f4b14f32b
  parens ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      a
    -> Text.Megaparsec.Internal.ParsecT
         Main.Custom
         Data.Text.Internal.Text
         (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
         a
  {- Arity: 6,
     Unfolding: (\ @ a ->
                 Main.$sbetween
                   @ Data.Text.Internal.Text
                   @ Data.Text.Internal.Text
                   @ a
                   Main.parens3
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             (Sub (Sym (Text.Megaparsec.Stream.D:R:TokensText0[0])))))
                   Main.parens1
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             (Sub (Sym (Text.Megaparsec.Stream.D:R:TokensText0[0])))))) -}
e00e460b899353768658a05b67938e14
  parens1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Unfolding: (Text.Megaparsec.Internal.$fApplicativeParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.Custom
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   Text.Megaparsec.Stream.$fStreamText0
                   @ (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
                   @ ()
                   Main.parens2
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R))
                   Main.brank1
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <()>_R))) -}
04e8a9753bd9431d1939fd2affec885d
  parens2 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(LSSL),1*U(U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.:| ww6 ww7 ->
                 Main.$wparens @ b ww1 ww6 ww7 ww3 ww4 w1 w3 w4 } }) -}
91e3a1f0a97755a1bf4d606e38708b0d
  parens3 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Unfolding: (Text.Megaparsec.Internal.$fApplicativeParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.Custom
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   Text.Megaparsec.Stream.$fStreamText0
                   @ (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
                   @ ()
                   Main.parens4
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R))
                   Main.brank1
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <()>_R))) -}
6417a13f361fdaf780d33f772a352ca3
  parens4 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(LSSL),1*U(U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.:| ww6 ww7 ->
                 Main.$wparens1 @ b ww1 ww6 ww7 ww3 ww4 w1 w3 w4 } }) -}
61d9aba738a7367b1479d90fc7413189
  parenv :: Main.Env -> Main.ParseEnv
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLSLLLLL),1*U(A,A,A,A,A,A,A,A,U(U,U,U,U,U,U,U,U),A,A,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds9 }) -}
330e727cbe740a2069d919799fd35840
  parseClsr :: Main.Parser Main.Val
  {- Arity: 5,
     Strictness: <L,U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.parseClsr1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Val>_R)) -}
ae6bad60c68ad1c6ccde850c936aa2bf
  parseClsr1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <L,U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(U)><L,U><L,C(C1(C1(U)))><L,C(C1(U))> -}
57b26dabc46bf94f21c059152f9fc2f5
  parseDoller :: Main.Parser Main.Val
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,A><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.parseDoller1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Val>_R)) -}
b9ab19d7bf61dd7abe35f8299a94f66a
  parseDoller1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,A><L,C(C1(U))>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Main.Val
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (eok :: Main.Val
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 let {
                   eerr' :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b
                     {- Arity: 2 -}
                   = \ (err1 :: Text.Megaparsec.Error.ParseError
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                  Main.Custom)
                       (ds1 :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                     eerr err1 s1
                 } in
                 Main.parseDoller2 @ b s1 cok eerr' eok eerr') -}
b7b270ae7dc13a02a3257321feb8a958
  parseDoller2 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,U><L,A><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: Main.Val
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w3 :: Main.Val
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                 Main.$wp @ b1 ww6 ww7 ww8 ww10 ww11 ww3 ww4 w1 w2 w4 } } }) -}
61d9aba738a7367b1479d90fc7413189
  parseFlags :: Main.ParseEnv -> Main.Flags
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLS),1*U(A,A,A,A,A,A,A,U(U,U))>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds7 }) -}
14cfbb4343ea7446e300f34987f52424
  parseList ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      Main.Val
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.parseList1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Val>_R)) -}
b278735b603ad9fcf1750198733777ac
  parseList1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Main.Val
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eok :: Main.Val
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1) ->
                 Text.Megaparsec.Internal.$fApplicativeParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.Custom
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   Text.Megaparsec.Stream.$fStreamText0
                   @ [Main.Val]
                   @ Data.Text.Internal.Text
                   Main.parseList3
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <[Main.Val]>_R))
                   Main.parseList2
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <Data.Text.Internal.Text>_R))
                   @ b1
                   s1
                   (\ (x3 :: [Main.Val]) -> cok (Main.$WList x3))
                   cerr
                   (\ (x3 :: [Main.Val]) -> eok (Main.$WList x3))
                   eerr) -}
51c723a486792907ebce6c02d574f91c
  parseList2 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(LSSL),1*U(U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.:| ww6 ww7 ->
                 Main.$wp1 @ b ww1 ww6 ww7 ww3 ww4 w1 w3 w4 } }) -}
a0aedc119145aae2aa093d9540ce38dd
  parseList3 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> ([Main.Val]
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> ([Main.Val]
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: [Main.Val]
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eta3 :: [Main.Val]
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1) ->
                 Text.Megaparsec.Internal.$fApplicativeParsecT1
                   @ Data.Text.Internal.Text
                   @ Main.Custom
                   @ (Control.Monad.Trans.State.Lazy.StateT
                        Main.ParseEnv GHC.Types.IO)
                   Text.Megaparsec.Stream.$fStreamText0
                   @ (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text)
                   @ ()
                   Main.parseList5
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text>_R))
                   Main.brank1
                     `cast`
                   (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                             <Main.Custom>_N
                             <Data.Text.Internal.Text>_N
                             <Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO>_R
                             <()>_R))
                   @ b1
                   eta
                   (\ (x3 :: Data.Text.Internal.Text)
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    Main.parseList4
                      @ b1
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ [Main.Val]
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         eta1)
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         eta2))
                     `cast`
                   (Sub (Sym (Text.Megaparsec.Stream.D:R:TokensText0[0]))
                    ->_R <Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1>_R)
                   eta2
                   (\ (x3 :: Data.Text.Internal.Text)
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    Main.parseList4
                      @ b1
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ [Main.Val]
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         eta3)
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         eta4))
                     `cast`
                   (Sub (Sym (Text.Megaparsec.Stream.D:R:TokensText0[0]))
                    ->_R <Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1>_R)
                   eta4) -}
7b6561cab6578fb9b47c1cafc1076d34
  parseList4 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> ([Main.Val]
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> ([Main.Val]
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,U>,
     Unfolding: (\ @ b1
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: [Main.Val]
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (cerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1)
                   (eok :: [Main.Val]
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b1)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b1) ->
                 Main.andBrank1
                   @ Main.Val
                   Main.parseList_m1
                   @ b1
                   s1
                   (\ (x3 :: Main.Val)
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    Main.$wk1
                      x3
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ [Main.Val]
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         cok))
                   cerr
                   (\ (x3 :: Main.Val)
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    Main.$wk1
                      x3
                      @ b1
                      s'
                      cok
                      cerr
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ [Main.Val]
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b1
                         hs5
                         eok))
                   eerr) -}
fc91a03298354b496c1c41703f66d00d
  parseList5 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(LSSL),1*U(U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Stream.Tokens Data.Text.Internal.Text
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.:| ww6 ww7 ->
                 Main.$wp2 @ b ww1 ww6 ww7 ww3 ww4 w1 w3 w4 } }) -}
5f6f54063cac590db451cce23509dcf4
  parseList_m1 ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      Main.Val
  {- Unfolding: (Main.parseWord (GHC.Types.[] @ GHC.Types.Char)) -}
2441f78db736b7515cfcdb0cf12a6779
  parseRedirect :: Main.Parser Main.Val
  {- Arity: 5,
     Strictness: <S(LSSL),1*U(U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,U><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.parseRedirect1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Val>_R)) -}
43b776db5373f4df52a62b1965387eb6
  parseRedirect1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(LSSL),1*U(U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,U><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: Main.Val
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Main.Val
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww2 of ww5 { GHC.Base.:| ww6 ww7 ->
                 Main.$wparseRedirect @ b ww1 ww6 ww7 ww3 ww4 w1 w2 w3 w4 } }) -}
ccb84a0f54061fdb77d73b9dcc5e2a1b
  parseStr :: Main.Parser Main.Val
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.parseStr1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Val>_R)) -}
a57ca8b5655cdcf6a005b0265b3eaade
  parseStr1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5, Strictness: <L,U><L,C(U)><L,U><L,C(U)><L,C(C1(U))> -}
1ea9bf2acd630b8aea4ac5d3ed35946c
  parseSym :: GHC.Base.String -> Main.Parser Main.Val
  {- Arity: 1, Strictness: <S,1*U> -}
6c721579c195ef9f3701b0d7c39d4b3f
  parseTilde :: Main.Parser Main.Val
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.parseTilde1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Val>_R)) -}
9f97cae1be30d63a80c946418fb35f9e
  parseTilde1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,A><L,A><L,C(C1(U))>,
     Unfolding: InlineRule (5, True, False)
                (\ @ b
                   (s1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (cok :: Main.Val
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b)
                   (ds :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (eok :: Main.Val
                           -> Text.Megaparsec.State.State Data.Text.Internal.Text
                           -> Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                           -> Control.Monad.Trans.State.Lazy.StateT
                                Main.ParseEnv GHC.Types.IO b)
                   (eerr :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 let {
                   eerr' :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b
                     {- Arity: 2 -}
                   = \ (err1 :: Text.Megaparsec.Error.ParseError
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                                  Main.Custom)
                       (ds1 :: Text.Megaparsec.State.State Data.Text.Internal.Text) ->
                     eerr err1 s1
                 } in
                 Main.parseTilde2 @ b s1 cok eerr' eok eerr') -}
5483dfd9a2974b324394c75f16a1d871
  parseTilde2 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,1*C1(C1(C1(U)))><L,1*C1(C1(U))><L,A><L,1*C1(C1(U))>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: Main.Val
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w3 :: Main.Val
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                 Main.$wp3 @ b1 ww6 ww7 ww8 ww10 ww11 ww3 ww4 w1 w2 w4 } } }) -}
7651fd71f735f663ceb865314d26dae5
  parseVar ::
    Text.Megaparsec.Internal.ParsecT
      Main.Custom
      Data.Text.Internal.Text
      (Control.Monad.Trans.State.Lazy.StateT Main.ParseEnv GHC.Types.IO)
      Main.Val
  {- Arity: 5,
     Strictness: <L,U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(C1(U))>,
     Unfolding: InlineRule (0, True, True)
                Main.parseVar1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <Main.Val>_R)) -}
27816227a98cb5ce5343c860b6b7e37d
  parseVar1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Main.Val
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <L,U(U(U,U,U),U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(C1(U))> -}
bb7e99e09700a30bfd46996df01de680
  parseWord :: GHC.Base.String -> Main.Parser Main.Val
  {- Arity: 1, Strictness: <S,1*U> -}
25c73b9918009ba18c5d2a844f5f0575
  pipe' ::
    (GHC.IO.Handle.Types.Handle -> Main.Env -> t)
    -> (t -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 5,
     Strictness: <S,1*U><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.pipe'1
                  `cast`
                (forall (t :: <*>_N).
                 <GHC.IO.Handle.Types.Handle -> Main.Env -> t>_R
                 ->_R <t -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
37660e5ce45983e6ba528dbc9ff1dd43
  pipe'1 ::
    (GHC.IO.Handle.Types.Handle -> Main.Env -> t)
    -> (t -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 5,
     Strictness: <S,1*U><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ @ t
                   (h :: GHC.IO.Handle.Types.Handle -> Main.Env -> t)
                   (f4 :: t -> Main.Eval Main.Env)
                   (g :: Main.Env -> Main.Eval Main.Env)
                   (e :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case h of h1 { DEFAULT ->
                 case f4 of f5 { DEFAULT ->
                 case g of g1 { DEFAULT ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case System.Process.Posix.createPipeInternal1
                        eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild { (,) i o ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Env
                        ipv14 of ds { (#,#) ipv16 ipv17 ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case Main.defaultFuncs77
                                   e1
                                   (\ (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                                    case (f5 (h1 o e1))
                                           `cast`
                                         (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                             <([Main.Val],
                                                                               Main.ShError)>_N
                                                                             <GHC.Types.IO>_R
                                                                             <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                                <Data.Either.Either
                                                                                                   ([Main.Val],
                                                                                                    Main.ShError)
                                                                                                   Main.Env>_R))
                                           eta2 of ds2 { (#,#) ipv18 ipv19 ->
                                    case ipv19 of wild1 {
                                      Data.Either.Left e2 -> ds2
                                      Data.Either.Right x3
                                      -> case x3 of re { Main.Env ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ipv33 ->
                                         case GHC.IO.Handle.hClose1
                                                o
                                                ipv18 of ds3 { (#,#) ipv34 ipv35 ->
                                         (# ipv34, wild1 #) } } } })
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0]
                                             <Data.Either.Either
                                                ([Main.Val], Main.ShError)
                                                Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                         <([Main.Val],
                                                                           Main.ShError)>_N
                                                                         <GHC.Types.IO>_R
                                                                         <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                   s of ds2 { (#,#) ipv18 ipv19 ->
                            case ipv19 of renv { Main.Env ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ipv33 ->
                            case GHC.Prim.putMVar#
                                   @ GHC.Prim.RealWorld
                                   @ Main.Env
                                   ipv17
                                   renv
                                   ipv18 of s2# { DEFAULT ->
                            (# s2#, GHC.Tuple.() #) } } })
                           GHC.Conc.Sync.forkIO2
                           eta1)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv16 of ds2 { (#,#) ipv18 ipv19 ->
                 case (g1
                         (case i of dt61 { DEFAULT ->
                          Main.Env
                            ipv
                            ipv1
                            ipv2
                            ipv3
                            dt61
                            ipv5
                            ipv6
                            ipv7
                            ipv8
                            ipv9
                            ipv10
                            ipv11
                            ipv12
                            ipv13 }))
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        ipv18 of ds3 { (#,#) ipv20 ipv21 ->
                 case ipv21 of wild1 {
                   Data.Either.Left e2 -> ds3
                   Data.Either.Right x3
                   -> case x3 of re2 { Main.Env ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ipv32 ipv33 ipv34 ipv35 ->
                      case GHC.IO.Handle.hClose1 i ipv20 of ds4 { (#,#) ipv36 ipv37 ->
                      case GHC.Prim.readMVar#
                             @ GHC.Prim.RealWorld
                             @ Main.Env
                             ipv17
                             ipv36 of ds5 { (#,#) ipv38 ipv39 ->
                      case ipv39 of re1 { Main.Env ipv40 ipv41 ipv42 ipv43 ipv44 ipv45 ipv46 ipv47 ipv48 ipv49 ipv50 ipv51 ipv52 ipv53 ->
                      case ipv40 of wild2 {
                        GHC.Types.False
                        -> (# ipv38,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.Env
                                   GHC.Types.False
                                   ipv41
                                   ipv24
                                   ipv25
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv29
                                   ipv30
                                   ipv31
                                   ipv32
                                   ipv33
                                   ipv34
                                   ipv35) #)
                        GHC.Types.True
                        -> (# ipv38,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (Main.Env
                                   ipv22
                                   ipv23
                                   ipv24
                                   ipv25
                                   ipv4
                                   ipv5
                                   ipv6
                                   ipv29
                                   ipv30
                                   ipv31
                                   ipv32
                                   ipv33
                                   ipv34
                                   ipv35) #) } } } } } } } } } } } } } } }) -}
1dc988eb7dcc384eaa21bf646e38b3c5
  plus' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.plus'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
5c01ff1dd062b3b9312d7eaefc16ec65
  plus'' ::
    Data.Traversable.Traversable t =>
    Main.Env -> t Main.Val -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <S(LLLLC(C(C(S)))L),U(A,1*U(A,A,A,A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A),A,A,1*C1(C1(C1(U))),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.plus''1
                  `cast`
                (forall (t :: <* -> *>_N).
                 <Data.Traversable.Traversable t>_R
                 ->_R <Main.Env>_R
                 ->_R <t Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
93e0efb1334f2b74d7d9990b5c609404
  plus''1 ::
    Data.Traversable.Traversable t =>
    Main.Env
    -> t Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <S(LLLLC(C(C(S)))L),U(A,1*U(A,A,A,A,1*C1(C1(C1(U))),A,A,A,A,A,A,A,A,A,A,A),A,A,1*C1(C1(C1(U))),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ @ t :: * -> *
                   ($dTraversable :: Data.Traversable.Traversable t)
                   (eta :: Main.Env)
                   (eta1 :: t Main.Val)
                   (eta2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta of env { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case eta1 of xs { DEFAULT ->
                 case (Data.Traversable.mapM
                         @ t
                         $dTraversable
                         @ Main.Eval
                         @ Main.Val
                         @ GHC.Types.Double
                         Main.$fMonadEval
                         Main.defaultFuncs127
                           `cast`
                         (<Main.Val>_R
                          ->_R Sym (GHC.Types.N:IO[0]
                                        <Data.Either.Either
                                           ([Main.Val], Main.ShError)
                                           GHC.Types.Double>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                            <([Main.Val],
                                                                              Main.ShError)>_N
                                                                            <GHC.Types.IO>_R
                                                                            <GHC.Types.Double>_N) ; Sym (Main.N:Eval[0]) <GHC.Types.Double>_N))
                         xs)
                        `cast`
                      (Main.N:Eval[0] <t GHC.Types.Double>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                    <([Main.Val], Main.ShError)>_N
                                                                    <GHC.Types.IO>_R
                                                                    <t GHC.Types.Double>_N ; GHC.Types.N:IO[0]
                                                                                                 <Data.Either.Either
                                                                                                    ([Main.Val],
                                                                                                     Main.ShError)
                                                                                                    (t GHC.Types.Double)>_R))
                        eta2 of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left e1
                   -> (# ipv14,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                   Data.Either.Right x3
                   -> case x3 of ys { DEFAULT ->
                      (# ipv14,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.True
                              (GHC.Types.:
                                 @ Main.Val
                                 (case Data.Foldable.foldl
                                         @ t
                                         (Data.Traversable.$p2Traversable @ t $dTraversable)
                                         @ GHC.Types.Double
                                         @ GHC.Types.Double
                                         GHC.Float.plusDouble
                                         Main.plus''2
                                         ys of dt61 { GHC.Types.D# dt62 ->
                                  Main.Float dt62 })
                                 (GHC.Types.[] @ Main.Val))
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) } } } } }) -}
a1666628c727f46eb04d9c336aa40dea
  plus''2 :: GHC.Types.Double
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.D# 0.0##) -}
db293db659ab6e1e7ae0f02158882640
  plus'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.div'2 GHC.Float.plusDouble) -}
90366dc04965f4c6c6037235e336c142
  pow' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Unfolding: InlineRule (0, True, True)
                Main.pow'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
1d9f8fc25dc70409fd03c4758e269f75
  pow'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, Unfolding: (Main.div'2 GHC.Float.powerDouble) -}
8a45aabfedc8a9a98f2cdcca83ec6045
  print :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.print1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
9f82b4f0e98352fd74159209050f6b31
  print1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 letrec {
                   go16 :: [Main.Val]
                           -> GHC.Prim.State# GHC.Prim.RealWorld
                           -> (# GHC.Prim.State# GHC.Prim.RealWorld,
                                 Data.Either.Either
                                   ([Main.Val], Main.ShError) [Data.Text.Internal.Text] #)
                     {- Arity: 2, Strictness: <S,1*U><S,U> -}
                   = \ (ds :: [Main.Val])
                       (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                     case ds of wild {
                       [] -> (# eta1, Main.defaultFuncs241 #)
                       : y ys
                       -> case Main.$wexpand env1 y eta1 of ds1 { (#,#) ipv14 ipv15 ->
                          case ipv15 of wild1 {
                            Data.Either.Left x3
                            -> (# ipv14,
                                  Data.Either.Left
                                    @ ([Main.Val], Main.ShError)
                                    @ [Data.Text.Internal.Text]
                                    x3 #)
                            Data.Either.Right y1
                            -> case go16 ys ipv14 of ds2 { (#,#) ipv16 ipv17 ->
                               case ipv17 of wild2 {
                                 Data.Either.Left e1 -> ds2
                                 Data.Either.Right x3
                                 -> (# ipv16,
                                       Data.Either.Right
                                         @ ([Main.Val], Main.ShError)
                                         @ [Data.Text.Internal.Text]
                                         (GHC.Types.: @ Data.Text.Internal.Text y1 x3) #) } } } } }
                 } in
                 case go16 xs eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild {
                   Data.Either.Left e1
                   -> (# ipv14,
                         Data.Either.Left @ ([Main.Val], Main.ShError) @ Main.Env e1 #)
                   Data.Either.Right x3
                   -> case x3 of x4 { DEFAULT ->
                      case Data.Text.IO.appendFile2
                             ipv5
                             (Data.Text.concat x4)
                             ipv14 of ds2 { (#,#) ipv16 ipv17 ->
                      (# ipv16,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ Main.Env
                           (Main.Env
                              GHC.Types.True
                              Main.defaultFuncs230
                              ipv2
                              ipv3
                              ipv4
                              ipv5
                              ipv6
                              ipv7
                              ipv8
                              ipv9
                              ipv10
                              ipv11
                              ipv12
                              ipv13) #) } } } } }) -}
badb503fecd345e6e459e574b111391a
  pureDispatch :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.evalPure2
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
e50263f9d3c71365af9e4c4f42ef766d
  read' :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs252
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
09ec0ef3332b64997a24dad2b73b5e50
  read'' ::
    Data.Text.Internal.Text
    -> GHC.Types.Bool
    -> GHC.Types.Bool
    -> GHC.Types.Int
    -> GHC.Base.String
    -> Main.Env
    -> [Main.Val]
    -> Main.Eval Main.Env
  {- Arity: 8,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S,1*U(U)><S,1*U><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs256
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Types.Bool>_R
                 ->_R <GHC.Types.Int>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
02b4f6f7fa469ea0d967a30fb03845de
  readInt :: Main.Val -> GHC.Base.Maybe GHC.Types.Int
  {- Arity: 1, Strictness: <S,1*U>,
     Unfolding: (\ (x3 :: Main.Val) ->
                 case x3 of x4 {
                   DEFAULT -> GHC.Base.Nothing @ GHC.Types.Int
                   Main.Float dt61
                   -> GHC.Base.Just
                        @ GHC.Types.Int
                        (let {
                           n13 :: GHC.Prim.Int# = GHC.Prim.double2Int# dt61
                         } in
                         case GHC.Prim.<## dt61 (GHC.Prim.int2Double# n13) of lwild {
                           DEFAULT -> GHC.Types.I# n13
                           1# -> GHC.Types.I# (GHC.Prim.-# n13 1#) })
                   Main.Str ds s
                   -> case s of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      case Data.Text.Read.$wsigna
                             @ GHC.Types.Int
                             GHC.Num.$fNumInt
                             Data.Text.Read.decimal_$sdecimal10
                               `cast`
                             (Sym (Data.Text.Internal.Read.N:IParser[0]
                                       <Data.Text.Internal.Text>_R <GHC.Types.Int>_R))
                             ww1
                             ww2
                             ww3 of wild {
                        Data.Either.Left ipv -> GHC.Base.Nothing @ GHC.Types.Int
                        Data.Either.Right ds1
                        -> case ds1 of wild1 { (,) d ds2 ->
                           case ds2 of wild2 { Data.Text.Internal.Text dt61 dt62 dt63 ->
                           case Data.Text.Internal.empty_ of wild3 { Data.Text.Internal.Text dt64 dt65 dt66 ->
                           case GHC.Prim.==# dt63 dt66 of lwild {
                             DEFAULT -> GHC.Base.Nothing @ GHC.Types.Int
                             1#
                             -> case {__pkg_ccall text-1.2.3.1 GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.ByteArray#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.Word#
                                                               -> GHC.Prim.State# GHC.Prim.RealWorld
                                                               -> (# GHC.Prim.State#
                                                                       GHC.Prim.RealWorld,
                                                                     GHC.Prim.Int# #)}
                                       dt61
                                       (GHC.Prim.int2Word# dt62)
                                       dt64
                                       (GHC.Prim.int2Word# dt65)
                                       (GHC.Prim.int2Word# dt63)
                                       GHC.Prim.realWorld# of wild5 { (#,#) ds3 ds4 ->
                                case GHC.Prim.narrow32Int# ds4 of wild4 {
                                  DEFAULT -> GHC.Base.Nothing @ GHC.Types.Int
                                  0# -> GHC.Base.Just @ GHC.Types.Int d } } } } } } } } }) -}
ebc46e420177d7c0047bfc9708c2368d
  repl ::
    GHC.IO.FilePath
    -> System.Console.Haskeline.Prefs.Prefs
    -> Main.Env
    -> GHC.Base.String
    -> GHC.Types.IO ()
  {- Arity: 5,
     Strictness: <S,1*U><S(SSSLSSSSLL),1*U(U,U,U,U,U,U,U,U,U,U)><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U(U,U,U,U,U,U,U,U),U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.repl1
                  `cast`
                (<GHC.IO.FilePath>_R
                 ->_R <System.Console.Haskeline.Prefs.Prefs>_R
                 ->_R <Main.Env>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0] <()>_R)) -}
a55710688a477f7ecb796597c15f7b8f
  repl1 ::
    GHC.IO.FilePath
    -> System.Console.Haskeline.Prefs.Prefs
    -> Main.Env
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, () #)
  {- Arity: 5,
     Strictness: <S,1*U><S(SSSLSSSSLL),1*U(U,U,U,U,U,U,U,U,U,U)><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U(U,U,U,U,U,U,U,U),U,U,U,U,U)><S,1*U><S,U> -}
61d9aba738a7367b1479d90fc7413189
  ret :: Main.Env -> [Main.Val]
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LSLLLLLLLLLLLL),1*U(A,U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds2 }) -}
2f990bad82146ef6c63c5279c7fc48b2
  return' :: Main.Env -> [Main.Val] -> Main.Eval b
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs373
                  `cast`
                (forall (b :: <*>_N).
                 <Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  b>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <b>_N) ; Sym (Main.N:Eval[0]) <b>_N)) -}
5c2bb05f7560cecb43bbd972b2930f0f
  runEval ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Types.IO
         (Data.Either.Either ([Main.Val], Main.ShError) Main.Env)
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><C(S(LS)),1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs126
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Eval Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either ([Main.Val], Main.ShError) Main.Env>_R)) -}
0f122bf761ea82cdba936bc59c0208cc
  runEvalFunc ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Types.IO
         (Data.Either.Either ([Main.Val], Main.ShError) Main.Env)
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><C(S(LS)),1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runEvalFunc1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Eval Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either ([Main.Val], Main.ShError) Main.Env>_R)) -}
eee78a0857fd8563671309f9e98439cd
  runEvalFunc1 ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><C(S(LS)),1*C1(U(U,U))><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: Main.Eval Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ipv7 of wild { Main.Flags ds1 ds2 ->
                 case ds
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds3 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild1 {
                   Data.Either.Left l
                   -> case l of wild2 { (,) v ds4 ->
                      case ds4 of wild3 {
                        DEFAULT
                        -> case ds2 of wild4 {
                             GHC.Types.False -> ds3
                             GHC.Types.True
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       ipv6
                                       (case wild3 of wild5 {
                                          Main.SomeError s -> s
                                          Main.NumArgs s dt61
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError7
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError6
                                                     (case GHC.Show.$wshowSignedInt
                                                             0#
                                                             dt61
                                                             (GHC.Types.[]
                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                      GHC.Types.: @ GHC.Types.Char ww5 ww6 })))
                                          Main.TypeMismatch s v1
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError5
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError4
                                                     (Main.$fShowShError_$cshow1 v1)))
                                          Main.UnboundVar t
                                          -> GHC.CString.unpackAppendCString# Main.$fShowShError3 t
                                          Main.Internal s
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError2
                                               s })
                                       GHC.Types.True
                                       ipv14 of ds5 { (#,#) ipv16 ipv17 ->
                                (# ipv16,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (case v of dt61 { DEFAULT ->
                                      Main.Env
                                        GHC.Types.False
                                        dt61
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        wild
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13 }) #) } }
                        Main.Returned s
                        -> (# ipv14,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (case v of dt61 { DEFAULT ->
                                 Main.Env
                                   s
                                   dt61
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   wild
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13 }) #)
                        Main.Exited s -> ds3
                        Main.Broken s -> ds3 } }
                   Data.Either.Right r -> ds3 } } } }) -}
6de1451738826a275952ed5fbb7d3492
  runEvalKeep ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Types.IO
         (Data.Either.Either ([Main.Val], Main.ShError) Main.Env)
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><C(S(LS)),1*C1(U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.runEvalKeep1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Eval Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either ([Main.Val], Main.ShError) Main.Env>_R)) -}
2e1b617c1ac763f9be4754214f7e2bb2
  runEvalKeep1 ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSS(SS)SLSLLL),1*U(A,A,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><C(S(LS)),1*C1(U(U,U))><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: Main.Eval Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ipv7 of wild { Main.Flags ds1 ds2 ->
                 case ds
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds3 { (#,#) ipv14 ipv15 ->
                 case ipv15 of wild1 {
                   Data.Either.Left l
                   -> case l of wild2 { (,) v ds4 ->
                      case ds4 of wild3 {
                        DEFAULT
                        -> case ds2 of wild4 {
                             GHC.Types.False -> ds3
                             GHC.Types.True
                             -> case GHC.IO.Handle.Text.hPutStr2
                                       ipv6
                                       (case wild3 of wild5 {
                                          Main.SomeError s -> s
                                          Main.NumArgs s dt61
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError7
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError6
                                                     (case GHC.Show.$wshowSignedInt
                                                             0#
                                                             dt61
                                                             (GHC.Types.[]
                                                                @ GHC.Types.Char) of ww4 { (#,#) ww5 ww6 ->
                                                      GHC.Types.: @ GHC.Types.Char ww5 ww6 })))
                                          Main.TypeMismatch s v1
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError5
                                               (GHC.Base.++
                                                  @ GHC.Types.Char
                                                  s
                                                  (GHC.CString.unpackAppendCString#
                                                     Main.$fShowShError4
                                                     (Main.$fShowShError_$cshow1 v1)))
                                          Main.UnboundVar t
                                          -> GHC.CString.unpackAppendCString# Main.$fShowShError3 t
                                          Main.Internal s
                                          -> GHC.CString.unpackAppendCString#
                                               Main.$fShowShError2
                                               s })
                                       GHC.Types.True
                                       ipv14 of ds5 { (#,#) ipv16 ipv17 ->
                                (# ipv16,
                                   Data.Either.Right
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (case v of dt61 { DEFAULT ->
                                      Main.Env
                                        GHC.Types.False
                                        dt61
                                        ipv2
                                        ipv3
                                        ipv4
                                        ipv5
                                        ipv6
                                        wild
                                        ipv8
                                        ipv9
                                        ipv10
                                        ipv11
                                        ipv12
                                        ipv13 }) #) } }
                        Main.Returned s -> ds3
                        Main.Exited s -> ds3
                        Main.Broken s
                        -> (# ipv14,
                              Data.Either.Right
                                @ ([Main.Val], Main.ShError)
                                @ Main.Env
                                (case v of dt61 { DEFAULT ->
                                 Main.Env
                                   s
                                   dt61
                                   ipv2
                                   ipv3
                                   ipv4
                                   ipv5
                                   ipv6
                                   wild
                                   ipv8
                                   ipv9
                                   ipv10
                                   ipv11
                                   ipv12
                                   ipv13 }) #) } }
                   Data.Either.Right r -> ds3 } } } }) -}
328f4adbd1d3b75ca481eca81571b07c
  runEvalMain ::
    Main.Env -> Main.Eval Main.Env -> GHC.Types.IO Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><C(S(SS)),1*C1(U(U,1*U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs77
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Eval Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0] <Main.Env>_R)) -}
8b5cc866fb1922bfcc4413ef7b2834b2
  same' ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.same'1
                  `cast`
                (<Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
f089d40ecca5b5df7519f19d27e43840
  same'1 ::
    (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U> -}
e488d85c9ca11f03b2a7e1b1627ed59b
  searchfn ::
    Main.Env
    -> GHC.Base.String
    -> GHC.Types.IO [System.Console.Haskeline.Completion.Completion]
  {- Arity: 3,
     Strictness: <S(LLLLLLLLLLLSSS),1*U(A,A,A,A,A,A,A,A,A,A,A,U,1*U,1*U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.searchfn1
                  `cast`
                (<Main.Env>_R
                 ->_R <GHC.Base.String>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <[System.Console.Haskeline.Completion.Completion]>_R)) -}
1c2fc31798c54ff2ea535babefda88ef
  searchfn1 ::
    Main.Env
    -> GHC.Base.String
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Console.Haskeline.Completion.Completion] #)
  {- Arity: 3,
     Strictness: <S(LLLLLLLLLLLSSS),1*U(A,A,A,A,A,A,A,A,A,A,A,U,1*U,1*U)><S,1*U><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ (w :: Main.Env)
                   (w1 :: GHC.Base.String)
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$wsearchfn ww12 ww13 ww14 w1 w2 }) -}
cb50b2237b8542aeff9e3d3587d27a1e
  set :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.set1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
1aa64bcb485cc6acca747eaeba3b262b
  set1 ::
    Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><L,U> -}
f69302bc630b3bd069bbcf8d3f9d55d5
  setBin ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double)
    -> (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 5,
     Strictness: <S,1*U><C(C(S(SS))),1*C1(C1(U(U,1*U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.div'2
                  `cast`
                (<GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Double>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
ced6c6cefd2efbe41da0a60adb7d6367
  setBinBB ::
    GHC.Base.Monad m =>
    (GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
    -> (Main.Env -> m Main.Env)
    -> (Main.Env -> m Main.Env)
    -> Main.Env
    -> m Main.Env
  {- Arity: 5, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S,1*U><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: GHC.Types.Bool -> GHC.Types.Bool -> GHC.Types.Bool)
                   (eta1 :: Main.Env -> m Main.Env)
                   (eta2 :: Main.Env -> m Main.Env)
                   (eta3 :: Main.Env) ->
                 case eta of f4 { DEFAULT ->
                 case eta1 of x3 { DEFAULT ->
                 case eta2 of y { DEFAULT ->
                 case eta3 of e { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 let {
                   lvl531 :: m Main.Env = y e
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ GHC.Types.Bool
                   @ Main.Env
                   (GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ Main.Env
                      @ GHC.Types.Bool
                      Main.status
                      (x3 e))
                   (\ (n13 :: GHC.Types.Bool) ->
                    case n13 of n14 { DEFAULT ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ Main.Env
                      @ Main.Env
                      lvl531
                      (\ (m7 :: Main.Env) ->
                       case m7 of m8 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ Main.Env
                         (case f4 n14 ipv14 of dt61 { DEFAULT ->
                          Main.Env
                            dt61
                            ipv15
                            ipv2
                            ipv3
                            ipv4
                            ipv5
                            ipv6
                            ipv7
                            ipv8
                            ipv9
                            ipv10
                            ipv11
                            ipv12
                            ipv13 }) }) }) } } } }) -}
c154cbcf188abb08e07ec2683ff7d3d4
  setBinNB ::
    (GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool)
    -> (Main.Env -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 5,
     Strictness: <S,1*U><C(C(S(SS))),1*C1(C1(U(U,1*U)))><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.ge'2
                  `cast`
                (<GHC.Types.Double -> GHC.Types.Double -> GHC.Types.Bool>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
fe2548af0e76956c53fc8e7a7ace9cfa
  setBinVB ::
    GHC.Base.Monad m =>
    (Main.Val -> Main.Val -> GHC.Types.Bool)
    -> (Main.Env -> m Main.Env)
    -> (Main.Env -> m Main.Env)
    -> Main.Env
    -> m Main.Env
  {- Arity: 5,
     Strictness: <S(LC(C(S))LLL),U(1*U(1*U(1*C1(C1(U)),A),A,A,A,A,A),C(C1(U)),A,C(U),A)><S,1*U><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (eta :: Main.Val -> Main.Val -> GHC.Types.Bool)
                   (eta1 :: Main.Env -> m Main.Env)
                   (eta2 :: Main.Env -> m Main.Env)
                   (eta3 :: Main.Env) ->
                 case eta of f4 { DEFAULT ->
                 case eta1 of x3 { DEFAULT ->
                 case eta2 of y { DEFAULT ->
                 case eta3 of e { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 let {
                   lvl531 :: m Main.Env = y e
                 } in
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ Main.Val
                   @ Main.Env
                   (GHC.Base.fmap
                      @ m
                      (GHC.Base.$p1Applicative @ m (GHC.Base.$p1Monad @ m $dMonad))
                      @ Main.Env
                      @ Main.Val
                      Main.match'2
                      (x3 e))
                   (\ (n13 :: Main.Val) ->
                    case n13 of n14 { DEFAULT ->
                    GHC.Base.>>=
                      @ m
                      $dMonad
                      @ Main.Env
                      @ Main.Env
                      lvl531
                      (\ (m7 :: Main.Env) ->
                       case m7 of m8 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                       GHC.Base.return
                         @ m
                         $dMonad
                         @ Main.Env
                         (case f4
                                 n14
                                 (case ipv15 of wild {
                                    [] -> GHC.List.badHead @ Main.Val
                                    : x4 ds1 -> x4 }) of dt61 { DEFAULT ->
                          Main.Env
                            dt61
                            ipv15
                            ipv2
                            ipv3
                            ipv4
                            ipv5
                            ipv6
                            ipv7
                            ipv8
                            ipv9
                            ipv10
                            ipv11
                            ipv12
                            ipv13 }) }) }) } } } }) -}
35088095909c186404b54c4fbcf84fd8
  setDefVar :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.setDefVar1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <()>_R)) -}
26746f159c0d43e31927b6216d95bebc
  setDefVar1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><L,U><L,C(C1(C1(U)))><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Inline: [0],
     Unfolding: InlineRule (6, True, False)
                (\ (w :: Data.Text.Internal.Text)
                   @ b
                   (w1 :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w2 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w3 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w4 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b)
                   (w5 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wsetDefVar ww1 ww2 ww3 @ b w1 w2 w3 w4 w5 }) -}
74a7ff820b4f9cfbcddc957cc4aba345
  setFn :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 8,
     Strictness: <S(SSS),U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS(SS)),1*U(U,U,U,U,U,U,U,U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.setFn1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (forall (b :: <*>_N).
                       <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R (<Main.ParseEnv>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(b,
                                             Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <Main.ParseEnv>_N
                                                                            <GHC.Types.IO>_R
                                                                            <b>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                               <Main.Custom>_N
                                                                                               <Data.Text.Internal.Text>_N
                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                  Main.ParseEnv
                                                                                                  GHC.Types.IO>_R
                                                                                               <()>_R)) -}
e07c8f245757993554ed6f438f620856
  setFn1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Main.ParseEnv
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
  {- Arity: 8,
     Strictness: <S(SSS),U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS(SS)),1*U(U,U,U,U,U,U,U,U(U,U))><S,U>,
     Unfolding: (\ (name1 :: Data.Text.Internal.Text)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta5 :: Main.ParseEnv)
                   (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case eta5 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                 case ipv7 of wild { Main.Flags ds ds1 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
                     <join 0>
                   = case name1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                     case Main.$w$slookup
                            @ ()
                            ww1
                            ww2
                            ww3
                            ipv4
                              `cast`
                            (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild1 {
                       GHC.Base.Nothing
                       -> ((eta3
                              GHC.Tuple.()
                              eta
                              (GHC.Types.[]
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                `cast`
                              (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                             (case Main.$w$sinsert
                                     @ ()
                                     ww1
                                     ww2
                                     ww3
                                     GHC.Tuple.()
                                     ipv2
                                       `cast`
                                     (Data.HashSet.N:HashSet[0]
                                          <Data.Text.Internal.Text>_N) of nt { DEFAULT ->
                              Main.ParseEnv
                                ipv
                                ipv1
                                nt
                                  `cast`
                                (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                wild }))
                            `cast`
                          (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                            eta6
                       GHC.Base.Just ds2
                       -> ((eta3
                              GHC.Tuple.()
                              eta
                              (GHC.Types.[]
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                `cast`
                              (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                             (Main.ParseEnv
                                ipv
                                ipv1
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                (GHC.Base.Just @ Main.Custom (Main.NotPureFunc ww))
                                wild))
                            `cast`
                          (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                            eta6 } }
                 } in
                 case ds of wild1 {
                   GHC.Types.False
                   -> case name1 of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                      let {
                        $j1 :: (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
                          <join 0>
                        = ((eta3
                              GHC.Tuple.()
                              eta
                              (GHC.Types.[]
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                `cast`
                              (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                             (Main.ParseEnv
                                ipv
                                ipv1
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                (GHC.Base.Just @ Main.Custom (Main.MultiDefine ww))
                                wild))
                            `cast`
                          (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                            eta6
                      } in
                      case Main.$w$slookup
                             @ ()
                             ww1
                             ww2
                             ww3
                             ipv3
                               `cast`
                             (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild2 {
                        GHC.Base.Nothing
                        -> case Main.$w$slookup
                                  @ ()
                                  ww1
                                  ww2
                                  ww3
                                  ipv2
                                    `cast`
                                  (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild3 {
                             GHC.Base.Nothing -> $j GHC.Base.Just ds2 -> $j1 }
                        GHC.Base.Just ds2 -> $j1 } }
                   GHC.Types.True -> $j } } }) -}
b5716c76caca9673a8441d73488f3835
  setPureFn :: Data.Text.Internal.Text -> Main.Parser ()
  {- Arity: 8,
     Strictness: <S,1*U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS(SS)),1*U(U,U,U,U,U,U,U,U(U,U))><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.setPureFn1
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R (forall (b :: <*>_N).
                       <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <()
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R (<Main.ParseEnv>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(b,
                                             Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <Main.ParseEnv>_N
                                                                            <GHC.Types.IO>_R
                                                                            <b>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                               <Main.Custom>_N
                                                                                               <Data.Text.Internal.Text>_N
                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                  Main.ParseEnv
                                                                                                  GHC.Types.IO>_R
                                                                                               <()>_R)) -}
4c6f92e2a0482d2f6392235257f8244a
  setPureFn1 ::
    Data.Text.Internal.Text
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (()
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Main.ParseEnv
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
  {- Arity: 8,
     Strictness: <S,1*U(U,U,U)><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><S(LSSSSSSS(SS)),1*U(U,U,U,U,U,U,U,U(U,U))><S,U>,
     Unfolding: (\ (name1 :: Data.Text.Internal.Text)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: ()
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta5 :: Main.ParseEnv)
                   (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case name1 of name2 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 case eta5 of x3 { Main.ParseEnv ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ->
                 case ipv10 of wild { Main.Flags ds ds1 ->
                 let {
                   $j :: (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
                     <join 0>
                   = ((eta3
                         GHC.Tuple.()
                         eta
                         (GHC.Types.[]
                            @ (Data.Set.Internal.Set
                                 (Text.Megaparsec.Error.ErrorItem
                                    (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                           `cast`
                         (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                   <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                        `cast`
                      (Control.Monad.Trans.State.Lazy.N:StateT[0]
                           <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                        (case Main.$w$sinsert
                                @ ()
                                ipv
                                ipv1
                                ipv2
                                GHC.Tuple.()
                                ipv6
                                  `cast`
                                (Data.HashSet.N:HashSet[0]
                                     <Data.Text.Internal.Text>_N) of nt { DEFAULT ->
                         case Main.$w$sdelete
                                @ ()
                                ipv
                                ipv1
                                ipv2
                                ipv7
                                  `cast`
                                (Data.HashSet.N:HashSet[0]
                                     <Data.Text.Internal.Text>_N) of nt1 { DEFAULT ->
                         Main.ParseEnv
                           ipv3
                           ipv4
                           ipv5
                           nt
                             `cast`
                           (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                           nt1
                             `cast`
                           (Sym (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N))
                           ipv8
                           ipv9
                           wild } }))
                       `cast`
                     (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                       eta6
                 } in
                 case ds of wild1 {
                   GHC.Types.False
                   -> let {
                        $j1 :: (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
                          <join 0>
                        = ((eta3
                              GHC.Tuple.()
                              eta
                              (GHC.Types.[]
                                 @ (Data.Set.Internal.Set
                                      (Text.Megaparsec.Error.ErrorItem
                                         (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                                `cast`
                              (Sym (Text.Megaparsec.Internal.N:Hints[0]
                                        <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                             `cast`
                           (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                             (Main.ParseEnv
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                (GHC.Base.Just @ Main.Custom (Main.MultiDefine name2))
                                wild))
                            `cast`
                          (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                            eta6
                      } in
                      case Main.$w$slookup
                             @ ()
                             ipv
                             ipv1
                             ipv2
                             ipv6
                               `cast`
                             (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild2 {
                        GHC.Base.Nothing
                        -> case Main.$w$slookup
                                  @ ()
                                  ipv
                                  ipv1
                                  ipv2
                                  ipv5
                                    `cast`
                                  (Data.HashSet.N:HashSet[0] <Data.Text.Internal.Text>_N) of wild3 {
                             GHC.Base.Nothing -> $j GHC.Base.Just ds2 -> $j1 }
                        GHC.Base.Just ds2 -> $j1 }
                   GHC.Types.True -> $j } } } }) -}
4c66010ca0d08446d02ec6bdd4d9545b
  setRetEnv :: Main.Env -> Main.Env -> Main.Env
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLSSSSSSSSSSSS),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S(SSLLLLLLLLLLLL),1*U(U,U,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (env :: Main.Env) (renv :: Main.Env) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case renv of renv1 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                 Main.Env
                   ipv14
                   ipv15
                   ipv2
                   ipv3
                   ipv4
                   ipv5
                   ipv6
                   ipv7
                   ipv8
                   ipv9
                   ipv10
                   ipv11
                   ipv12
                   ipv13 } }) -}
d9f481bb10f06ed779fe61eb6940e1f1
  setUni ::
    (GHC.Types.Double -> GHC.Types.Double)
    -> (Main.Env -> Main.Eval Main.Env)
    -> Main.Env
    -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <S,1*U><C(C(S(LS))),1*C1(C1(U(U,U)))><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.neg3
                  `cast`
                (<GHC.Types.Double -> GHC.Types.Double>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
d0971713bb5c3f6d6cb86a0edf441477
  setUniBool ::
    GHC.Base.Monad m =>
    (GHC.Types.Bool -> GHC.Types.Bool)
    -> (Main.Env -> m Main.Env) -> Main.Env -> m Main.Env
  {- Arity: 4, HasNoCafRefs,
     Strictness: <S(LC(C(S))LLL),U(A,1*C1(C1(U)),A,C(U),A)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (f4 :: GHC.Types.Bool -> GHC.Types.Bool)
                   (x3 :: Main.Env -> m Main.Env)
                   (e :: Main.Env) ->
                 case f4 of f5 { DEFAULT ->
                 case x3 of x4 { DEFAULT ->
                 case e of e1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 GHC.Base.>>=
                   @ m
                   $dMonad
                   @ Main.Env
                   @ Main.Env
                   (x4 e1)
                   (\ (n13 :: Main.Env) ->
                    case n13 of n14 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                    GHC.Base.return
                      @ m
                      $dMonad
                      @ Main.Env
                      (case f5 ipv14 of dt61 { DEFAULT ->
                       Main.Env
                         dt61
                         ipv15
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13 }) }) } } }) -}
38f2c176fd1b8db0526e2f3832a3fd7f
  setVar :: Main.Env -> Main.Val -> Main.Val -> Main.Eval Main.Env
  {- Arity: 4,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.setVar1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Val>_R
                 ->_R <Main.Val>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
19aed979d3428f6f40d6d93d47dac934
  setVar1 ::
    Main.Env
    -> Main.Val
    -> Main.Val
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><L,U> -}
7aa150ec6bc1c15765ad8100291595bd
  setenv :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs187
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
63702d89c6fdd2e9d4fe64296f1308a6
  sethandles :: Main.Env -> Main.Env -> Main.Env
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(SSSSLLLSSSSSSS),1*U(U,U,U,U,A,A,A,U,U,U,U,U,U,U)><S(LLLLSSSLLLLLLL),1*U(A,A,A,A,U,U,U,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (2, True, False)
                (\ (denv :: Main.Env) (senv :: Main.Env) ->
                 case denv of denv1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case senv of senv1 { Main.Env ipv14 ipv15 ipv16 ipv17 ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ->
                 Main.Env
                   ipv
                   ipv1
                   ipv2
                   ipv3
                   ipv18
                   ipv19
                   ipv20
                   ipv7
                   ipv8
                   ipv9
                   ipv10
                   ipv11
                   ipv12
                   ipv13 } }) -}
6dcda627e20a8df7d133c67143078128
  shift :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs96
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
e62e346bb5b61d64628354b1dbd7a2fe
  show' ::
    (Control.Monad.IO.Class.MonadIO m, GHC.Show.Show a) =>
    Main.Env -> [a] -> m Main.Env
  {- Arity: 4,
     Strictness: <S(S(LLC(C(S))LL)L),U(1*U(A,A,1*C1(C1(U)),1*C1(U),A),1*C1(U))><L,U(A,C(U),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   @ a
                   ($dMonadIO :: Control.Monad.IO.Class.MonadIO m)
                   ($dShow :: GHC.Show.Show a)
                   (eta :: Main.Env)
                   (eta1 :: [a]) ->
                 case eta of env { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case eta1 of xs { DEFAULT ->
                 let {
                   $dMonad :: GHC.Base.Monad m
                   = Control.Monad.IO.Class.$p1MonadIO @ m $dMonadIO
                 } in
                 GHC.Base.>>
                   @ m
                   $dMonad
                   @ ()
                   @ Main.Env
                   (Control.Monad.IO.Class.liftIO
                      @ m
                      $dMonadIO
                      @ ()
                      (GHC.IO.Handle.Text.hPutStr2
                         ipv5
                         (letrec {
                            go16 :: [a] -> [GHC.Types.Char] {- Arity: 1, Strictness: <S,1*U> -}
                            = \ (ds :: [a]) ->
                              case ds of wild {
                                [] -> GHC.Types.[] @ GHC.Types.Char
                                : y ys
                                -> GHC.Types.:
                                     @ GHC.Types.Char
                                     Main.show'1
                                     (GHC.Base.++
                                        @ GHC.Types.Char
                                        (GHC.Show.show @ a $dShow y)
                                        (go16 ys)) }
                          } in
                          case go16 xs of wild {
                            [] -> GHC.Types.[] @ GHC.Types.Char : ds1 xs1 -> xs1 })
                         GHC.Types.True)
                        `cast`
                      (Sym (GHC.Types.N:IO[0] <()>_R)))
                   (GHC.Base.return
                      @ m
                      $dMonad
                      @ Main.Env
                      (Main.Env
                         GHC.Types.True
                         Main.defaultFuncs230
                         ipv2
                         ipv3
                         ipv4
                         ipv5
                         ipv6
                         ipv7
                         ipv8
                         ipv9
                         ipv10
                         ipv11
                         ipv12
                         ipv13)) } }) -}
b84a042354b8a2b7f7eed482e86213df
  show'1 :: GHC.Types.Char
  {- HasNoCafRefs, Strictness: m, Unfolding: (GHC.Types.C# ' '#) -}
0c5f05a496139cf366f3080fbe29443d
  signalHandleClear :: GHC.Types.IO [System.Posix.Signals.Handler]
  {- Arity: 1, Strictness: <S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs79
                  `cast`
                (Sym (GHC.Types.N:IO[0] <[System.Posix.Signals.Handler]>_R)) -}
51d3eaa42880e66d0d4e6af3f085e998
  signalHandleRestore ::
    [System.Posix.Signals.Handler]
    -> GHC.Types.IO [System.Posix.Signals.Handler]
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.signalHandleRestore1
                  `cast`
                (<[System.Posix.Signals.Handler]>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[System.Posix.Signals.Handler]>_R)) -}
af8329c365727242f556cac969c38b1b
  signalHandleRestore1 ::
    [System.Posix.Signals.Handler]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          [System.Posix.Signals.Handler] #)
  {- Arity: 2, Strictness: <S,1*U><S,U>,
     Unfolding: (\ (h :: [System.Posix.Signals.Handler])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 Main.defaultFuncs75 h Main.defaultFuncs74 eta) -}
bae7611ae1501798e3789379c5555d2d
  spaceAnd :: Main.Parser a -> Main.Parser a
  {- Arity: 6,
     Strictness: <S,1*U><S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: InlineRule (0, True, True)
                Main.spaceAnd1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.Parser a>_R
                 ->_R Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                               <Main.Custom>_N
                               <Data.Text.Internal.Text>_N
                               <Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO>_R
                               <a>_R)) -}
694e8cc8fd5f1eaf61e35848ae960759
  spaceAnd1 ::
    Main.Parser a
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (a
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Control.Monad.Trans.State.Lazy.StateT
            Main.ParseEnv GHC.Types.IO b
  {- Arity: 6,
     Strictness: <S,1*U><S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,U><L,U><L,C(C1(C1(U)))><L,C(U)>,
     Unfolding: (\ @ a
                   (x3 :: Main.Parser a)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: a
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b) ->
                 case x3
                        `cast`
                      (Text.Megaparsec.Internal.N:ParsecT[0]
                           <Main.Custom>_N
                           <Data.Text.Internal.Text>_N
                           <Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO>_R
                           <a>_R) of nt { DEFAULT ->
                 case eta of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                 Main.$wgo1
                   @ b
                   ww6
                   ww7
                   ww8
                   ww10
                   ww11
                   ww3
                   ww4
                   (\ (x4 :: ())
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    nt
                      @ b
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ a
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta1)
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta2))
                   (\ (x4 :: ())[OneShot]
                      (s' :: Text.Megaparsec.State.State
                               Data.Text.Internal.Text)[OneShot]
                      (hs5 :: Text.Megaparsec.Internal.Hints
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))[OneShot] ->
                    nt
                      @ b
                      s'
                      eta1
                      eta2
                      (Text.Megaparsec.Internal.accHints
                         @ (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                         @ a
                         @ Data.Text.Internal.Text
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta3)
                      (Main.$s$fAlternativeParsecT_$swithHints
                         @ Main.Custom
                         @ (Control.Monad.Trans.State.Lazy.StateT
                              Main.ParseEnv GHC.Types.IO)
                         @ b
                         hs5
                         eta4)) } } } }) -}
d95071e6a0ce509ecc72bbb115827029
  spaces :: Main.Parser ()
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,A>,
     Unfolding: InlineRule (0, True, True)
                Main.spaces1
                  `cast`
                (Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                          <Main.Custom>_N
                          <Data.Text.Internal.Text>_N
                          <Control.Monad.Trans.State.Lazy.StateT
                             Main.ParseEnv GHC.Types.IO>_R
                          <()>_R)) -}
16bb852bcffbafd379373567fd3cad11
  spaces1 ::
    Text.Megaparsec.State.State Data.Text.Internal.Text
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (()
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Text.Megaparsec.Internal.Hints
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> (Text.Megaparsec.Error.ParseError
          (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
        -> Text.Megaparsec.State.State Data.Text.Internal.Text
        -> Control.Monad.Trans.State.Lazy.StateT
             Main.ParseEnv GHC.Types.IO b1)
    -> Control.Monad.Trans.State.Lazy.StateT
         Main.ParseEnv GHC.Types.IO b1
  {- Arity: 5,
     Strictness: <S(S(SSS)SSL),1*U(1*U(U,U,U),1*U(U(U,U,U),U),U,U(U))><L,C(C1(C1(U)))><L,A><L,1*C1(C1(C1(U)))><L,A>,
     Inline: [0],
     Unfolding: InlineRule (5, True, False)
                (\ @ b1
                   (w :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (w1 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w2 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w3 :: ()
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Text.Megaparsec.Internal.Hints
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1)
                   (w4 :: Text.Megaparsec.Error.ParseError
                            (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                          -> Text.Megaparsec.State.State Data.Text.Internal.Text
                          -> Control.Monad.Trans.State.Lazy.StateT
                               Main.ParseEnv GHC.Types.IO b1) ->
                 case w of ww { Text.Megaparsec.State.State ww1 ww2 ww3 ww4 ->
                 case ww1 of ww5 { Data.Text.Internal.Text ww6 ww7 ww8 ->
                 case ww2 of ww9 { GHC.Base.:| ww10 ww11 ->
                 Main.$wgo1 @ b1 ww6 ww7 ww8 ww10 ww11 ww3 ww4 w1 w3 } } }) -}
5d567151161719758d77ba58887906c1
  spawn ::
    Main.Env
    -> Main.Eval Main.Env -> Main.Eval (GHC.MVar.MVar Main.Env)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.spawn1
                  `cast`
                (<Main.Env>_R
                 ->_R <Main.Eval Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  (GHC.MVar.MVar
                                     Main.Env)>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                               <([Main.Val], Main.ShError)>_N
                                                               <GHC.Types.IO>_R
                                                               <GHC.MVar.MVar
                                                                  Main.Env>_N) ; Sym (Main.N:Eval[0]) <GHC.MVar.MVar
                                                                                                         Main.Env>_N)) -}
9e97811612ff82e2f1cca6ffe2505b98
  spawn1 ::
    Main.Env
    -> Main.Eval Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) (GHC.MVar.MVar Main.Env) #)
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (cmd :: Main.Eval Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case cmd
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R)) of nt { DEFAULT ->
                 case GHC.Prim.newMVar#
                        @ GHC.Prim.RealWorld
                        @ Main.Env
                        eta of ds { (#,#) ipv14 ipv15 ->
                 case GHC.Prim.fork#
                        @ (GHC.Types.IO ())
                        (\ (eta1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                         GHC.Prim.catch#
                           @ ()
                           @ GHC.Exception.SomeException
                           (\ (s :: GHC.Prim.State# GHC.Prim.RealWorld)[OneShot] ->
                            case Main.defaultFuncs77
                                   env1
                                   nt
                                     `cast`
                                   (Sym (GHC.Types.N:IO[0]
                                             <Data.Either.Either
                                                ([Main.Val], Main.ShError)
                                                Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                         <([Main.Val],
                                                                           Main.ShError)>_N
                                                                         <GHC.Types.IO>_R
                                                                         <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                                   s of ds1 { (#,#) ipv16 ipv17 ->
                            case ipv17 of renv { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                            case GHC.Prim.putMVar#
                                   @ GHC.Prim.RealWorld
                                   @ Main.Env
                                   ipv15
                                   renv
                                   ipv16 of s2# { DEFAULT ->
                            (# s2#, GHC.Tuple.() #) } } })
                           GHC.Conc.Sync.forkIO2
                           eta1)
                          `cast`
                        (Sym (GHC.Types.N:IO[0] <()>_R))
                        ipv14 of ds1 { (#,#) ipv16 ipv17 ->
                 (# ipv16,
                    Data.Either.Right
                      @ ([Main.Val], Main.ShError)
                      @ (GHC.MVar.MVar Main.Env)
                      (GHC.MVar.MVar @ Main.Env ipv15) #) } } } }) -}
04a55d92ff24bbb16ad7e267a9320f09
  split :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs216
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
61d9aba738a7367b1479d90fc7413189
  status :: Main.Env -> GHC.Types.Bool
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(SLLLLLLLLLLLLL),1*U(U,A,A,A,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds1 }) -}
e548032ca7f9d5ee6ef4df0d3bb189ba
  sub :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs208
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
4b7e6e14c0f5ebaa05312b95677fa7e6
  switch ::
    (t -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env) -> t -> Main.Eval Main.Env
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.switch1
                  `cast`
                (forall (t :: <*>_N).
                 <t -> Main.Eval Main.Env>_R
                 ->_R <Main.Env -> Main.Eval Main.Env>_R
                 ->_R <t>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
742034e91459c95eb587235192d19894
  switch1 ::
    (t -> Main.Eval Main.Env)
    -> (Main.Env -> Main.Eval Main.Env)
    -> t
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) Main.Env #)
  {- Arity: 4, HasNoCafRefs,
     Strictness: <C(C(S(LS))),1*C1(C1(U(U,U)))><S,1*U><S,1*U><S,U>,
     Unfolding: (\ @ t
                   (f4 :: t -> Main.Eval Main.Env)
                   (g :: Main.Env -> Main.Eval Main.Env)
                   (e :: t)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case g of g1 { DEFAULT ->
                 case e of e1 { DEFAULT ->
                 case (f4 e1)
                        `cast`
                      (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                          <([Main.Val], Main.ShError)>_N
                                                          <GHC.Types.IO>_R
                                                          <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                             <Data.Either.Either
                                                                                ([Main.Val],
                                                                                 Main.ShError)
                                                                                Main.Env>_R))
                        eta of ds1 { (#,#) ipv ipv1 ->
                 case ipv1 of wild {
                   Data.Either.Left e2 -> ds1
                   Data.Either.Right x3
                   -> case x3 of re { Main.Env ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ipv14 ipv15 ->
                      case ipv2 of wild1 {
                        GHC.Types.False -> ds1
                        GHC.Types.True
                        -> case (g1 re)
                                  `cast`
                                (Main.N:Eval[0] <Main.Env>_N ; (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                    <([Main.Val], Main.ShError)>_N
                                                                    <GHC.Types.IO>_R
                                                                    <Main.Env>_N ; GHC.Types.N:IO[0]
                                                                                       <Data.Either.Either
                                                                                          ([Main.Val],
                                                                                           Main.ShError)
                                                                                          Main.Env>_R))
                                  ipv of ds2 { (#,#) ipv16 ipv17 ->
                           case ipv17 of wild2 {
                             Data.Either.Left e2 -> ds2
                             Data.Either.Right x4
                             -> case x4 of re2 { Main.Env ipv18 ipv19 ipv20 ipv21 ipv22 ipv23 ipv24 ipv25 ipv26 ipv27 ipv28 ipv29 ipv30 ipv31 ->
                                (# ipv16,
                                   Data.Either.Left
                                     @ ([Main.Val], Main.ShError)
                                     @ Main.Env
                                     (ipv19, Main.Returned ipv18) #) } } } } } } } } }) -}
61d9aba738a7367b1479d90fc7413189
  thread :: Main.Env -> GHC.IORef.IORef Main.ThreadInfo
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLLLLLLLLLSL),1*U(A,A,A,A,A,A,A,A,A,A,A,A,U,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 (GHC.STRef.STRef @ GHC.Prim.RealWorld @ Main.ThreadInfo dt63)
                   `cast`
                 (Sym (GHC.IORef.N:IORef[0]) <Main.ThreadInfo>_N) }) -}
39ee8db0bb3b0f495bbe6cb30b3cecc9
  throwShError ::
    Main.Env -> ([Main.Val], Main.ShError) -> Main.Eval a
  {- Arity: 3,
     Strictness: <S(LLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)><S,1*U(U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.throwShError1
                  `cast`
                (forall (a :: <*>_N).
                 <Main.Env>_R
                 ->_R <([Main.Val], Main.ShError)>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
607f15bf3e7cbd957d960b755fc02fa1
  throwShError1 ::
    Main.Env
    -> ([Main.Val], Main.ShError)
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 3,
     Strictness: <S(LLLLLLSLLLLLLL),1*U(A,A,A,A,A,A,U,A,A,A,A,A,A,A)><S,1*U(U,U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (3, True, False)
                (\ @ a
                   (w :: Main.Env)
                   (w1 :: ([Main.Val], Main.ShError))
                   (w2 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case w1 of ww15 { (,) ww16 ww17 ->
                 case GHC.IO.Handle.Text.hPutStr2
                        ww7
                        (GHC.Types.:
                           @ GHC.Types.Char
                           GHC.Show.$fShow(,)3
                           (GHC.Show.showLitString
                              (Main.$fShowShError_$cshow ww17)
                              GHC.Show.$fShow[]1))
                        GHC.Types.True
                        w2 of ds1 { (#,#) ipv ipv1 ->
                 (# ipv,
                    Data.Either.Left
                      @ ([Main.Val], Main.ShError)
                      @ a
                      (ww16, ww17) #) } } }) -}
732999407421feec61bfff4ba20a59fc
  throwSyntax ::
    Main.Custom -> Main.Parser (Main.Env -> Main.Eval Main.Env)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><L,1*U(U,U,U,U,U,U,A,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.throwSyntax1
                  `cast`
                (<Main.Custom>_R
                 ->_R (forall (b :: <*>_N).
                       <Text.Megaparsec.State.State Data.Text.Internal.Text>_R
                       ->_R <(Main.Env -> Main.Eval Main.Env)
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <(Main.Env -> Main.Eval Main.Env)
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Text.Megaparsec.Internal.Hints
                                  (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R <Text.Megaparsec.Error.ParseError
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                             -> Text.Megaparsec.State.State Data.Text.Internal.Text
                             -> Control.Monad.Trans.State.Lazy.StateT
                                  Main.ParseEnv GHC.Types.IO b>_R
                       ->_R (<Main.ParseEnv>_R
                             ->_R Sym (GHC.Types.N:IO[0]
                                           <(b,
                                             Main.ParseEnv)>_R)) ; Sym (Control.Monad.Trans.State.Lazy.N:StateT[0]
                                                                            <Main.ParseEnv>_N
                                                                            <GHC.Types.IO>_R
                                                                            <b>_N)) ; Sym (Text.Megaparsec.Internal.N:ParsecT[0]
                                                                                               <Main.Custom>_N
                                                                                               <Data.Text.Internal.Text>_N
                                                                                               <Control.Monad.Trans.State.Lazy.StateT
                                                                                                  Main.ParseEnv
                                                                                                  GHC.Types.IO>_R
                                                                                               <Main.Env
                                                                                                -> Main.Eval
                                                                                                     Main.Env>_R)) -}
ec60a99b54f716854c4783a6a8af0400
  throwSyntax1 ::
    Main.Custom
    -> forall b.
       Text.Megaparsec.State.State Data.Text.Internal.Text
       -> ((Main.Env -> Main.Eval Main.Env)
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> ((Main.Env -> Main.Eval Main.Env)
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Text.Megaparsec.Internal.Hints
                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> (Text.Megaparsec.Error.ParseError
             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
           -> Text.Megaparsec.State.State Data.Text.Internal.Text
           -> Control.Monad.Trans.State.Lazy.StateT
                Main.ParseEnv GHC.Types.IO b)
       -> Main.ParseEnv
       -> GHC.Prim.State# GHC.Prim.RealWorld
       -> (# GHC.Prim.State# GHC.Prim.RealWorld, (b, Main.ParseEnv) #)
  {- Arity: 8, HasNoCafRefs,
     Strictness: <S,1*U><L,U><L,A><L,A><C(C(C(C(C(S))))),1*C1(C1(C1(C1(C1(U(U,U))))))><L,A><L,1*U(U,U,U,U,U,U,A,U)><S,U>,
     Unfolding: InlineRule (8, True, False)
                (\ (e :: Main.Custom)
                   @ b
                   (eta :: Text.Megaparsec.State.State Data.Text.Internal.Text)
                   (eta1 :: (Main.Env -> Main.Eval Main.Env)
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta2 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta3 :: (Main.Env -> Main.Eval Main.Env)
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Text.Megaparsec.Internal.Hints
                                 (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta4 :: Text.Megaparsec.Error.ParseError
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text) Main.Custom
                            -> Text.Megaparsec.State.State Data.Text.Internal.Text
                            -> Control.Monad.Trans.State.Lazy.StateT
                                 Main.ParseEnv GHC.Types.IO b)
                   (eta5 :: Main.ParseEnv)
                   (eta6 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case e of e1 { DEFAULT ->
                 ((eta3
                     (Main.$fMonadEval2 @ Main.Env)
                       `cast`
                     (<Main.Env>_R
                      ->_R Sym (GHC.Types.N:IO[0]
                                    <Data.Either.Either
                                       ([Main.Val], Main.ShError)
                                       Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                <([Main.Val], Main.ShError)>_N
                                                                <GHC.Types.IO>_R
                                                                <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                     eta
                     (GHC.Types.[]
                        @ (Data.Set.Internal.Set
                             (Text.Megaparsec.Error.ErrorItem
                                (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))))
                       `cast`
                     (Sym (Text.Megaparsec.Internal.N:Hints[0]
                               <Text.Megaparsec.Stream.Token Data.Text.Internal.Text>_N)))
                    `cast`
                  (Control.Monad.Trans.State.Lazy.N:StateT[0]
                       <Main.ParseEnv>_N <GHC.Types.IO>_R <b>_N)
                    (case eta5 of x3 { Main.ParseEnv ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ->
                     Main.ParseEnv
                       ipv
                       ipv1
                       ipv2
                       ipv3
                       ipv4
                       ipv5
                       (GHC.Base.Just @ Main.Custom e1)
                       ipv7 }))
                   `cast`
                 (GHC.Types.N:IO[0] <(b, Main.ParseEnv)>_R)
                   eta6 }) -}
61d9aba738a7367b1479d90fc7413189
  tid :: Main.ThreadInfo -> GHC.Conc.Sync.ThreadId
  RecSel Left Main.ThreadInfo
  {- Arity: 1, HasNoCafRefs, Strictness: <S(SLLL),1*U(U,A,A,A)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ThreadInfo) ->
                 case ds of wild { Main.ThreadInfo dt61 dt62 ds1 ds2 ->
                 GHC.Conc.Sync.ThreadId dt61 }) -}
e83362389f89529ce976cd597319bb60
  timeo :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs121
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
6e71bcf29fe5222ba87228d95e5282a9
  tmpdir :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs59
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
6c4b992029cdb3d464dca6b3dee7fbbc
  tmpdir' ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> Main.Env
    -> [Main.Val]
    -> Main.Eval Main.Env
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs62
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
09c3f0e1f912f9920bafd54c64ff429b
  tmpfile :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs67
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
7f2211d748503f8d842ad7b82c92ba00
  tmpfile' ::
    Data.Text.Internal.Text
    -> GHC.Base.Maybe GHC.Base.String
    -> GHC.Base.String
    -> Main.Env
    -> [Main.Val]
    -> Main.Eval Main.Env
  {- Arity: 6,
     Strictness: <S(SSS),1*U(U,U,U)><S,1*U><S,1*U><S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><L,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs68
                  `cast`
                (<Data.Text.Internal.Text>_R
                 ->_R <GHC.Base.Maybe GHC.Base.String>_R
                 ->_R <GHC.Base.String>_R
                 ->_R <Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
45d65584cb9076e223218f427b0bdf42
  toFloat :: GHC.Real.Integral a => a -> Main.Val
  {- Arity: 2, HasNoCafRefs,
     Strictness: <S(LLLLLLLLC(S)),1*U(A,A,A,A,A,A,A,A,1*C1(U))><L,U>m1,
     Unfolding: InlineRule (2, True, False)
                (\ @ a ($dIntegral :: GHC.Real.Integral a) (eta :: a) ->
                 case GHC.Integer.Type.doubleFromInteger
                        (GHC.Real.toInteger @ a $dIntegral eta) of wild { DEFAULT ->
                 Main.Float wild }) -}
76bb22c8c212d6c45406286ff3416b9d
  toInt :: Foreign.C.Error.Errno -> GHC.Types.Int
  {- Arity: 1, HasNoCafRefs, Strictness: <S(S),1*U(U)>m,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Foreign.C.Error.Errno) ->
                 case ds
                        `cast`
                      (Foreign.C.Error.N:Errno[0] ; Foreign.C.Types.N:CInt[0]) of nt { GHC.Int.I32# ipv ->
                 GHC.Types.I# ipv }) -}
0133d68ef2f1578ec822bfeaf36665f5
  toStr :: Data.Text.Internal.Text -> Main.Val
  {- Arity: 1, HasNoCafRefs, Strictness: <S,1*U(U,U,U)>m2,
     Unfolding: InlineRule (1, True, False)
                (\ (dt61 :: Data.Text.Internal.Text) ->
                 case dt61 of dt62 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 Main.Str
                   (GHC.Base.Nothing @ (GHC.IORef.IORef Main.Cache))
                   dt62 }) -}
a0c43c85f0655e6a58845151624505ed
  trap :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(SSSSSSSS(SS)SLSLLL),1*U(U,U,U,U,U,U,U,U(U,U),U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs304
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
b2fc9f6bd31c35cf1b8471041b61ad65
  trapExit :: Main.Env -> GHC.Types.IO Main.Env
  {- Arity: 2,
     Strictness: <S(SSSSSSSSSLSLSL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.trapExit1
                  `cast`
                (<Main.Env>_R ->_R Sym (GHC.Types.N:IO[0] <Main.Env>_R)) -}
d63a07a2f68a541fafc7c79c6425aced
  trapExit1 ::
    Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, Main.Env #)
  {- Arity: 2,
     Strictness: <S(SSSSSSSSSLSLSL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case GHC.Prim.readMutVar#
                        @ GHC.Prim.RealWorld
                        @ Main.ThreadInfo
                        ipv12
                        eta of ds1 { (#,#) ipv14 ipv15 ->
                 case ipv15 of tinfo { Main.ThreadInfo ipv16 ipv17 ipv18 ipv19 ->
                 Main.defaultFuncs77
                   env1
                   (Main.defaultFuncs51
                      Main.defaultFuncs50
                        `cast`
                      (<Main.Env>_R
                       ->_R <[Main.Val]>_R
                       ->_R Sym (GHC.Types.N:IO[0]
                                     <Data.Either.Either
                                        ([Main.Val], Main.ShError)
                                        Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                                 <([Main.Val], Main.ShError)>_N
                                                                 <GHC.Types.IO>_R
                                                                 <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                      (GHC.Types.: @ Main.Val ipv19 ipv1)
                      env1)
                     `cast`
                   (Sym (GHC.Types.N:IO[0]
                             <Data.Either.Either
                                ([Main.Val], Main.ShError)
                                Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                         <([Main.Val], Main.ShError)>_N
                                                         <GHC.Types.IO>_R
                                                         <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N))
                   ipv14 } } }) -}
4fd37541deea467621d0530acd3a14b5
  true :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ Main.Env
                   (Main.Env
                      GHC.Types.True
                      xs1
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13) } }) -}
6677ac68c19eb0a9944b3a4a4e5d3dc8
  ubool :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (ds :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   [] -> Main.ubool1 @ m
                   : ds1 xs
                   -> case ds1 of wild1 {
                        DEFAULT -> Main.ubool1 @ m
                        Main.Bool b
                        -> GHC.Base.return
                             @ m
                             $dMonad
                             @ Main.Env
                             (case xs of dt61 { DEFAULT ->
                              Main.Env
                                b
                                dt61
                                ipv2
                                ipv3
                                ipv4
                                ipv5
                                ipv6
                                ipv7
                                ipv8
                                ipv9
                                ipv10
                                ipv11
                                ipv12
                                ipv13 }) } } }) -}
a8e79f6f2cd28d9eefb635fb993c294b
  ubool1 :: m Main.Env
  {- Strictness: x -}
8bc2096573285326d10424c2571c2b45
  ulist :: GHC.Base.Monad m => Main.Env -> [Main.Val] -> m Main.Env
  {- Arity: 3, HasNoCafRefs,
     Strictness: <S(LLLC(S)L),1*U(A,A,A,1*C1(U),A)><S(SLSSSSSSSLSLLL),1*U(U,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U>,
     Unfolding: InlineRule (3, True, False)
                (\ @ m :: * -> *
                   ($dMonad :: GHC.Base.Monad m)
                   (env :: Main.Env)
                   (xs :: [Main.Val]) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case xs of xs1 { DEFAULT ->
                 GHC.Base.return
                   @ m
                   $dMonad
                   @ Main.Env
                   (case Main.defaultFuncs_ulist' xs1 of dt61 { DEFAULT ->
                    Main.Env
                      ipv
                      dt61
                      ipv2
                      ipv3
                      ipv4
                      ipv5
                      ipv6
                      ipv7
                      ipv8
                      ipv9
                      ipv10
                      ipv11
                      ipv12
                      ipv13 }) } }) -}
61d9aba738a7367b1479d90fc7413189
  unDefPureFn ::
    Main.ParseEnv -> Data.HashSet.HashSet Data.Text.Internal.Text
  RecSel Left Main.ParseEnv
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLLSLLL),1*U(A,A,A,A,U,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.ParseEnv) ->
                 case ds of wild { Main.ParseEnv dt61 ds1 ds2 ds3 ds4 ds5 ds6 ds7 ->
                 ds4 }) -}
c0c47d5cd058cb65db064aada0d31a53
  unavail :: p1 -> p2 -> Main.Eval a
  {- Arity: 3, Strictness: <S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs279
                  `cast`
                (forall (p6 :: <*>_N) (p7 :: <*>_N) (a :: <*>_N).
                 <p6>_R
                 ->_R <p7>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
cc02a885458c1d5bf456d7003770e6d5
  unquotedCompleteFn ::
    Main.Env
    -> System.Console.Haskeline.Completion.CompletionFunc GHC.Types.IO
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLLLSSS),1*U(A,A,A,A,A,A,A,A,A,A,A,U,U,U)><S(SL),1*U(U,U)>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Env) (w1 :: (GHC.Base.String, GHC.Base.String)) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 case w1 of ww15 { (,) ww16 ww17 ->
                 Main.$wunquotedCompleteFn ww12 ww13 ww14 ww16 ww17 } }) -}
1947a258199aeb3a41c858e1c283e847
  usage :: Main.Env -> [Main.Val] -> Main.Eval Main.Env
  {- Arity: 3,
     Strictness: <S(LLSSSSSSSLSLLL),1*U(A,A,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.defaultFuncs289
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  Main.Env>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                           <([Main.Val], Main.ShError)>_N
                                                           <GHC.Types.IO>_R
                                                           <Main.Env>_N) ; Sym (Main.N:Eval[0]) <Main.Env>_N)) -}
02df20bea3d2b1ecc88d0d2196790e0c
  usagePrint :: Data.Text.Internal.Text -> Main.Eval a
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.usagePrint1
                  `cast`
                (forall (a :: <*>_N).
                 <Data.Text.Internal.Text>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  a>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                    <([Main.Val], Main.ShError)>_N
                                                    <GHC.Types.IO>_R
                                                    <a>_N) ; Sym (Main.N:Eval[0]) <a>_N)) -}
d52415d3f14dd6cae2a60548e708efd3
  usagePrint1 ::
    Data.Text.Internal.Text
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) a #)
  {- Arity: 2, Strictness: <S,1*U(U,U,U)><S,U>,
     Unfolding: InlineRule (2, True, False)
                (\ @ a
                   (name1 :: Data.Text.Internal.Text)
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case name1 of name2 { Data.Text.Internal.Text ipv ipv1 ipv2 ->
                 (# eta,
                    Data.Either.Left
                      @ ([Main.Val], Main.ShError)
                      @ a
                      (GHC.Types.[] @ Main.Val,
                       case Main.usageShow name2 of dt61 { DEFAULT ->
                       Main.SomeError dt61 }) #) }) -}
6860924db0c2b198a01c14e2f7d78356
  usageShow :: Data.Text.Internal.Text -> GHC.Base.String
  {- Arity: 1, Strictness: <S(SSS),1*U(U,U,U)>, Inline: [0],
     Unfolding: InlineRule (1, True, False)
                (\ (w :: Data.Text.Internal.Text) ->
                 case w of ww { Data.Text.Internal.Text ww1 ww2 ww3 ->
                 Main.$wusageShow ww1 ww2 ww3 }) -}
2bc89fa392c8215e28619cd7565a0c40
  valExpand :: Main.Env -> [Main.Val] -> Main.Eval [Main.Val]
  {- Arity: 3,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.boolDispatch4
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  [Main.Val]>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                             <([Main.Val], Main.ShError)>_N
                                                             <GHC.Types.IO>_R
                                                             <[Main.Val]>_N) ; Sym (Main.N:Eval[0]) <[Main.Val]>_N)) -}
2c41f2e7202fd3d669fdf7167531919b
  valExpandInc ::
    Main.Env
    -> [Main.Val] -> [Main.Val] -> Main.Eval ([Main.Val], [Main.Val])
  {- Arity: 4,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.valExpandInc1
                  `cast`
                (<Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  ([Main.Val],
                                   [Main.Val])>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                               <([Main.Val], Main.ShError)>_N
                                                               <GHC.Types.IO>_R
                                                               <([Main.Val],
                                                                 [Main.Val])>_N) ; Sym (Main.N:Eval[0]) <([Main.Val],
                                                                                                          [Main.Val])>_N)) -}
f5fb48db0a53be94f452b99db31f6fce
  valExpandInc1 ::
    Main.Env
    -> [Main.Val]
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either
            ([Main.Val], Main.ShError) ([Main.Val], [Main.Val]) #)
  {- Arity: 4,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><S,U>,
     Unfolding: (\ (env :: Main.Env)
                   (ds :: [Main.Val])
                   (ds1 :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case env of env1 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds of wild {
                   []
                   -> case ds1 of wild1 {
                        [] -> (# eta, Main.boolDispatch2 #)
                        : x3 xs
                        -> case Main.boolDispatch_$svalExpand
                                  eta
                                  x3
                                  (GHC.Types.[] @ Main.Val)
                                  env1 of ds2 { (#,#) ipv14 ipv15 ->
                           case ipv15 of wild2 {
                             Data.Either.Left e1
                             -> (# ipv14,
                                   Data.Either.Left
                                     @ ([Main.Val], Main.ShError)
                                     @ ([Main.Val], [Main.Val])
                                     e1 #)
                             Data.Either.Right x4
                             -> case x4 of ys {
                                  [] -> Main.boolDispatch_$svalExpandInc ipv14 xs env1
                                  : ipv16 ipv17
                                  -> (# ipv14,
                                        Data.Either.Right
                                          @ ([Main.Val], Main.ShError)
                                          @ ([Main.Val], [Main.Val])
                                          (ys, xs) #) } } } }
                   : ipv14 ipv15
                   -> case ds1 of ds2 { DEFAULT ->
                      (# eta,
                         Data.Either.Right
                           @ ([Main.Val], Main.ShError)
                           @ ([Main.Val], [Main.Val])
                           (wild, ds2) #) } } }) -}
4329556432e23546bce25538eb46bf75
  valExpandMaybe ::
    Main.Env
    -> GHC.Base.Maybe Main.Env -> [Main.Val] -> Main.Eval [Main.Val]
  {- Arity: 4,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.valExpandMaybe1
                  `cast`
                (<Main.Env>_R
                 ->_R <GHC.Base.Maybe Main.Env>_R
                 ->_R <[Main.Val]>_R
                 ->_R Sym (GHC.Types.N:IO[0]
                               <Data.Either.Either
                                  ([Main.Val], Main.ShError)
                                  [Main.Val]>_R) ; (Sym (Control.Monad.Trans.Except.N:ExceptT[0]
                                                             <([Main.Val], Main.ShError)>_N
                                                             <GHC.Types.IO>_R
                                                             <[Main.Val]>_N) ; Sym (Main.N:Eval[0]) <[Main.Val]>_N)) -}
66e2de6fd6035ecf8ef6cf12193b8d89
  valExpandMaybe1 ::
    Main.Env
    -> GHC.Base.Maybe Main.Env
    -> [Main.Val]
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld,
          Data.Either.Either ([Main.Val], Main.ShError) [Main.Val] #)
  {- Arity: 4,
     Strictness: <S(SSSSSSSSSLSLLL),1*U(U,U,U,U,U,U,U,U,U,U,U,U,U,U)><S,1*U><S,1*U><S,U>,
     Unfolding: InlineRule (4, True, False)
                (\ (ds :: Main.Env)
                   (ds1 :: GHC.Base.Maybe Main.Env)
                   (xs :: [Main.Val])
                   (eta :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case ds of ds2 { Main.Env ipv ipv1 ipv2 ipv3 ipv4 ipv5 ipv6 ipv7 ipv8 ipv9 ipv10 ipv11 ipv12 ipv13 ->
                 case ds1 of wild {
                   GHC.Base.Nothing
                   -> case xs of xs1 { DEFAULT -> Main.boolDispatch4 ds2 xs1 eta }
                   GHC.Base.Just env
                   -> case xs of xs1 { DEFAULT ->
                      Main.boolDispatch4 env xs1 eta } } }) -}
61d9aba738a7367b1479d90fc7413189
  vars ::
    Main.Env
    -> Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val
  RecSel Left Main.Env
  {- Arity: 1, HasNoCafRefs,
     Strictness: <S(LLLSLLLLLLLLLL),1*U(A,A,A,U,A,A,A,A,A,A,A,A,A,A)>,
     Unfolding: InlineRule (1, True, False)
                (\ (ds :: Main.Env) ->
                 case ds of wild { Main.Env ds1 ds2 ds3 ds4 ds5 ds6 ds7 ds8 ds9 dt61 ds10 dt62 dt63 dt64 ->
                 ds4 }) -}
6420e947659efcc90af472bdaab13d33
  wordlist :: Main.Env -> GHC.Types.IO [GHC.Base.String]
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLLLSSS),1*U(A,A,A,A,A,A,A,A,A,A,A,U,1*U,1*U)><S,U>,
     Unfolding: InlineRule (0, True, True)
                Main.wordlist1
                  `cast`
                (<Main.Env>_R
                 ->_R Sym (GHC.Types.N:IO[0] <[GHC.Base.String]>_R)) -}
57323bdaeb24300c91b660ae210f6cfc
  wordlist1 ::
    Main.Env
    -> GHC.Prim.State# GHC.Prim.RealWorld
    -> (# GHC.Prim.State# GHC.Prim.RealWorld, [GHC.Base.String] #)
  {- Arity: 2,
     Strictness: <S(LLLLLLLLLLLSSS),1*U(A,A,A,A,A,A,A,A,A,A,A,U,1*U,1*U)><S,U>,
     Inline: [0],
     Unfolding: InlineRule (2, True, False)
                (\ (w :: Main.Env) (w1 :: GHC.Prim.State# GHC.Prim.RealWorld) ->
                 case w of ww { Main.Env ww1 ww2 ww3 ww4 ww5 ww6 ww7 ww8 ww9 ww10 ww11 ww12 ww13 ww14 ->
                 Main.$wwordlist ww12 ww13 ww14 w1 }) -}
76f9e30c61311264faffbce6147d799e
  zipMaybe :: [a] -> [b] -> GHC.Base.Maybe [(a, b)]
  {- Arity: 2, HasNoCafRefs, Strictness: <S,1*U><S,1*U> -}
instance GHC.Base.Applicative [Main.Eval] = Main.$fApplicativeEval
instance GHC.Classes.Eq [Main.Custom] = Main.$fEqCustom
instance GHC.Classes.Eq [Main.LambdaType] = Main.$fEqLambdaType
instance GHC.Classes.Eq [Main.Val] = Main.$fEqVal
instance GHC.Base.Functor [Main.Eval] = Main.$fFunctorEval
instance Control.Monad.Error.Class.MonadError [(,), Main.Eval]
  = Main.$fMonadErrorEval
instance GHC.Base.Monad [Main.Eval] = Main.$fMonadEval
instance Control.Monad.IO.Class.MonadIO [Main.Eval]
  = Main.$fMonadIOEval
instance GHC.Classes.Ord [Main.Custom] = Main.$fOrdCustom
instance GHC.Classes.Ord [Main.Val] = Main.$fOrdVal
instance GHC.Show.Show [Main.Custom] = Main.$fShowCustom
instance Text.Megaparsec.Error.ShowErrorComponent [Main.Custom]
  = Main.$fShowErrorComponentCustom
instance GHC.Show.Show [Main.Flags] = Main.$fShowFlags
instance GHC.Show.Show [Main.JobInfo] = Main.$fShowJobInfo
instance GHC.Show.Show [Main.ParseEnv] = Main.$fShowParseEnv
instance GHC.Show.Show [Main.ShError] = Main.$fShowShError
instance GHC.Show.Show [Main.Val] = Main.$fShowVal
instance GHC.Show.Show [Main.VarT] = Main.$fShowVarT
"SC:$wgetVarMaybe0" [0] forall (sc :: GHC.Prim.Int#)
                               (sc1 :: GHC.Prim.MutVar# GHC.Prim.RealWorld GHC.Types.Int)
                               (sc2 :: GHC.Prim.MutVar# GHC.Prim.RealWorld Main.ThreadInfo)
                               (sc3 :: GHC.Prim.MutVar#
                                         GHC.Prim.RealWorld
                                         (Data.HashMap.Base.HashMap
                                            Data.Text.Internal.Text Main.Val))
                               (sc4 :: Data.HashMap.Base.HashMap Data.Text.Internal.Text Main.Val)
                               (sc5 :: [Main.Val])
                               (sc6 :: [Main.Val])
  Main.$wgetVarMaybe sc6 sc5 sc4 sc3 sc2 sc1 (Main.VarR sc)
  = Main.getVarMaybe_$s$wgetVarMaybe sc sc1 sc2 sc3 sc4 sc5 sc6
"SC:$wpoly_go10" [0] forall @ v
                            (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                            (sc1 :: GHC.Prim.Word#)
                            (sc2 :: GHC.Prim.SmallArray#
                                      (Data.HashMap.Base.HashMap Data.Text.Internal.Text v))
                            (sc3 :: GHC.Prim.Int#)
                            (sc4 :: v)
                            (sc5 :: GHC.Prim.Int#)
                            (sc6 :: GHC.Prim.Int#)
                            (sc7 :: GHC.Prim.ByteArray#)
                            (sc8 :: GHC.Prim.Word#)
  Main.$wpoly_go7 @ v
                  sc8
                  sc7
                  sc6
                  sc5
                  sc4
                  sc3
                  (Data.HashMap.Base.BitmapIndexed
                     @ Data.Text.Internal.Text
                     @ v
                     sc1
                     sc2)
                  sc
  = Main.$sunsafeInsert_$s$wpoly_go1
      @ v
      sc
      sc1
      sc2
      sc3
      sc4
      sc5
      sc6
      sc7
      sc8
"SC:$wpoly_go10" [0] forall @ v
                            (sc :: GHC.Prim.Word#)
                            (sc1 :: GHC.Prim.SmallArray#
                                      (Data.HashMap.Base.HashMap Data.Text.Internal.Text v))
                            (sc2 :: GHC.Prim.Int#)
                            (sc3 :: v)
                            (sc4 :: GHC.Prim.Int#)
                            (sc5 :: GHC.Prim.Int#)
                            (sc6 :: GHC.Prim.ByteArray#)
                            (sc7 :: GHC.Prim.Word#)
  Main.$wpoly_go5 @ v
                  sc7
                  sc6
                  sc5
                  sc4
                  sc3
                  sc2
                  (Data.HashMap.Base.BitmapIndexed
                     @ Data.Text.Internal.Text
                     @ v
                     sc
                     sc1)
  = Main.$sinsert_$s$wpoly_go1 @ v sc sc1 sc2 sc3 sc4 sc5 sc6 sc7
"SC:go10" forall (sc :: Data.Text.Internal.Text)
                 (sc1 :: [Data.Text.Internal.Text])
  Main.defaultFuncs_go2 (GHC.Types.:
                           @ Data.Text.Internal.Text
                           sc
                           sc1)
  = Main.defaultFuncs_$sgo1 sc sc1
"SC:go30" forall (sc :: GHC.Prim.Int#)
                 (sc1 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                 (sc2 :: Data.Set.Internal.Set
                           (Text.Megaparsec.Error.ErrorFancy Main.Custom))
                 (sc3 :: Data.Set.Internal.Set
                           (Text.Megaparsec.Error.ErrorFancy Main.Custom))
                 (sc4 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                 (sc5 :: Text.Megaparsec.Error.ErrorFancy Main.Custom)
                 (sc6 :: GHC.Classes.Ord
                           (Text.Megaparsec.Error.ErrorFancy Main.Custom))
  Main.$sinsert_go3 @ (Text.Megaparsec.Error.ErrorFancy Main.Custom)
                    sc6
                    sc5
                    sc4
                    (Data.Set.Internal.Bin
                       @ (Text.Megaparsec.Error.ErrorFancy Main.Custom)
                       sc
                       sc1
                       sc2
                       sc3)
  = Main.$sinsert_$sgo3 sc sc1 sc2 sc3 sc4 sc5 sc6
"SC:go30" forall (sc :: Data.Set.Internal.Set
                          (Text.Megaparsec.Error.ErrorItem
                             (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                 (sc1 :: [Data.Set.Internal.Set
                            (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))])
                 (sc2 :: Data.Set.Internal.Set
                           (Text.Megaparsec.Error.ErrorItem
                              (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
  Main.$sunions_go3 sc2
                    (GHC.Types.:
                       @ (Data.Set.Internal.Set
                            (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text)))
                       sc
                       sc1)
  = Main.$s$fAlternativeParsecT_$sgo3 sc sc1 sc2
"SC:isArg'1" forall (sc :: GHC.Prim.Char#)
                    (sc1 :: [GHC.Types.Char])
                    (sc2 :: [GHC.Types.Char])
  Main.completeFn_isArg' sc2
                         (GHC.Types.: @ GHC.Types.Char (GHC.Types.C# sc) sc1)
  = Main.completeFn_$sisArg' sc sc1 sc2
"SC:valExpand0" forall (sc :: GHC.Prim.State# GHC.Prim.RealWorld)
                       (sc1 :: Main.Val)
                       (sc2 :: [Main.Val])
                       (sc3 :: Main.Env)
  Main.boolDispatch4 sc3 (GHC.Types.: @ Main.Val sc1 sc2) sc
  = Main.boolDispatch_$svalExpand sc sc1 sc2 sc3
"SC:valExpandInc0" forall (sc :: GHC.Prim.State#
                                   GHC.Prim.RealWorld)
                          (sc1 :: [Main.Val])
                          (sc2 :: Main.Env)
  Main.valExpandInc1 sc2 (GHC.Types.[] @ Main.Val) sc1 sc
  = Main.boolDispatch_$svalExpandInc sc sc1 sc2
"SPEC plus'' @ []" forall ($dTraversable :: Data.Traversable.Traversable
                                              [])
  Main.plus''1 @ [] $dTraversable = Main.defaultFuncs_$splus''
"SPEC/Main $fAlternativeParsecT @ Custom @ Text _" forall @ m :: *
                                                                 -> *
                                                          (v1 :: Text.Megaparsec.Stream.Stream
                                                                   Data.Text.Internal.Text)
                                                          (v :: GHC.Classes.Ord Main.Custom)
  Text.Megaparsec.Internal.$fAlternativeParsecT @ Main.Custom
                                                @ Data.Text.Internal.Text
                                                @ m
                                                v
                                                v1
  = Main.$s$fAlternativeParsecT @ m
"SPEC/Main $fAlternativeParsecT1 @ Custom @ Text _" [0] forall @ m :: *
                                                                      -> *
                                                               (w1 :: Text.Megaparsec.Stream.Stream
                                                                        Data.Text.Internal.Text)
                                                               (w :: GHC.Classes.Ord Main.Custom)
  Text.Megaparsec.Internal.$fAlternativeParsecT1 @ Main.Custom
                                                 @ Data.Text.Internal.Text
                                                 @ m
                                                 w
                                                 w1
  = Main.$s$fAlternativeParsecT1 @ m
"SPEC/Main $fAlternativeParsecT3 @ Custom @ Text _" [0] forall @ m :: *
                                                                      -> *
                                                               (w1 :: Text.Megaparsec.Stream.Stream
                                                                        Data.Text.Internal.Text)
                                                               (w :: GHC.Classes.Ord Main.Custom)
  Text.Megaparsec.Internal.$fAlternativeParsecT3 @ Main.Custom
                                                 @ Data.Text.Internal.Text
                                                 @ m
                                                 w
                                                 w1
  = Main.$s$fAlternativeParsecT3 @ m
"SPEC/Main $fApplicativeExceptT_$c*> @ IO _" [orphan] forall @ e
                                                             ($dMonad :: GHC.Base.Monad
                                                                           GHC.Types.IO)
                                                             ($dFunctor :: GHC.Base.Functor
                                                                             GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$c*> @ GHC.Types.IO
                                                       @ e
                                                       $dFunctor
                                                       $dMonad
  = Main.$fApplicativeEval_$s$fApplicativeExceptT_$c*> @ e
"SPEC/Main $fApplicativeExceptT_$cpure @ IO _" [orphan] forall @ e
                                                               ($dMonad :: GHC.Base.Monad
                                                                             GHC.Types.IO)
                                                               ($dFunctor :: GHC.Base.Functor
                                                                               GHC.Types.IO)
  Control.Monad.Trans.Except.$fApplicativeExceptT_$cpure @ GHC.Types.IO
                                                         @ e
                                                         $dFunctor
                                                         $dMonad
  = Main.$fApplicativeEval_$s$fApplicativeExceptT_$cpure @ e
"SPEC/Main $fApplicativeParsecT @ Text _ _" [orphan] forall @ e
                                                            @ m :: * -> *
                                                            (v :: Text.Megaparsec.Stream.Stream
                                                                    Data.Text.Internal.Text)
  Text.Megaparsec.Internal.$fApplicativeParsecT @ Data.Text.Internal.Text
                                                @ e
                                                @ m
                                                v
  = Main.$s$fAlternativeParsecT_$s$fApplicativeParsecT @ e @ m
"SPEC/Main $fApplicativeStateT @ IO _" [orphan] forall @ s
                                                       (v1 :: GHC.Base.Monad GHC.Types.IO)
                                                       (v :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT @ GHC.Types.IO
                                                     @ s
                                                     v
                                                     v1
  = Main.$s$fApplicativeStateT @ s
"SPEC/Main $fApplicativeStateT_$c*> @ IO _" [orphan] forall @ s
                                                            ($dMonad :: GHC.Base.Monad GHC.Types.IO)
                                                            ($dFunctor :: GHC.Base.Functor
                                                                            GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c*> @ GHC.Types.IO
                                                          @ s
                                                          $dFunctor
                                                          $dMonad
  = Main.$s$fApplicativeStateT_$s$fApplicativeStateT_$c*> @ s
"SPEC/Main $fApplicativeStateT_$c<*> @ IO _" [orphan] forall @ s
                                                             ($dMonad :: GHC.Base.Monad
                                                                           GHC.Types.IO)
                                                             ($dFunctor :: GHC.Base.Functor
                                                                             GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$c<*> @ GHC.Types.IO
                                                           @ s
                                                           $dFunctor
                                                           $dMonad
  = Main.$s$fApplicativeStateT_$s$fApplicativeStateT_$c<*> @ s
"SPEC/Main $fApplicativeStateT_$cpure @ IO _" [orphan] forall @ s
                                                              ($dMonad :: GHC.Base.Monad
                                                                            GHC.Types.IO)
                                                              ($dFunctor :: GHC.Base.Functor
                                                                              GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fApplicativeStateT_$cpure @ GHC.Types.IO
                                                            @ s
                                                            $dFunctor
                                                            $dMonad
  = Main.$s$fApplicativeStateT_$s$fApplicativeStateT_$cpure @ s
"SPEC/Main $fEqErrorFancy @ Custom" forall (v :: GHC.Classes.Eq
                                                   Main.Custom)
  Text.Megaparsec.Error.$fEqErrorFancy @ Main.Custom v
  = Main.$s$fEqErrorFancy
"SPEC/Main $fEqErrorFancy_$c/= @ Custom" forall ($dEq :: GHC.Classes.Eq
                                                           Main.Custom)
  Text.Megaparsec.Error.$fEqErrorFancy_$c/= @ Main.Custom $dEq
  = Main.$s$fEqErrorFancy_$s$fEqErrorFancy_$c/=
"SPEC/Main $fEqErrorItem @ (Token Text)" [orphan] forall (v :: GHC.Classes.Eq
                                                                 (Text.Megaparsec.Stream.Token
                                                                    Data.Text.Internal.Text))
  Text.Megaparsec.Error.$fEqErrorItem @ (Text.Megaparsec.Stream.Token
                                           Data.Text.Internal.Text)
                                      v
  = Main.$s$fEqErrorItem
"SPEC/Main $fEqErrorItem_$c/= @ (Token Text)" [orphan] forall ($dEq :: GHC.Classes.Eq
                                                                         (Text.Megaparsec.Stream.Token
                                                                            Data.Text.Internal.Text))
  Text.Megaparsec.Error.$fEqErrorItem_$c/= @ (Text.Megaparsec.Stream.Token
                                                Data.Text.Internal.Text)
                                           $dEq
  = Main.$s$fEqErrorItem_$s$fEqErrorItem_$c/=
"SPEC/Main $fFunctorExceptT_$cfmap @ IO _" [orphan] forall @ e
                                                           ($dFunctor :: GHC.Base.Functor
                                                                           GHC.Types.IO)
  Control.Monad.Trans.Except.$fFunctorExceptT_$cfmap @ GHC.Types.IO
                                                     @ e
                                                     $dFunctor
  = Main.$fFunctorEval_$s$fFunctorExceptT_$cfmap @ e
"SPEC/Main $fFunctorStateT @ IO _" [orphan] forall @ s
                                                   (v :: GHC.Base.Functor GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fFunctorStateT @ GHC.Types.IO @ s v
  = Main.$s$fApplicativeStateT_$s$fFunctorStateT @ s
"SPEC/Main $fMonadExceptT_$c>> @ IO _" [orphan] forall @ e
                                                       ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>> @ GHC.Types.IO
                                                 @ e
                                                 $dMonad
  = Main.$fMonadEval_$s$fMonadExceptT_$c>> @ e
"SPEC/Main $fMonadExceptT_$c>>= @ IO _" [orphan] forall @ e
                                                        ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.$fMonadExceptT_$c>>= @ GHC.Types.IO
                                                  @ e
                                                  $dMonad
  = Main.$fMonadEval_$s$fMonadExceptT_$c>>= @ e
"SPEC/Main $fMonadParsecT @ Text _ _" [orphan] forall @ e
                                                      @ m :: * -> *
                                                      (v :: Text.Megaparsec.Stream.Stream
                                                              Data.Text.Internal.Text)
  Text.Megaparsec.Internal.$fMonadParsecT @ Data.Text.Internal.Text
                                          @ e
                                          @ m
                                          v
  = Main.$s$fMonadParsecT @ e @ m
"SPEC/Main $fMonadParsecT_$c>> @ Text _ _" [orphan] forall @ e
                                                           @ m :: * -> *
                                                           ($dStream :: Text.Megaparsec.Stream.Stream
                                                                          Data.Text.Internal.Text)
  Text.Megaparsec.Internal.$fMonadParsecT_$c>> @ Data.Text.Internal.Text
                                               @ e
                                               @ m
                                               $dStream
  = Main.$s$fMonadParsecT_$s$fMonadParsecT_$c>> @ e @ m
"SPEC/Main $fMonadParsecesParsecT @ Custom @ Text _" forall @ m :: *
                                                                   -> *
                                                            (v1 :: Text.Megaparsec.Stream.Stream
                                                                     Data.Text.Internal.Text)
                                                            (v :: GHC.Classes.Ord Main.Custom)
  Text.Megaparsec.Internal.$fMonadParsecesParsecT @ Main.Custom
                                                  @ Data.Text.Internal.Text
                                                  @ m
                                                  v
                                                  v1
  = Main.$s$fMonadParsecesParsecT @ m
"SPEC/Main $fMonadPlusParsecT @ Custom @ Text _" forall @ m :: *
                                                               -> *
                                                        (v1 :: Text.Megaparsec.Stream.Stream
                                                                 Data.Text.Internal.Text)
                                                        (v :: GHC.Classes.Ord Main.Custom)
  Text.Megaparsec.Internal.$fMonadPlusParsecT @ Main.Custom
                                              @ Data.Text.Internal.Text
                                              @ m
                                              v
                                              v1
  = Main.$s$fMonadParsecesParsecT_$s$fMonadPlusParsecT @ m
"SPEC/Main $fMonadStateT @ IO _" [orphan] forall @ s
                                                 (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fMonadStateT @ GHC.Types.IO @ s v
  = Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT @ s
"SPEC/Main $fMonadStateT_$c>> @ IO _" [orphan] forall @ s
                                                      ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>> @ GHC.Types.IO
                                                    @ s
                                                    $dMonad
  = Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$c>> @ s
"SPEC/Main $fMonadStateT_$c>>= @ IO _" [orphan] forall @ s
                                                       ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$c>>= @ GHC.Types.IO
                                                     @ s
                                                     $dMonad
  = Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$c>>= @ s
"SPEC/Main $fMonadStateT_$cfail @ IO _" [orphan] forall @ s
                                                        ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.$fMonadStateT_$cfail @ GHC.Types.IO
                                                      @ s
                                                      $dMonad
  = Main.$s$fMonadIOParsecT_$cliftIO_$s$fMonadStateT_$cfail @ s
"SPEC/Main $fMonadStatesStateT0 @ IO _" [orphan] forall @ s
                                                        (v :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.State.Class.$fMonadStatesStateT0 @ GHC.Types.IO @ s v
  = Main.$s$fMonadStatesStateT0 @ s
"SPEC/Main $fOrdErrorFancy @ Custom" forall (v :: GHC.Classes.Ord
                                                    Main.Custom)
  Text.Megaparsec.Error.$fOrdErrorFancy @ Main.Custom v
  = Main.$s$fOrdErrorFancy
"SPEC/Main $fOrdErrorFancy_$c<= @ Custom" forall ($dOrd :: GHC.Classes.Ord
                                                             Main.Custom)
  Text.Megaparsec.Error.$fOrdErrorFancy_$c<= @ Main.Custom $dOrd
  = Main.$s$fOrdErrorFancy_$c<=
"SPEC/Main $fOrdErrorFancy_$c>= @ Custom" forall ($dOrd :: GHC.Classes.Ord
                                                             Main.Custom)
  Text.Megaparsec.Error.$fOrdErrorFancy_$c>= @ Main.Custom $dOrd
  = Main.$s$fOrdErrorFancy_$c>=
"SPEC/Main $fOrdErrorFancy_$cmax @ Custom" forall ($dOrd :: GHC.Classes.Ord
                                                              Main.Custom)
  Text.Megaparsec.Error.$fOrdErrorFancy_$cmax @ Main.Custom $dOrd
  = Main.$s$fOrdErrorFancy_$cmax
"SPEC/Main $fOrdErrorFancy_$cmin @ Custom" forall ($dOrd :: GHC.Classes.Ord
                                                              Main.Custom)
  Text.Megaparsec.Error.$fOrdErrorFancy_$cmin @ Main.Custom $dOrd
  = Main.$s$fOrdErrorFancy_$cmin
"SPEC/Main $fOrdErrorItem @ (Token Text)" [orphan] forall (v :: GHC.Classes.Ord
                                                                  (Text.Megaparsec.Stream.Token
                                                                     Data.Text.Internal.Text))
  Text.Megaparsec.Error.$fOrdErrorItem @ (Text.Megaparsec.Stream.Token
                                            Data.Text.Internal.Text)
                                       v
  = Main.$s$fOrdErrorItem
"SPEC/Main $w$c<*> @ IO _" [orphan] [0] forall @ e
                                               (w :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.$w$c<*> @ GHC.Types.IO @ e w
  = Main.$fApplicativeEval_$s$w$c<*> @ e
"SPEC/Main $wupdateOrConcatWithKey @ Text _" [orphan] [0] forall @ v
                                                                 (w :: GHC.Classes.Eq
                                                                         Data.Text.Internal.Text)
  Data.HashMap.Base.$wupdateOrConcatWithKey @ Data.Text.Internal.Text
                                            @ v
                                            w
  = Main.$s$wupdateOrConcatWithKey @ v
"SPEC/Main between @ (ParsecT
                       Custom Text (StateT ParseEnv IO)) _ _ _" forall @ open
                                                                                                     @ close
                                                                                                     @ a
                                                                                                     ($dApplicative :: GHC.Base.Applicative
                                                                                                                         (Text.Megaparsec.Internal.ParsecT
                                                                                                                            Main.Custom
                                                                                                                            Data.Text.Internal.Text
                                                                                                                            (Control.Monad.Trans.State.Lazy.StateT
                                                                                                                               Main.ParseEnv
                                                                                                                               GHC.Types.IO)))
  Control.Applicative.Combinators.between @ (Text.Megaparsec.Internal.ParsecT
                                               Main.Custom
                                               Data.Text.Internal.Text
                                               (Control.Monad.Trans.State.Lazy.StateT
                                                  Main.ParseEnv GHC.Types.IO))
                                          @ open
                                          @ close
                                          @ a
                                          $dApplicative
  = Main.$sbetween @ open @ close @ a
"SPEC/Main catchE @ IO _ _ _" [orphan] forall @ e
                                              @ a
                                              @ e'
                                              ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.Except.catchE @ GHC.Types.IO
                                    @ e
                                    @ a
                                    @ e'
                                    $dMonad
  = Main.$fMonadErrorEval_$scatchE @ e @ a @ e'
"SPEC/Main pAp @ Text _ _ _ _" [orphan] forall @ e
                                               @ m :: * -> *
                                               @ a
                                               @ b
                                               ($dStream :: Text.Megaparsec.Stream.Stream
                                                              Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pAp @ Data.Text.Internal.Text
                               @ e
                               @ m
                               @ a
                               @ b
                               $dStream
  = Main.$s$fAlternativeParsecT_$spAp @ e @ m @ a @ b
"SPEC/Main pBind @ Text _ _ _ _" [orphan] forall @ e
                                                 @ m :: * -> *
                                                 @ a
                                                 @ b
                                                 ($dStream :: Text.Megaparsec.Stream.Stream
                                                                Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pBind @ Data.Text.Internal.Text
                                 @ e
                                 @ m
                                 @ a
                                 @ b
                                 $dStream
  = Main.$s$fMonadParsecT_$spBind @ e @ m @ a @ b
"SPEC/Main pNotFollowedBy @ Text _ _ _" [orphan] forall @ e
                                                        @ m :: * -> *
                                                        @ a
                                                        ($dStream :: Text.Megaparsec.Stream.Stream
                                                                       Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pNotFollowedBy @ Data.Text.Internal.Text
                                          @ e
                                          @ m
                                          @ a
                                          $dStream
  = Main.$s$fMonadParsecesParsecT_$spNotFollowedBy @ e @ m @ a
"SPEC/Main pPlus @ Custom @ Text _ _" forall @ m :: * -> *
                                             @ a
                                             ($dStream :: Text.Megaparsec.Stream.Stream
                                                            Data.Text.Internal.Text)
                                             ($dOrd :: GHC.Classes.Ord Main.Custom)
  Text.Megaparsec.Internal.pPlus @ Main.Custom
                                 @ Data.Text.Internal.Text
                                 @ m
                                 @ a
                                 $dOrd
                                 $dStream
  = Main.$s$fAlternativeParsecT_$spPlus @ m @ a
"SPEC/Main pTakeP _ @ Text _" [orphan] forall @ e
                                              @ m :: * -> *
                                              ($dStream :: Text.Megaparsec.Stream.Stream
                                                             Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pTakeP @ e
                                  @ Data.Text.Internal.Text
                                  @ m
                                  $dStream
  = Main.$s$fMonadParsecesParsecT_$spTakeP @ e @ m
"SPEC/Main pTakeWhile1P _ @ Text _" [orphan] forall @ e
                                                    @ m :: * -> *
                                                    ($dStream :: Text.Megaparsec.Stream.Stream
                                                                   Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pTakeWhile1P @ e
                                        @ Data.Text.Internal.Text
                                        @ m
                                        $dStream
  = Main.$s$fMonadParsecesParsecT_$spTakeWhile1P @ e @ m
"SPEC/Main pTakeWhileP _ @ Text _" [orphan] forall @ e
                                                   @ m :: * -> *
                                                   ($dStream :: Text.Megaparsec.Stream.Stream
                                                                  Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pTakeWhileP @ e
                                       @ Data.Text.Internal.Text
                                       @ m
                                       $dStream
  = Main.$s$fMonadParsecesParsecT_$spTakeWhileP @ e @ m
"SPEC/Main pToken _ @ Text _ _" [orphan] forall @ e
                                                @ m :: * -> *
                                                @ a
                                                ($dStream :: Text.Megaparsec.Stream.Stream
                                                               Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pToken @ e
                                  @ Data.Text.Internal.Text
                                  @ m
                                  @ a
                                  $dStream
  = Main.$s$fMonadParsecesParsecT_$spToken @ e @ m @ a
"SPEC/Main pTokens _ @ Text _" [orphan] forall @ e
                                               @ m :: * -> *
                                               ($dStream :: Text.Megaparsec.Stream.Stream
                                                              Data.Text.Internal.Text)
  Text.Megaparsec.Internal.pTokens @ e
                                   @ Data.Text.Internal.Text
                                   @ m
                                   $dStream
  = Main.$s$fMonadParsecesParsecT_$spTokens @ e @ m
"SPEC/Main put @ IO _" [orphan] forall @ s
                                       ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.put @ GHC.Types.IO @ s $dMonad
  = Main.$s$fMonadStatesStateT0_$sput @ s
"SPEC/Main state @ IO _ _" [orphan] forall @ s
                                           @ a
                                           ($dMonad :: GHC.Base.Monad GHC.Types.IO)
  Control.Monad.Trans.State.Lazy.state @ GHC.Types.IO @ s @ a $dMonad
  = Main.$s$fMonadStatesStateT0_$sstate @ s @ a
"SPEC/Main union @ (ErrorFancy Custom)" forall ($dOrd :: GHC.Classes.Ord
                                                           (Text.Megaparsec.Error.ErrorFancy
                                                              Main.Custom))
  Data.Set.Internal.union @ (Text.Megaparsec.Error.ErrorFancy
                               Main.Custom)
                          $dOrd
  = Main.$s$fAlternativeParsecT_$sunion
"SPEC/Main union @ (ErrorItem (Token Text))" [orphan] forall ($dOrd :: GHC.Classes.Ord
                                                                         (Text.Megaparsec.Error.ErrorItem
                                                                            (Text.Megaparsec.Stream.Token
                                                                               Data.Text.Internal.Text)))
  Data.Set.Internal.union @ (Text.Megaparsec.Error.ErrorItem
                               (Text.Megaparsec.Stream.Token Data.Text.Internal.Text))
                          $dOrd
  = Main.$s$fAlternativeParsecT_$sunion1
"SPEC/Main withHints @ Text _ _ _" [orphan] forall @ e
                                                   @ m :: * -> *
                                                   @ b
                                                   ($dOrd :: GHC.Classes.Ord
                                                               (Text.Megaparsec.Stream.Token
                                                                  Data.Text.Internal.Text))
  Text.Megaparsec.Internal.withHints @ Data.Text.Internal.Text
                                     @ e
                                     @ m
                                     @ b
                                     $dOrd
  = Main.$s$fAlternativeParsecT_$swithHints @ e @ m @ b
vectorised variables:
vectorised tycons:
vectorised reused tycons:
parallel variables:
parallel tycons:
trusted: none
require own pkg trusted: False

